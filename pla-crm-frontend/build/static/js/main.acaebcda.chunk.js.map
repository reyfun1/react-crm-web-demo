{"version":3,"sources":["constants/userConstants.js","constants/customerConstants.js","constants/environmentVariablesConstants.js","constants/noteConstants.js","constants/orderConstants.js","constants/adminConstants.js","constants/invoiceConstants.js","store.js","reducers/userReducers.js","reducers/customerReducers.js","reducers/noteReducers.js","reducers/invoiceReducers.js","reducers/orderReducers.js","reducers/sideNavReducer.js","reducers/environmentVariablesReducers.js","reducers/adminReducers.js","components/Loader.jsx","components/AutoCompleteSection.jsx","firebase.js","actions/customerActions.js","actions/environmentVariablesActions.js","components/Header.jsx","components/Footer.jsx","components/Button.jsx","components/PageTitle.jsx","components/ModalContainer.jsx","utils/DateMethods.js","utils/TableCSVExporter.js","components/TransactionTable.jsx","components/ChartItem.jsx","pages/HomePage.jsx","pages/LoginPage.jsx","actions/userActions.js","components/CustomInput.jsx","components/RadioSelector.jsx","actions/noteActions.js","pages/NoteCreatePage.jsx","components/NoteItem.jsx","utils/FeedCSVExporter.js","pages/NoteFeedPage.jsx","pages/NoteViewPage.jsx","components/TabSection.jsx","components/TableForm.jsx","actions/orderActions.js","pages/OrderCreatePage.jsx","pages/ReportsPage.jsx","components/OrderItem.jsx","components/ReportItem.jsx","pages/CustomerPage.jsx","components/OptionSelector.jsx","actions/adminActions.js","pages/AdminPage.jsx","pages/OrderSubmissionPage.jsx","pages/NoteSubmissionPage.jsx","pages/OrderFeedPage.jsx","pages/OrderViewPage.jsx","components/InvoicePDF.jsx","pages/InvoicePage.jsx","components/SalesOrderPDF.jsx","pages/SalesOrderPage.jsx","components/SideNav.jsx","actions/invoiceActions.js","pages/ListPageRenewed.jsx","App.js","index.js"],"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_RESET","USER_LOGOUT","USER_LOGOUT_ERROR","CUSTOMER_DETAILS_REQUEST","CUSTOMER_DETAILS_SUCCESS","CUSTOMER_DETAILS_FAIL","CUSTOMER_DETAILS_RESET","CUSTOMER_LIST_REQUEST","CUSTOMER_LIST_SUCCESS","CUSTOMER_LIST_FAIL","CUSTOMER_LIST_RESET","CUSTOMER_INVOICES_REQUEST","CUSTOMER_INVOICES_SUCCESS","CUSTOMER_INVOICES_FAIL","CUSTOMER_INVOICES_RESET","CUSTOMER_APP_ORDERS_REQUEST","CUSTOMER_APP_ORDERS_SUCCESS","CUSTOMER_APP_ORDERS_FAIL","CUSTOMER_APP_ORDERS_RESET","CUSTOMER_SALES_ORDERS_REQUEST","CUSTOMER_SALES_ORDERS_SUCCESS","CUSTOMER_SALES_ORDERS_FAIL","CUSTOMER_SALES_LIST_REQUEST","CUSTOMER_SALES_LIST_SUCCESS","CUSTOMER_SALES_LIST_FAIL","ENVIRONMENT_VAR_REQUEST","ENVIRONMENT_VAR_SUCCESS","ENVIRONMENT_VAR_FAIL","ENVIRONMENT_VAR_RESET","NOTE_CREATE_REQUEST","NOTE_CREATE_SUCCESS","NOTE_CREATE_FAIL","NOTE_FEED_REQUEST","NOTE_FEED_SUCCESS","NOTE_FEED_FAIL","NOTE_FEED_RESET","NOTE_CUSTOMER_FEED_REQUEST","NOTE_CUSTOMER_FEED_SUCCESS","NOTE_CUSTOMER_FEED_FAIL","NOTE_CUSTOMER_FEED_RESET","NOTE_DETAILS_REQUEST","NOTE_DETAILS_SUCCESS","NOTE_DETAILS_FAIL","NOTE_DETAILS_RESET","NOTE_FEED_DISABLE_SHOW_MORE","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_FEED_REQUEST","ORDER_FEED_SUCCESS","ORDER_FEED_FAIL","ORDER_FEED_RESET","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","ORDER_DETAILS_RESET","ORDER_FEED_DISABLE_SHOW_MORE","ORDER_CHANGE_STATUS_REQUEST","ORDER_CHANGE_STATUS_SUCCESS","ORDER_CHANGE_STATUS_FAIL","ADMIN_USER_CREATE_REQUEST","ADMIN_USER_CREATE_SUCCESS","ADMIN_USER_CREATE_FAIL","ADMIN_USER_CREATE_RESET","ADMIN_USER_LIST_REQUEST","ADMIN_USER_LIST_SUCCESS","ADMIN_USER_LIST_FAIL","INVOICES_LIST_REQUEST","INVOICES_LIST_SUCCESS","INVOICES_LIST_FAIL","INVOICES_LIST_RESET","INVOICES_LIST_DISABLE_SHOW_MORE","reducer","combineReducers","userLogin","state","action","type","loading","userInfo","payload","error","customerDetails","customerInfo","customerInvoices","customerAppOrders","customerSalesOrders","customerNotes","notes","customerList","customerSalesList","salesList","invoiceList","disableShowMore","orderCreate","order","success","ordersFeed","orders","orderDetails","orderChangeStatus","sideNav","environmentVariables","lists","noteCreate","note","notesFeed","noteDetails","adminUserList","users","adminCreateNewUser","user","initialState","localStorage","getItem","JSON","parse","itemList","inventoryItems","inventoryServices","noteTypes","orderForms","standard","products","priceLevelList","repList","termList","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Loader","className","AutoCompleteSection","searchBoxText","resetMainSearchBar","handleClick","list","useSelector","useState","filteredList","setFilteredList","useEffect","regex","RegExp","filter","customer","CompanyName","match","FirstName","LastName","AccountNumber","slice","filterlist","length","map","onClick","City","State","ListID","style","app","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","db","firestore","rdb","database","functions","getCustomerData","Timestamp","customerID","dispatch","getState","a","Object","keys","getCustomerSalesList","collection","doc","get","then","exists","customerData","data","PriceLevelRef","FullName","catch","err","customerListID","ref","snapshot","val","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","Header","useDispatch","searchBoxStatus","setSearchBoxStatus","setSearchBoxText","history","useHistory","textInput","useRef","once","searchClickHandler","current","focus","console","log","goBack","id","placeholder","value","onChange","e","target","push","Footer","pathname","useLocation","to","aria-hidden","marginTop","Button","typeBtn","text","float","PageTitle","subtitle","title","btns","showCurrentDate","btnFunc","getCurrentDate","dayName","monthName","day","year","btn","obj","date","Date","getFullYear","toLocaleString","month","weekday","getDate","defaultProps","ModalContainer","modalType","msg","acceptMethod","declineMethod","handleAccept","split","line","i","standardDateFormatFromQb","dateArr","standardDateFormat","getMonth","formatDateTime","toLocaleTimeString","hour","hour12","minute","dateSelectors","Today","from","startOfDay","endOfDay","Yesterday","startOfYesterday","endOfYesterday","startOfWeek","weekStartsOn","endOfWeek","subWeeks","startOfMonth","endOfMonth","subMonths","startOfYear","endOfYear","setFullYear","TableCSVExporter","table","includeHeaders","this","rows","Array","querySelectorAll","shift","lines","numCols","_findLongestRowLength","row","undefined","children","parseCell","join","reduce","l","childElementCount","tableCell","parsedValue","textContent","replace","test","determineDueAge","daysDiff","differenceInDays","TransactionTable","addBtnClick","editUserClick","deleteUserClick","headers","customerPageInvoices","customerPageSalesOrders","customerPageAppOrders","customerListTable","iventoryListStatus","salesOrderProducts","handleExportCsvClick","htmlTable","csvOutput","convertToCSV","csvBlob","Blob","blobUrl","URL","createObjectURL","anchorElement","document","createElement","href","download","click","setTimeout","revokeObjectURL","CustomerRef","header","sort","b","TxnDate","transaction","invoiceOverDue","Number","parseInt","BalanceRemaining","DueDate","invNum","RefNumber","accounting","formatMoney","Subtotal","IsFullyInvoiced","soNum","TermsRef","PostalCode","TimeStamp","orderId","toDate","OrderTotals","amount","AuthorRef","displayName","role","firstname","lastname","email","restrictions","states","substring","lastLogin","Name","localeCompare","product","index","arr","QuantityOnHand","SalesDesc","QuantityOnSalesOrder","productCode","listid","name","price","qty","fontWeight","acc","getDifferentColors","ChartItem","chartData","labels","datasets","totalSales","backgroundColor","options","legend","display","maintainAspectRatio","responsive","scales","yAxes","ticks","beginAtZero","callback","values","toString","plugins","datalabels","anchor","align","offset","color","borderWidth","font","weight","ctx","formatter","dataIndex","dataset","data1","options1","HomePage","showModal","setShowModal","standardItems","inventoryToPass","setIntentoryToPass","standardItemsArr","o","includes","filterOutItems","LoginPage","location","password","showAlert","setShowAlert","currentUser","getIdTokenResult","idTokenResult","claims","setItem","stringify","onSubmit","preventDefault","signInWithEmailAndPassword","login","htmlFor","CustomInput","elName","required","maxLength","textarearows","setTextAreaRows","tabIndex","min","max","disabled","option","elem","clientHeight","scrollHeight","RadioSelector","handleChange","selectedValue","selected","setSelected","checked","getNotes","dates","filterInfo","lastDate","isRep","notesFromPrevState","query","query2","where","forEach","filterField","limit","orderBy","startAfter","snap","result","snap2","doc2","getNotesForCustomerPage","onSnapshot","NoteCreatePage","typeOfNotes","hasOwnProperty","key","selectedCustomerObj","setselectedCustomerObj","noteClass","setNoteClass","accName","setAccName","noteSubject","setNoteSubject","typeOfNote","setTypeOfNote","noteText","setNoteText","search","customerIdFromHistory","selectedCustomer","setCustomerFromHistory","Subject","Text","uid","photoURL","NoteType","NoteClass","add","createNote","handleNoteClassChange","customerResult","handleTypeOfNoteChange","NoteItem","FeedCSVExporter","headersArr","headerRow","innerHTML","newRow","NewCustomer","NewCustomerRef","PriceLevel","Terms","facings","OrderInstructions","OrderFormType","unshift","NoteFeedPage","React","memo","showFilters","setShowFilters","typeOfDate","setTypeOfDate","datesToShow","setDatesToShow","author","setAuthor","setFilterInfo","sessionStorage","dataFromStorage","filters","newFilters","handleLoadMore","width","noteClasses","authorsList","margin","NoteViewPage","noteId","params","foundNote","find","getNoteDetails","TabSection","footerbtns","activeTab","setActiveTab","active","setActive","tabbuttons","props","tabpages","numberOfPages","cloneElement","page","TableForm","form","onInput","pricingLevel","productsArr","mixFormAndItemsList","isDiffFromPrev","SalesPrice","productListID","formProductsJson","inventoryItemsJson","jsonObj","item","convertJsonToArr","getOrders","ordersFromPrevState","getOrderDetails","foundOrderInOrderFeed","foundOrderInCustomerPage","OrderCreatePage","termsList","alertMsg","setAlertMsg","loadingCustomerData","term","orderFormTypesOptions","orderFormType","setOrderFormType","customerType","setCustomerType","customerName","setCustomerName","streetAddress","setStreetAddress","city","setCity","setState","zipcode","setZipCode","setFirstName","setLastName","phone","setPhone","setEmail","paymentTerm","setPaymentTerm","priceLevel","setPriceLevel","currentPaymentTerm","setCurrentPaymentTerm","currentPriceLevel","setCurrentPriceLevel","formProducts","setFormProducts","orderTotals","setOrderTotals","orderInstructions","setOrderInstructions","repCode","autoCompleteClick","handlePriceLevelChange","newPriceDiscount","productID","salesPriceFromInvetory","calculateTotals","newProductsForm","ShipAddress","Addr1","Addr2","DefaultShipTo","ContactInfo","Email","Phone","Products","OrderStatus","RepCode","createOrder","radioOptions","handleCustomerTypeChange","Balance","TimeCreated","toLocaleDateString","statesList","listID","hidden","alertCompoundMsg","ReportsPage","isAdmin","setIsAdmin","isOffice","setIsOffice","token","admin","office","height","src","frameBorder","border","allowFullScreen","OrderItem","percentChange","initial","final","toFixed","ReportItem","percentChangeResult","hasInfinty","avgPerInvoice","CustomerPage","customerId","errorCustomerDetails","customerInvoicesLoading","customerInvoiceList","errorCustomerInvoices","customerAppOrdersLoading","customerAppOrderList","errorAppOrders","customerSalesOrdersLoading","customerSalesOrderList","errorSalesOrders","customerSalesListObj","customerNotesLoading","transactionTypes","transactionType","setTransactionType","getNotesForAccountHandler","code","lastInvoice","InvDate","yearSales","getCustomerAppOrders","getCustomerSalesOrders","OptionSelector","dataArr","clickedOption","checkedOption","AdminPage","loadingCreateNewUser","errorCreateNewUser","rep","stateSelected","newEmail","setNewEmail","newPassword1","setNewPassword1","newPassword2","setNewPassword2","setRole","setStatesSelected","addUserActive","setAddUserActive","editUserActive","currentUserEditing","currentUserEditingForm","setCurrentUserEditingForm","handleSubmitForm","NOPASSWORDMATCH","SHORTPASS","NOSTATEWITHREPMESSAGE","handleGoBack","window","scrollTo","mesage","newUser","createUser","httpsCallable","resp","message","ROLES","OrderSubmissionPage","NoteSubmissionPage","csvHeaders","OrderFeedPage","OrderViewPage","allowedStatusEditUsers","status","orderID","update","InvoicePDF","invoice","itemsLength","pagesNeeded","itemToPrint","InvoiceLineRet","Math","ceil","cellSpacing","formatDate","BillAddress","PONumber","SalesRepRef","j","ItemRef","Desc","Quantity","Rate","Amount","getRandom","newDate","toISOString","floor","random","InvoicePage","listInvoices","allInvoicesList","setInvoice","jsPDF","x","foundInvFromCustomerList","inv","foundInvFromAllList","padding","justifyContent","invoicesArrHTML","html","y","save","SalesOrderPDF","salesorder","isArray","SalesOrderLineRet","FOB","Invoiced","SalesOrderPage","customerSalesOrdersList","salesOrder","setSalesOrder","foundSoFromCustomerList","so","salesOrderHTML","SideNav","closeBtn","handleLogOutClick","signOut","removeItem","onNavLinkClick","reload","transform","getInvoiceList","invoiceFromPrevStates","ListPageRenewed","customerListState","loadingCustomerList","invoiceListState","loadingInvoiceList","typeOfList","setTypeOfList","keyword","setKeyword","setFilterField","sortField","setSortField","customerListFilterOptions","filterOptions","setFilterOptions","customerListSortOptions","sortOptions","setSortOptions","customerListCompState","setCustomerListCompState","invoiceListFilterOptions","invoiceListSortOptions","handleApplyFiltersClick","datafromStorage","filterSortCustomerList","newFilterField","newSortField","newKeyword","newlist","modifiedlist","FirtstName","typesOfLists","App","path","component","exact","ListsPageRenewed","ReactDOM","render","getElementById"],"mappings":"8MAAaA,EAAqB,qBACrBC,EAAqB,qBACrBC,EAAkB,kBAClBC,EAAmB,mBAEnBC,EAAa,cACbC,EAAmB,yB,OCNnBC,EAA2B,2BAC3BC,EAA2B,2BAC3BC,EAAwB,wBACxBC,EAAyB,yBAEzBC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAAqB,qBACrBC,EAAsB,sBAEtBC,EAA4B,4BAC5BC,EAA4B,4BAC5BC,EAAyB,yBACzBC,EAA0B,0BAE1BC,EAA8B,8BAC9BC,EAA8B,8BAC9BC,EAA2B,2BAC3BC,EAA4B,4BAE5BC,EAAgC,gCAChCC,EAAgC,gCAChCC,EAA6B,6BAO7BC,EAA8B,8BAC9BC,EAA8B,8BAC9BC,EAA2B,2BC/B3BC,EAA0B,0BAC1BC,EAA0B,0BAC1BC,EAAuB,uBACvBC,EAAwB,wBCHxBC,EAAsB,sBACtBC,EAAsB,sBACtBC,EAAmB,mBAGnBC,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAiB,iBAEjBC,EAAkB,kBAElBC,EAA6B,6BAC7BC,EAA6B,6BAC7BC,GAA0B,0BAC1BC,GAA2B,2BAE3BC,GAAuB,uBACvBC,GAAuB,uBACvBC,GAAoB,oBACpBC,GAAqB,qBAErBC,GAA8B,8BCrB9BC,GAAuB,uBACvBC,GAAuB,uBACvBC,GAAoB,oBAEpBC,GAAqB,qBACrBC,GAAqB,qBACrBC,GAAkB,kBAClBC,GAAmB,mBAEnBC,GAAwB,wBACxBC,GAAwB,wBACxBC,GAAqB,qBACrBC,GAAsB,sBAEtBC,GAA+B,+BAG/BC,GAA8B,8BAC9BC,GAA8B,8BAC9BC,GAA2B,2BCnB3BC,GAA4B,4BAC5BC,GAA4B,4BAC5BC,GAAyB,yBACzBC,GAA0B,0BAE1BC,GAA0B,0BAC1BC,GAA0B,0BAC1BC,GAAuB,uBCPvBC,GAAwB,wBACxBC,GAAwB,wBACxBC,GAAqB,qBACrBC,GAAsB,sBAGtBC,GAAkC,kCCSzCC,GAAUC,0BAAgB,CAC5BC,UCH4B,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACpD,OAAQA,EAAOC,MAEX,KAAKhF,EACD,MAAO,CAAEiF,SAAS,GACtB,KAAKhF,EACD,MAAO,CAAEgF,SAAS,EAAOC,SAAUH,EAAOI,SAC9C,KAAKjF,EACD,MAAO,CAAE+E,SAAS,EAAOG,MAAOL,EAAOI,SAC3C,KAAKhF,EAEL,KAAKC,EACD,MAAO,GACX,KAAKC,EACD,MAAO,CAAE4E,SAAS,EAAOG,MAAOL,EAAOI,SAC3C,QACI,OAAOL,IDZfO,gBEUkC,WAA0C,IAAzCP,EAAwC,uDAAhC,CAACQ,aAAe,IAAKP,EAAW,uCAC3E,OAAQA,EAAOC,MAEX,KAAK1E,EACD,MAAO,CACH2E,SAAS,EACTK,aAAe,IAGvB,KAAK/E,EACD,MAAO,CACH0E,SAAS,EAAOK,aAAcP,EAAOI,SAG7C,KAAK3E,EACD,MAAO,CACHyE,SAAS,EAAOG,MAAOL,EAAOI,SAEtC,KAAK1E,EACD,MAAO,CAAC6E,aAAe,IAC3B,QACI,OAAOR,IF9BfS,iBEkCmC,WAA8D,IAA7DT,EAA4D,uDAApD,CAACG,SAAS,EAAOM,iBAAmB,IAAKR,EAAW,uCAChG,OAAQA,EAAOC,MAEX,KAAKlE,EACD,MAAO,CACHmE,SAAS,GAGjB,KAAKlE,EACD,MAAO,CACHkE,SAAS,EAAOM,iBAAkBR,EAAOI,SAGjD,KAAKnE,EACD,MAAO,CACHiE,SAAS,EAAOG,MAAOL,EAAOI,SAEtC,KAAKlE,EACD,MAAO,CACHgE,SAAS,EAAOM,iBAAmB,IAE3C,QACI,OAAOT,IFvDfU,kBE2DoC,WAA+D,IAA9DV,EAA6D,uDAArD,CAACG,SAAS,EAAOO,kBAAoB,IAAKT,EAAW,uCAClG,OAAQA,EAAOC,MAEX,KAAK9D,EACD,OAAO,2BACA4D,GADP,IAEIG,SAAS,IAGjB,KAAK9D,EACD,MAAO,CACH8D,SAAS,EAAOO,kBAAmBT,EAAOI,SAGlD,KAAK/D,EACD,MAAO,CACH6D,SAAS,EAAOG,MAAOL,EAAOI,SAEtC,KAAK9D,EACD,MAAO,CACH4D,SAAS,EAAOO,kBAAoB,IAE5C,QACI,OAAOV,IFjFfW,oBEqFsC,WAAiE,IAAhEX,EAA+D,uDAAvD,CAACG,SAAS,EAAOQ,oBAAsB,IAAKV,EAAW,uCACtG,OAAQA,EAAOC,MAEX,KAAK1D,EACD,OAAO,2BACAwD,GADP,IAEIG,SAAS,IAGjB,KAAK1D,EACD,MAAO,CACH0D,SAAS,EAAOQ,oBAAqBV,EAAOI,SAGpD,KAAK3D,EACD,MAAO,CACHyD,SAAS,EAAOG,MAAOL,EAAOI,SAEtC,QACI,OAAOL,IFvGfY,cG8DuC,WAAmD,IAAlDZ,EAAiD,uDAAzC,CAACG,SAAS,EAAOU,MAAO,IAAKZ,EAAY,uCACzF,OAAQA,EAAOC,MAEX,KAAKzC,EACD,MAAO,CACH0C,SAAS,GAGjB,KAAKzC,EACD,MAAO,CACHyC,SAAS,EACTU,MAAOZ,EAAOI,SAGtB,KAAK1C,GACD,MAAO,CACHwC,SAAS,EACTG,MAAOL,EAAOI,SAEtB,KAAKzC,GACD,MAAO,CAACuC,SAAS,GACrB,QACI,OAAOH,IHnFfc,aEmI+B,WAAwC,IAAvCd,EAAsC,uDAA9B,CAACc,aAAc,IAAIb,EAAW,uCACtE,OAAQA,EAAOC,MAEX,KAAKtE,EACD,MAAO,CACHuE,SAAS,EACTW,aAAc,IAGtB,KAAKjF,EACD,MAAO,CACHsE,SAAS,EACTW,aAAcb,EAAOI,SAG7B,KAAKvE,EACD,MAAO,CACHqE,SAAS,EACTG,MAAOL,EAAOI,SAEtB,KAAKtE,EACD,MAAO,CACHoE,SAAS,EACTW,aAAc,IAEtB,QACI,OAAOd,IF5Jfe,kBEyGoC,WAAuD,IAAtDf,EAAqD,uDAA7C,CAACG,SAAS,EAAOa,UAAY,IAAKf,EAAW,uCAC1F,OAAQA,EAAOC,MAEX,KAAKvD,EACD,OAAO,2BACAqD,GADP,IAEIG,SAAS,IAGjB,KAAKvD,EACD,MAAO,CACHuD,SAAS,EAAOa,UAAWf,EAAOI,SAG1C,KAAKxD,EACD,MAAO,CACHsD,SAAS,EAAOG,MAAOL,EAAOI,SAEtC,QACI,OAAOL,IF3HfiB,YIb8B,WAAuD,IAAtDjB,EAAqD,uDAA7C,CAACiB,YAAa,GAAId,SAAS,GAAOF,EAAW,uCACpF,OAAQA,EAAOC,MAEX,KAAKV,GACD,MAAO,CACHW,SAAS,EACTc,YAAa,IAGrB,KAAKxB,GACD,MAAO,CACHU,SAAS,EACTc,YAAahB,EAAOI,SAG5B,KAAKX,GACD,MAAO,CACHS,SAAS,EACTG,MAAOL,EAAOI,SAEtB,KAAKT,GACD,OAAO,2BACAI,GADP,IAEIkB,gBAAiBjB,EAAOI,UAEhC,KAAKV,GACD,MAAO,CACHQ,SAAS,EACTc,YAAa,IAErB,QACI,OAAOjB,IJhBfmB,YKL8B,WAAkD,IAAjDnB,EAAgD,uDAAxC,CAACG,SAAS,EAAOiB,MAAO,IAAKnB,EAAW,uCAC/E,OAAQA,EAAOC,MACX,KAAKhC,GACD,kCACO8B,GADP,IAEIG,SAAQ,IAEhB,KAAKhC,GACD,MAAM,CACFgC,SAAS,EACTkB,SAAS,EACTD,MAAOnB,EAAOI,SAEtB,KAAKjC,GACD,MAAM,CACF+B,SAAS,EACTG,MAAOL,EAAOI,SAGtB,QACI,OAAOL,ILdfsB,WKwC6B,WAAkE,IAAjEtB,EAAgE,uDAAxD,CAACG,SAAS,EAAOoB,OAAQ,GAAIjB,OAAO,GAAQL,EAAY,uCAC9F,OAAQA,EAAOC,MAEX,KAAK7B,GACD,MAAO,CACH8B,SAAS,GAGjB,KAAK7B,GACD,OAAO,2BACA0B,GADP,IAEIG,SAAS,EACToB,OAAQtB,EAAOI,UAEvB,KAAKxB,GACD,OAAO,2BACAmB,GADP,IAEIkB,gBAAiBjB,EAAOI,UAGhC,KAAK9B,GACD,MAAO,CACH4B,SAAS,EACTG,MAAOL,EAAOI,SAEtB,KAAK7B,GACD,MAAO,CAAC2B,SAAS,GACrB,QACI,OAAOH,ILnEfwB,aKuEoC,WAAmD,IAAlDxB,EAAiD,uDAAzC,CAACG,SAAS,EAAOiB,MAAO,IAAKnB,EAAY,uCACtF,OAAQA,EAAOC,MAEX,KAAKzB,GACD,MAAO,CACH0B,SAAS,EACTiB,MAAO,IAGf,KAAK1C,GACD,MAAO,CACHyB,SAAS,EACTiB,MAAOnB,EAAOI,SAGtB,KAAK1B,GACD,MAAO,CACHwB,SAAS,EACTG,MAAOL,EAAOI,SAEtB,KAAKzB,GACD,MAAO,CAACuB,SAAS,GACrB,QACI,OAAOH,IL7FfyB,kBKgB6B,WAAuC,IAAtCzB,EAAqC,uDAA7B,CAACG,SAAS,GAAQF,EAAW,uCACnE,OAAQA,EAAOC,MACX,KAAKpB,GACD,MAAM,CACFqB,SAAQ,GAEhB,KAAKpB,GACD,MAAM,CACFoB,SAAS,EACTkB,SAAS,GAEjB,KAAKrC,GACD,MAAM,CACFmB,SAAS,EACTG,MAAOL,EAAOI,SAGtB,QACI,OAAOL,ILjCf0B,QM7B0B,WAA4B,IAA3B1B,EAA0B,wDAAXC,EAAW,uCACrD,OAAQA,EAAOC,MAEX,IAAK,iBACD,OAAQF,EACZ,IAAK,eACD,OAAO,EACX,IAAK,eACD,OAAO,EACX,QACI,OAAOA,INoBf2B,qBOvBuC,WAAmC,IAAlC3B,EAAiC,uDAAzB,CAAE4B,MAAO,IAAK3B,EAAW,uCACzE,OAAQA,EAAOC,MACX,KAAKpD,EACD,MAAO,CAAEqD,SAAS,GACtB,KAAKpD,EACD,MAAO,CAAEoD,SAAS,EAAOyB,MAAO3B,EAAOI,SAC3C,KAAKrD,EACD,MAAO,CAAEmD,SAAS,EAAOG,MAAOL,EAAOI,SAC3C,KAAKpD,EACD,MAAO,GACX,QACI,OAAO+C,IPaf6B,WGR6B,WAAiD,IAAhD7B,EAA+C,uDAAvC,CAACG,SAAS,EAAO2B,KAAM,IAAK7B,EAAW,uCAC7E,OAAQA,EAAOC,MAEX,KAAKhD,EACD,MAAO,CACHiD,SAAS,GAGjB,KAAKhD,EACD,MAAO,CACHgD,SAAS,EACTkB,SAAS,EACTS,KAAM7B,EAAOI,SAGrB,KAAKjD,EACD,MAAO,CACH+C,SAAS,EACTG,MAAOL,EAAOI,SAEtB,QACI,OAAOL,IHZf+B,UGiB4B,WAAiE,IAAhE/B,EAA+D,uDAAvD,CAACG,SAAS,EAAOU,MAAO,GAAIP,OAAO,GAAQL,EAAY,uCAC5F,OAAQA,EAAOC,MAEX,KAAK7C,EACD,MAAO,CACH8C,SAAS,GAGjB,KAAK7C,EACD,OAAO,2BACA0C,GADP,IAEIG,SAAS,EACTU,MAAOZ,EAAOI,UAGtB,KAAKpC,GACD,OAAO,2BACA+B,GADP,IAEIkB,gBAAiBjB,EAAOI,UAGhC,KAAK9C,EACD,MAAO,CACH4C,SAAS,EACTG,MAAOL,EAAOI,SAEtB,KAAK7C,EACD,MAAO,CAAC2C,SAAS,GACrB,QACI,OAAOH,IH7CfgC,YG4EiC,WAAiD,IAAhDhC,EAA+C,uDAAvC,CAACG,SAAS,EAAO2B,KAAM,IAAK7B,EAAW,uCACjF,OAAQA,EAAOC,MACX,KAAKrC,GACD,MAAO,CACLsC,SAAS,EACT2B,KAAM,IAEZ,KAAKhE,GACD,MAAO,CACHqC,SAAS,EACT2B,KAAM7B,EAAOI,SAErB,KAAKtC,GACD,MAAO,CACHoC,SAAS,EACTG,MAAOL,EAAOI,SAEtB,KAAKrC,GACD,MAAO,CACHmC,SAAS,GAEjB,QACI,OAAOH,IHjGfiC,cQvBoC,WAAmD,IAAlDjC,EAAiD,uDAAzC,CAACG,SAAS,EAAO+B,MAAO,IAAKjC,EAAY,uCACtF,OAAQA,EAAOC,MAGX,KAAKb,GACD,MAAO,CACHc,SAAS,GAGjB,KAAKb,GACD,MAAO,CACHa,SAAS,EACT+B,MAAOjC,EAAOI,SAGtB,KAAKd,GACD,MAAO,CACHY,SAAS,EACTG,MAAOL,EAAOI,SAEtB,QACI,OAAOL,IRGfmC,mBQCiC,WAAkD,IAAjDnC,EAAgD,uDAAxC,CAACG,SAAS,EAAOiC,KAAM,IAAKnC,EAAY,uCAClF,OAAQA,EAAOC,MAGX,KAAKjB,GACD,MAAO,CACHkB,SAAS,GAGjB,KAAKjB,GACD,MAAO,CACHiB,SAAS,EACTiC,KAAMnC,EAAOI,QACbgB,SAAS,GAGjB,KAAKlC,GACD,MAAO,CACHgB,SAAS,EACTG,MAAOL,EAAOI,SAEtB,KAAKjB,GACD,MAAO,CACHe,SAAS,EACTiC,KAAM,IAEd,QACI,OAAOpC,MRlBbqC,GAAe,CACjBtC,UAAW,CACPK,SAPoBkC,aAAaC,QAAQ,YAC3CC,KAAKC,MAAMH,aAAaC,QAAQ,aAChC,MAOFhC,gBAAiB,CACbC,aAAc,IAElBuB,UAAY,CACR5B,SAAS,EACTU,MAAO,GACPK,iBAAiB,EACjBZ,OAAO,GAEXgB,WAAa,CACTnB,SAAS,EACToB,OAAQ,GACRL,iBAAiB,EACjBZ,OAAO,GAEX0B,YAAc,CACV7B,SAAS,EACT2B,KAAM,IAEVN,aAAe,CACXrB,SAAS,EACTiB,MAAO,IAEXD,YAAc,CACVhB,SAAS,EACTiB,MAAM,IAEVO,qBAAuB,CACnBC,MAAQ,CACJc,SAAW,CACPC,eAAgB,GAChBC,kBAAoB,IAExBC,UAAW,GACXC,WAAY,CACRC,SAAW,CACPC,SAAU,KAGlBC,eAAiB,GACjBC,QAAU,GACVC,SAAU,MAOhBC,GAAa,CAACC,KASLC,GAPDC,sBACV1D,GACAwC,GACAmB,8BAAoBC,kBAAe,WAAf,EAAmBL,M,kCSlF5BM,GAnBA,SAAC,GAEZ,OAFuB,EAAVxD,MAGT,IAAK,cAML,QACI,OACI,qBAAKyD,UAAU,8BAAf,SACI,mBAAGA,UAAU,uBCuClBC,GA/Ca,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,cAAeC,EAAqC,EAArCA,mBAAoBC,EAAiB,EAAjBA,YAEvDC,EAAOC,aAAY,SAAAjE,GAAK,OAAIA,EAAMc,gBAChCX,EAA0B6D,EAA1B7D,QAASW,EAAiBkD,EAAjBlD,aAH6D,EAKtCoD,mBAAS,IAL6B,oBAKvEC,EALuE,KAKzDC,EALyD,KAuB9E,OAPAC,qBAAU,WACHvD,GACCsD,EAXW,WACf,IAAME,EAAQ,IAAIC,OAAOV,EAAc,MAEvC,OAAO/C,EAAa0D,QAAO,SAAAC,GAAQ,OAC9BA,EAASC,aAAeD,EAASC,YAAYC,MAAML,IAAYG,EAASG,WAAaH,EAASG,UAAUD,MAAML,IAC9GG,EAASI,UAAYJ,EAASI,SAASF,MAAML,IAAYG,EAASK,eAAiBL,EAASK,cAAcH,MAAML,MAC9GS,MAAM,EAAE,IAKKC,MAErB,CAACnB,EAAc/C,IAId,sBAAK6C,UAAS,+BAA0BE,EAAcoB,OAAS,EAAI,SAAW,IAA9E,UACI9E,EAAU,cAAC,GAAD,IAAY,GACtBgE,EAAac,OAAS,EAAKd,EAAae,KAAK,SAAAT,GAAQ,OAEtD,sBAAKd,UAAU,sBAA4CwB,QAAS,WAAOpB,EAAYU,GAAWX,KAAlG,UACI,sBAAKH,UAAU,oBAAf,UACC,mBAAGA,UAAU,yBAAb,SAAuCc,EAASC,aAAeD,EAASC,cACxE,mBAAGf,UAAU,wBAAb,mBAAyCc,EAASG,WAAaH,EAASG,UAAxE,YAAqFH,EAASI,UAAYJ,EAASI,eAEpH,sBAAKlB,UAAU,qBAAf,UACC,8BAAIc,EAASW,MAAQX,EAASW,KAA9B,KAAsCX,EAASY,OAASZ,EAASY,SACjE,4BAAIZ,EAASK,eAAiBL,EAASK,qBAPFL,EAASa,WAa/C,mBAAGC,MAAO,CAAC,UAAa,UAAxB,4B,qCCvCTC,I,4BAAMC,KAASC,cAAc,CAC/BC,OAAQC,0CACRC,WAAYD,+BACZE,UAAWF,eACXG,cAAeH,2BACfI,kBAAmBJ,eACnBK,MAAOL,+CAGEM,GAAOV,GAAIU,OACXC,GAAKX,GAAIY,YACTC,GAAMb,GAAIc,WACVC,GAAYf,GAAIe,YCShBC,IDRYf,KAASW,UAAUK,UCQb,SAACC,GAAD,gDAAgB,WAAOC,EAAUC,GAAjB,gBAAAC,EAAA,yDAChCrG,EAAgBoG,IAAWrG,gBAA3BC,eAIJsG,OAAOC,KAAKvG,GAAcyE,OAAS,GALC,mBAMhCzE,EAAa8E,SAAWoB,EANQ,iDAUvCC,EAASK,GAAqBN,IAE9BC,EAAS,CACLzG,KAAM1E,IAEV2K,GAAGc,WAAW,aAAaC,IAAIR,GAAYS,MAC1CC,MAAM,SAAAF,GACH,GAAGA,EAAIG,OAAO,CACV,IAAIC,EAAeJ,EAAIK,OACnBD,EAAaE,gBACbF,EAAaE,cAAgB,CACzBC,SAAU,KACVnC,OAAQ,KAGhBqB,EAAS,CACLzG,KAAMzE,EACN4E,QAASiH,SAGbX,EAAS,CACLzG,KAAMxE,EACN2E,QAAQ,uBAAD,OAAyBqG,EAAzB,wBAIlBgB,OAAO,SAAAC,GACJhB,EAAS,CACLzG,KAAMxE,EACN2E,QAASsH,OAvCsB,2CAAhB,0DA+ClBX,GAAuB,SAACY,GAAD,gDAAoB,WAAOjB,GAAP,UAAAE,EAAA,6DACpDF,EAAS,CACLzG,KAAMvD,IAF0C,SAO9C0J,GAAIwB,IAAJ,oBAAqBD,IAAkBT,MAAMC,MAAK,SAAAU,GAChDA,EAAST,SACTV,EAAS,CACLzG,KAAMtD,EACNyD,QAASyH,EAASC,QAGtBpB,EAAS,CACLzG,KAAMrD,OAfkC,2CAApB,uDAyOpC,SAASmL,GAAe9B,GACpB,OAAO,IAAI+B,SAAQ,SAACC,EAASC,GAC1B,IAAMC,EAAclC,EAAKmC,oBAAmB,SAAAjG,GACzCgG,IACAF,EAAQ9F,KACR+F,MCjTH,IC2GQG,GA1GA,WACX,IAAM3B,EAAW4B,cADA,EAE6BrE,oBAAS,GAFtC,oBAEVsE,EAFU,KAEOC,EAFP,OAGyBvE,mBAAS,IAHlC,oBAGVL,EAHU,KAGK6E,EAHL,KAKXC,EAAUC,eACVC,EAAYC,iBAAO,MAGjB1I,EADU6D,aAAY,SAAAjE,GAAK,OAAIA,EAAMD,aACrCK,SAGRiE,qBAAU,WACHjE,IAECuG,EFyEmB,yCAAM,WAAOA,GAAP,UAAAE,EAAA,sDACjCF,EAAS,CACLzG,KAAMtE,IAEV,IAqCI+K,EAAS,CACLzG,KAAMrE,EACNwE,QAtCiB,CACjB,CACI,cAAkB,SAClB,KAAS,WACT,YAAgB,mBAChB,UAAc,WACd,SAAa,OACb,OAAW,sBACX,WAAe,QACf,MAAU,KACV,OAAW,mBAEf,CACI,cAAkB,SAClB,KAAS,cACT,YAAgB,sBAChB,UAAc,UACd,SAAa,QACb,OAAW,sBACX,WAAe,QACf,MAAU,KACV,OAAW,yBAEf,CACI,cAAkB,SAClB,KAAS,cACT,YAAgB,iBAChB,UAAc,IACd,SAAa,SACb,OAAW,sBACX,WAAe,QACf,MAAU,KACV,OAAW,4BAyBrB,MAAOsH,GACLhB,EAAS,CACLzG,KAAMpE,EACNuE,QAASsH,IAjEgB,2CAAN,uDExEnBhB,EDjB2B,yCAAM,WAAOA,GAAP,UAAAE,EAAA,sEAGrCF,EAAS,CACLzG,KAAMpD,IAJ2B,SAO/BuJ,GAAIwB,IAAI,uBAAuBkB,KAAK,SAAS,SAAAxB,GAC/CZ,EAAS,CACLzG,KAAMnD,EACNsD,QAASkH,EAAKQ,WAEnB,SAAAJ,GACChB,EAAS,CACLzG,KAAMlD,EACNqD,QAASsH,OAfoB,sDAmBrChB,EAAS,CACLzG,KAAMlD,EACNqD,QAAQ,EAAD,KArB0B,wDAAN,0DC4BjC,CAACD,IAGH,IAAMsB,EAAUuC,aAAY,SAAAjE,GAAK,OAAIA,EAAM0B,WACrCsH,EAAqB,WACnBR,EAIAC,GAAmB,IAHnBA,GAAmB,GACnBI,EAAUI,QAAQC,UA2B1B,OACI,gCACI,qBAAKvF,UAAU,cAAf,UACM6E,GACE,sCACE9G,GAAY,qBAAKiC,UAAU,cAAcwB,QAnBlC,WACrBgE,QAAQC,IAAI,gBACZzC,EAAS,CAACzG,KAAM,oBAiBU,SACV,iCACI,mBAAGyD,UAAU,oBAGrB,qBAAKA,UAAU,WAAWwB,QA9BhB,WAGtBwD,EAAQU,UA2BI,SACI,iCACI,mBAAG1F,UAAU,+BAM7B,sBAAKA,UAAU,SAAf,UACI,sBAAKA,UAAU,sBAAf,UACI,uBACI2F,GAAG,cACHzB,IAAKgB,EACL3I,KAAK,OACLyD,UAAS,gBAAW6E,GAAmB,UACvCe,YAAY,YACZC,MAAO3F,EACP4F,SAAU,SAACC,GAAD,OAAOhB,EAAiBgB,EAAEC,OAAOH,UAC9ChB,EAAkB,cAAC,GAAD,CAAqB3E,cAAeA,EAAeC,mBArC/D,WACnB4E,EAAiB,IACjBM,KAmCsHjF,YAhC1F,SAACU,GAC7BkE,EAAQiB,KAAR,wBAA8BnF,EAASa,YA+ByH,MAExJ,wBAAQ3B,UAAU,MAAMwB,QAAS6D,EAAjC,SACUR,EAGE,mBAAG7E,UAAU,+BAFb,mBAAGA,UAAU,2BC1E1BkG,GAzBA,WAAO,IAEVC,EAAaC,eAAbD,SAGR,OACI,qBAAKnG,UAAU,SAAf,SACI,+BACI,oBAAIA,UAAwB,MAAbmG,EAAmB,+BAAiC,aAAcH,OAAO,YAAxF,SACI,eAAC,KAAD,CAAMK,GAAG,IAAT,UAAa,mBAAGrG,UAAU,cAAcsG,cAAY,SAAW,0CAEnE,oBAAItG,UAAwB,gBAAbmG,EAA6B,+BAAiC,aAAcH,OAAO,gBAAlG,SACI,eAAC,KAAD,CAAMK,GAAG,cAAT,UAAuB,mBAAGrG,UAAU,aAAasG,cAAY,SAAW,0CAE5E,oBAAItG,UAAwB,iBAAbmG,EAA8B,+BAAiC,aAAcH,OAAO,eAAnG,SACI,eAAC,KAAD,CAAMK,GAAG,eAAT,UAAwB,mBAAGrG,UAAU,oBAAoB4B,MAAO,CAAC2E,UAAW,OAAQD,cAAY,SAAW,6CAE/G,oBAAItG,UAAwB,iBAAbmG,EAA8B,+BAAiC,aAAcH,OAAO,iBAAnG,SACI,eAAC,KAAD,CAAMK,GAAG,eAAT,UAAwB,mBAAGrG,UAAU,6BAA6BsG,cAAY,SAAW,iDC0G9FE,GA9HA,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,QAASjF,EAAmB,EAAnBA,QAASkF,EAAU,EAAVA,KAE/B,OAAQD,GACJ,IAAK,SACD,OACQ,yBAAQlK,KAAK,SAASyD,UAAU,SAAhC,UACI,mBAAGA,UAAU,uBADjB,oBAKZ,IAAK,mBACD,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,SAASwB,QAASA,EAAlD,UACI,mBAAGxB,UAAU,uBADjB,oBAKZ,IAAK,UACD,OACQ,yBAAQzD,KAAK,SAASiF,QAASA,EAASI,MAAO,CAAC+E,MAAO,SAAvD,UACI,mBAAG3G,UAAU,uBADjB,sBAKZ,IAAK,OACD,OACQ,yBAAQzD,KAAK,SAASiF,QAASA,EAA/B,UACG,mBAAGxB,UAAU,gBADhB,kBAKZ,IAAK,QACD,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,QAAhC,UACI,mBAAGA,UAAU,uBADjB,mBAKZ,IAAK,QACD,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,QAAQwB,QAASA,EAAjD,UACI,mBAAGxB,UAAU,kBADjB,mBAKZ,IAAK,SACD,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,QAAQwB,QAASA,EAAjD,UACI,mBAAGxB,UAAU,kBADjB,oBAKZ,IAAK,OACD,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,QAAQwB,QAASA,EAAjD,yBAEI,mBAAGxB,UAAU,0BAG7B,IAAK,OACD,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,QAAQwB,QAASA,EAASI,MAAO,CAAC+E,MAAO,SAAzE,UACKD,EADL,WAEI,mBAAG1G,UAAU,0BAG7B,IAAK,QACD,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,QAAQwB,QAASA,EAAjD,0BAEI,mBAAGxB,UAAU,oBAG7B,IAAK,SACD,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,QAAQwB,QAASA,EAAjD,UACI,mBAAGxB,UAAU,qBADjB,qBAKZ,IAAK,OACD,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,QAAQwB,QAASA,EAAjD,UACI,mBAAGxB,UAAU,sBADjB,sBAKZ,IAAK,MACD,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,SAASwB,QAASA,EAAlD,wBAEI,mBAAGxB,UAAU,oBAG7B,IAAK,KACD,OACQ,yBAAQzD,KAAK,SAASiF,QAASA,EAA/B,uBAEI,mBAAGxB,UAAU,oBAG7B,IAAK,KAOe,IAAK,KACrB,OACQ,yBAAQzD,KAAK,SAASyD,UAAU,QAAQwB,QAASA,EAAjD,uBAEI,mBAAGxB,UAAU,oBAI7B,QACI,OACI,mCACI,mBAAGA,UAAU,uBADjB,0BCnHV4G,GAAY,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,SAASC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,gBAAiBC,EAAa,EAAbA,QAAa,EAC/BC,KAA9BC,EAD6D,EAC7DA,QAAQC,EADqD,EACrDA,UAAUC,EAD2C,EAC3CA,IAAIC,EADuC,EACvCA,KAE7B,OACI,mCACA,sBAAKtH,UAAU,aAAf,UACI,sBAAKA,UAAU,QAAf,UACI,6BAAK8G,IACL,4BAAID,OAEPE,GACG,qBAAK/G,UAAU,gBAAf,SACK+G,EAAKxF,KAAI,SAAAgG,GAAG,OACT,cAAC,GAAD,CAAkBd,QAASc,EAAK/F,QAASyF,GAA5BM,QAIxBP,GACG,sBAAKhH,UAAU,iBAAf,UACI,6BAAKmH,IACL,8BAAIC,EAAJ,IAAgBC,EAAhB,KAAuBC,cAQrCJ,GAAiB,WACnB,IAAMM,EAAM,GAENC,EAAO,IAAIC,KAMjB,OALAF,EAAIF,KAAOG,EAAKE,cAChBH,EAAIJ,UAAYK,EAAKG,eAAe,UAAU,CAACC,MAAO,SACtDL,EAAIL,QAAUM,EAAKG,eAAe,UAAU,CAACE,QAAS,SACtDN,EAAIH,IAAMI,EAAKM,UAERP,GAUXZ,GAAUoB,aAAe,CACrBnB,SAAW,GACXC,MAAQ,aACRvK,KAAO,OACPwK,KAAM,GACNC,iBAAiB,GAGNJ,I,GAAAA,MCkCAqB,GAvFQ,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,UAAWC,EAA6D,EAA7DA,IAA6D,IAAxDC,oBAAwD,MAA3C,kBAAK,MAAsC,MAA/BC,qBAA+B,MAAhB,kBAAK,MAAW,EAOvFC,GANW1D,cAMI,WACjBwD,MAGJ,OAAQF,GACJ,IAAK,WACD,OACI,qBAAKlI,UAAU,kBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,mBAAGA,UAAU,sBAAb,SAAoCmI,IACpC,uBACA,sBAAKnI,UAAU,eAAf,UACI,cAAC,GAAD,CAAQyG,QAAQ,KAAKjF,QAhBvB,WAClB6G,OAgBoB,cAAC,GAAD,CAAQ5B,QAAQ,MAAMjF,QAAS8G,YAMnD,IAAK,QACD,OACI,qBAAKtI,UAAU,kBAAf,SACI,sBAAKA,UAAU,gBAAf,UAEI,oBAAGA,UAAU,sBAAb,UACA,mBAAGA,UAAU,sCACT,uBAAK,uBAFT,WAE4BmI,EAAII,MAAM,MAAOhH,KAAK,SAACiH,EAAKC,GACpD,OAAQ,iCAAeD,EAAK,yBAATC,SAGvB,qBAAKzI,UAAU,eAAf,SACI,cAAC,GAAD,CAAQyG,QAAQ,QAAQjF,QAAS8G,WAMrD,IAAK,UAaL,IAAK,QAaL,QACI,OACI,qBAAKtI,UAAU,kBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,mBAAGA,UAAU,sBAAb,SAAoCmI,IACpC,sBAAKnI,UAAU,eAAf,UACI,cAAC,GAAD,CAAQyG,QAAQ,OAChB,cAAC,GAAD,CAAQA,QAAQ,kB,oJC9E/BiC,GAA2B,SAACjB,GACrC,IAAMkB,EAAUlB,EAAKc,MAAM,KAC3B,MAAM,GAAN,OAAUI,EAAQ,GAAlB,YAAwBA,EAAQ,GAAhC,YAAsCA,EAAQ,KAGrCC,GAAqB,SAACnB,GAEhC,OADCA,EAAO,IAAIC,KAAKD,GACX,GAAN,OAAUA,EAAKoB,WAAa,EAA5B,YAAiCpB,EAAKM,UAAtC,YAAmDN,EAAKE,gBAG9CmB,GAAkB,SAACrB,GAI5B,MAHc,UAAOA,EAAKoB,WAAa,EAAzB,YAA8BpB,EAAKM,UAAnC,YAAgDN,EAAKE,eAG/C,IAFHF,EAAKsB,mBAAmB,QAAS,CAAEC,KAAM,UAAWC,QAAQ,EAAMC,OAAQ,aAKlFC,IAAa,IACtBC,MAAQ,CACJC,KAAOC,aAAW,IAAI5B,MACtBrB,GAAKkD,aAAS,IAAI7B,OAEtB8B,UAAY,CACRH,KAAMI,aAAiB,IAAI/B,MAC3BrB,GAAKqD,aAAe,IAAIhC,QAPN,gBASrB,YAAe,CACZ2B,KAAOM,aAAY,IAAIjC,KAAQ,CAACkC,aAAc,IAC9CvD,GAAIwD,aAAU,IAAInC,KAAQ,CAACkC,aAAc,MAXvB,gBAarB,YAAe,CACZP,KAAOS,aAASH,aAAY,IAAIjC,KAAQ,CAACkC,aAAc,IAAI,GAC3DvD,GAAIyD,aAASD,aAAU,IAAInC,KAAQ,CAACkC,aAAc,IAAI,KAfpC,gBAiBrB,aAAgB,CACbP,KAAOU,aAAa,IAAIrC,MACxBrB,GAAI2D,aAAW,IAAItC,QAnBD,gBAqBrB,aAAgB,CACb2B,KAAOY,aAAUF,aAAa,IAAIrC,MAAS,GAC3CrB,GAAI4D,aAAUD,aAAW,IAAItC,MAAS,KAvBpB,gBAyBrB,YAAe,CACZ2B,KAAOa,aAAY,IAAIxC,MACvBrB,GAAI8D,aAAU,IAAIzC,QA3BA,gBA6BrB,YAAe,CACZ2B,KAAOa,aAAY,IAAIxC,MAAK,IAAIA,MAAO0C,aAAY,IAAI1C,MAAOC,cAAgB,KAC9EtB,GAAI8D,aAAU,IAAIzC,MAAK,IAAIA,MAAO0C,aAAY,IAAI1C,MAAOC,cAAgB,OA/BvD,I,2BCvBL0C,G,WACjB,WAAaC,GAA+B,IAAxBC,IAAuB,8EACvCC,KAAKF,MAAQA,EACbE,KAAKC,KAAOC,MAAMrB,KAAKiB,EAAMK,iBAAiB,QAEzCJ,GAAkBC,KAAKC,KAAK,GAAGE,iBAAiB,MAAMrJ,QACvDkJ,KAAKC,KAAKG,Q,4DAKd,IADY,EACNC,EAAQ,GACRC,EAAUN,KAAKO,wBAFT,eAIMP,KAAKC,MAJX,IAIZ,2BAA6B,CAGzB,IAH0B,IAAnBO,EAAkB,QACrBxC,EAAO,GAEFC,EAAI,EAAGA,EAAIqC,EAASrC,SACDwC,IAApBD,EAAIE,SAASzC,KACbD,GAAQ6B,EAAiBc,UAAUH,EAAIE,SAASzC,KAGpDD,GAASC,IAAOqC,EAAU,EAAM,IAAM,GAG1CD,EAAM5E,KAAKuC,IAfH,8BAkBZ,OAAOqC,EAAMO,KAAK,Q,8CAKlB,OAAOZ,KAAKC,KAAKY,QAAO,SAACC,EAAGN,GAAJ,OAAYA,EAAIO,kBAAoBD,EAAIN,EAAIO,kBAAoBD,IAAG,M,iCAG7EE,GACd,IAAIC,EAAcD,EAAUE,YAS5B,OALAD,EAAcA,EAAYE,QAAQ,KAApB,MAGdF,EAAc,SAASG,KAAKH,GAAd,WAAiCA,EAAjC,KAAkDA,M,eC4ZlEI,GAAkB,SAACpE,GACrB,IAAMqE,EAAWC,aAAiB,IAAIrE,KAAQ,IAAIA,KAAKD,IACvD,OAAGqE,EAAW,EAAU,EACjBA,GAGIE,GA9bU,SAAC,GAAwE,IAAD,YAAtEpI,EAAsE,EAAtEA,KAAMrH,EAAgE,EAAhEA,KAAe0P,GAAiD,EAA1DzK,QAA0D,EAAjDyK,aAAaC,EAAoC,EAApCA,cACnDlH,GADuF,EAArBmH,gBACxDlH,gBAGVtB,EAAerD,aAAY,SAAAjE,GAAK,OAAIA,EAAMO,mBAC/BC,GAAiB8G,EAA1BnH,QAA0BmH,EAAjB9G,cAIbuP,EAAU,GAGRC,EAAuBlH,iBAAO,MAC9BmH,EAA0BnH,iBAAO,MACjCoH,EAAwBpH,iBAAO,MAC/BqH,EAAoBrH,iBAAO,MAC3BsH,EAAqBtH,iBAAO,MAC5BuH,EAAqBvH,iBAAO,MAI5BwH,EAAuB,SAACC,GAE1B,IACMC,EADW,IAAIxC,GAAiBuC,EAAUtH,SACrBwH,eACrBC,EAAU,IAAIC,KAAK,CAACH,GAAY,CAAEtQ,KAAM,aACxC0Q,EAAUC,IAAIC,gBAAgBJ,GAC9BK,EAAgBC,SAASC,cAAc,KAE7CF,EAAcG,KAAON,EACrBG,EAAcI,SAAW,mBACzBJ,EAAcK,QAEdC,YAAW,WACPR,IAAIS,gBAAgBV,KACrB,MAGP,OAAQ1Q,GACJ,IAAK,yBACD6P,EAAS,CAAC,IAAI,OAAO,QAAQ,UAAU,OAEvC5G,QAAQC,IAAI7B,GAIZ,OACI,mCACC/G,EAAa8E,UAAb,UAAwBiC,EAAK,UAA7B,iBAAwB,EAASgK,mBAAjC,aAAwB,EAAsBjM,QACvC,mBAAG3B,UAAU,mBAAb,qCAER,sBAAKA,UAAU,oBAAf,UAEI,sBAAKA,UAAU,oBAAf,UACI,oBAAGA,UAAU,gBAAb,qBAA+B4D,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAMtC,OAArC,iBAA4DzE,GAAgBA,EAAakE,eACzF,uBACA,yBAAQS,QAAU,kBAAMmL,EAAqBN,IAA7C,qBAA4E,mBAAGrM,UAAU,oBAAzF,UAGJ,wBAAOkE,IAAKmI,EAAZ,UACI,gCACI,6BACKD,EAAQ7K,KAAI,SAACsM,EAAOpF,GAAR,OACT,6BAAaoF,GAAJpF,UAIrB,iCACS,OAAJ7E,QAAI,IAAJA,OAAA,EAAAA,EAAMtC,QAAS,GAChBsC,EAAKkK,MAAK,SAAC5K,EAAE6K,GAAH,OAAU,IAAIrG,KAAKqG,EAAEC,SAAW,IAAItG,KAAKxE,EAAE8K,YACpDzM,KAAI,SAAC0M,EAAYxF,GACd,IAAMyF,EAAiBC,OAAOC,SAASH,EAAYI,kBAAoB,GACpExC,GAAgBoC,EAAYK,SAAW,EAG1C,OACA,qBAAYtO,UAAWkO,EAAiB,UAAY,GAAI1M,QAAS,kBAjCtD+M,EAiCmFN,EAAYO,eAhC1HxJ,EAAQiB,KAAR,uBAA6BsI,IADF,IAAAA,GAiCX,UACI,6BAAKN,EAAYO,YACjB,6BAAK9F,GAAyBuF,EAAYD,WAC1C,6BAAKS,KAAWC,YAAYT,EAAYU,YACxC,6BAAKF,KAAWC,YAAYT,EAAYI,oBACxC,oBAAIrO,UAAWkO,EAAiB,MAAQ,GAAxC,SAA8CC,OAAOC,SAASH,EAAYI,kBAAoB,EACxFxC,GAAgBoC,EAAYK,SAC5B,MAPD7F,gBAgBjC,IAAK,4BACG2D,EAAS,CAAC,IAAI,OAAO,QAAQ,SAAS,QAItC,OACI,mCACCvP,EAAa8E,UAAb,UAAwBiC,EAAK,UAA7B,iBAAwB,EAASgK,mBAAjC,aAAwB,EAAsBjM,QAC3C,mBAAG3B,UAAU,mBAAb,yCAEA,sBAAKA,UAAU,oBAAf,UAEA,sBAAKA,UAAU,oBAAf,UACI,oBAAGA,UAAU,gBAAb,8BAAgDnD,GAAgBA,EAAakE,eAC7E,uBACA,yBAAQS,QAAU,kBAAMmL,EAAqBL,IAA7C,qBAA+E,mBAAGtM,UAAU,oBAA5F,UAIJ,wBAAOkE,IAAKoI,EAAZ,UACI,gCACI,6BACKF,EAAQ7K,KAAI,SAACsM,EAAOpF,GAAR,OACT,6BAAaoF,GAAJpF,UAIrB,iCACS,OAAJ7E,QAAI,IAAJA,OAAA,EAAAA,EAAMtC,QAAS,GAChBsC,EAAKkK,MAAK,SAAC5K,EAAE6K,GAAH,OAAU,IAAIrG,KAAKqG,EAAEC,SAAW,IAAItG,KAAKxE,EAAE8K,YACpDzM,KAAI,SAAC0M,EAAYxF,GAAO,IAAD,EACpB,OACA,qBAAYzI,UAA2C,SAAhCiO,EAAYW,gBAA6B,GAAK,UAAWpN,QAAS,kBA9B9EqN,EA8B2GZ,EAAYO,eA7BlJxJ,EAAQiB,KAAR,0BAAgC4I,IADL,IAAAA,GA8BX,UACKrJ,QAAQC,IAAIwI,EAAYW,iBACzB,6BAAKX,EAAYO,YACjB,6BAAK9F,GAAyBuF,EAAYD,WAC1C,uCAAKC,EAAYa,gBAAjB,aAAK,EAAsBhL,WAC3B,6BAAK2K,KAAWC,YAAYT,EAAYU,YACxC,6BAAqC,SAAhCV,EAAYW,gBAA6B,SAAW,cANpDnG,gBAerC,IAAK,kBACL2D,EAAS,CAAC,OAAO,OAAQ,QAAQ,UAAU,MAAO,QAKlD,OACI,qBAAKpM,UAAU,oBAAf,SACK4D,EAAKtC,OAAS,EACX,qCAEA,sBAAKtB,UAAU,oBAAf,UACI,oBAAGA,UAAU,gBAAb,qBAAsC4D,EAAKtC,OAA3C,mBACA,yBAAQE,QAAU,kBAAMmL,EAAqBH,IAA7C,qBAAyE,mBAAGxM,UAAU,oBAAtF,UAGJ,wBAAOkE,IAAKsI,EAAZ,UACI,gCACI,6BACKJ,EAAQ7K,KAAI,SAACsM,EAAOpF,GAAR,OACT,6BAAaoF,GAAJpF,UAIrB,gCACK7E,EAAKtC,OAAS,GACfsC,EAKCrC,KAAI,SAACT,EAAS2H,GACX,OACA,qBAAIzI,UAAU,OAAewB,QAAS,kBA9B9ByC,EA8B4DnD,EAASa,YA7BjGqD,EAAQiB,KAAR,wBAA8BhC,IADF,IAAAA,GA8BR,UACI,6BAAKnD,EAASC,cACd,6BAAKD,EAASW,OACd,6BAAKX,EAASY,QACd,+BAAKZ,EAASG,UAAd,IAA0BH,EAASI,YACnC,6BAAKJ,EAASiO,aACd,6BAAKjO,EAASK,kBANQsH,cAatC,mBAAG7G,MAAO,CAAC,UAAa,UAAxB,0BAIZ,IAAK,0BACDwK,EAAU,CAAC,OAAO,aAAa,SAAU,UAMzC,OACI,mCACCvP,EAAa8E,UAAb,UAAwBiC,EAAK,UAA7B,iBAAwB,EAASgK,mBAAjC,aAAwB,EAAsBjM,QACvC,mBAAG3B,UAAU,mBAAb,uCAER,sBAAKA,UAAU,oBAAf,UAEI,sBAAKA,UAAU,eAAf,UACQ,oBAAGA,UAAU,gBAAb,4BAA8CnD,GAAgBA,EAAakE,eAC3E,uBACA,yBAAQS,QAAU,kBAAMmL,EAAqBJ,IAA7C,qBAA6E,mBAAGvM,UAAU,oBAA1F,UAER,wBAAOkE,IAAKqI,EAAZ,UACI,gCACI,6BACKH,EAAQ7K,KAAI,SAACsM,EAAOpF,GAAR,OACT,6BAAaoF,GAAJpF,UAIrB,gCACK7E,GAAQA,EAAKtC,OAAS,EACvBsC,EAAKkK,MAAK,SAAC5K,EAAE6K,GAAH,OAAU,IAAIrG,KAAKqG,EAAEiB,WAAa,IAAItH,KAAKxE,EAAE8L,cACtDzN,KAAI,SAAC0M,EAAYxF,GAEd,OACA,qBAAYjH,QAAS,kBA9BRyN,EA8BsChB,EAAYtI,QA7B/EX,EAAQiB,KAAR,qBAA2BgJ,IADC,IAACA,GA8Bb,UACI,6BAAKrG,GAAmBqF,EAAYe,UAAUE,YAC9C,6BAAKjB,EAAYtI,KACjB,6BAAK8I,KAAWC,YAAYT,EAAYkB,YAAYC,UACpD,6BAAKnB,EAAYoB,UAAUC,YAAcrB,EAAYoB,UAAUC,YAAc,gBAJxE7G,MAOL,uCAM5B,IAAK,sBACD2D,EAAU,CAAC,OAAO,OAAO,QAAS,oBAAqB,WAAY,aAAc,IAMjF,OACI,sBAAKpM,UAAU,gCAAf,UACA,uBACI,2CACA,kCACI,gCACI,6BACKoM,EAAQ7K,KAAI,SAACsM,EAAOpF,GAAR,OACT,6BAAaoF,GAAJpF,UAIrB,gCACK7E,GAAQA,EAAKtC,OAAS,EACvBsC,EAAKkK,MAAK,SAAC5K,EAAE6K,GAAH,OAAU,IAAIrG,KAAKqG,EAAEiB,WAAa,IAAItH,KAAKxE,EAAE8L,cACtDzN,KAAI,SAAC9C,EAAKgK,GAAO,IAAD,MAEb,OACA,qBAAYjH,QAAS,WAAsB/C,EAAKkH,IAAhD,UACI,6BAAKlH,EAAK8Q,OACV,6BAAK9Q,EAAK+Q,UAAY,IAAM/Q,EAAKgR,WACjC,6BAAKhR,EAAKiR,QACV,uCAAKjR,EAAKkR,oBAAV,aAAK,EAAmBC,OAAOrO,KAAI,SAAAlF,GAAK,OAAI,iCAAmBA,EAAnB,MAAWA,QACvD,8BAAK,UAAAoC,EAAK+Q,iBAAL,eAAgBK,UAAU,EAAE,KAA5B,UAAiCpR,EAAKgR,gBAAtC,aAAiC,EAAeI,UAAU,EAAE,MACjE,6BAAKpR,EAAKqR,YACV,qBAAI9P,UAAU,UAAd,UACI,cAAC,GAAD,CAAQyG,QAAQ,OAAOjF,QAAS,SAAAuE,GAAC,cAAImG,QAAJ,IAAIA,OAAJ,EAAIA,EAAgBzN,MADzD,iBAPKgK,MAaL,kCAGhB,uBACA,cAAC,GAAD,CAAQhC,QAAQ,UAAUjF,QAASyK,OAI/C,IAAK,iBACLG,EAAS,CAAC,IAAI,OAAO,QAAQ,OAAO,QAAS,OAI7C,OACI,mCACA,sBAAKpM,UAAU,oBAAf,UAEI,sBAAKA,UAAU,oBAAf,UACI,oBAAGA,UAAU,gBAAb,eAAmC,OAAJ4D,QAAI,IAAJA,OAAA,EAAAA,EAAMtC,QAAS,EAAf,OAAmBsC,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAMtC,OAAS,GAAjE,eACA,uBACA,yBAAQE,QAAU,kBAAMmL,EAAqBN,IAA7C,qBAA4E,mBAAGrM,UAAU,oBAAzF,UAIJ,wBAAOkE,IAAKmI,EAAZ,UACI,gCACI,6BACKD,EAAQ7K,KAAI,SAACsM,EAAOpF,GAAR,OACT,6BAAaoF,GAAJpF,UAIrB,iCACS,OAAJ7E,QAAI,IAAJA,OAAA,EAAAA,EAAMtC,QAAS,GAChBsC,EAAKkK,MAAK,SAAC5K,EAAE6K,GAAH,OAAUA,EAAES,UAAYtL,EAAEsL,aACnCjN,KAAI,SAAC0M,EAAYxF,GAAO,IAAD,IACdyF,EAAiBC,OAAOC,SAASH,EAAYI,kBAAoB,GAAMxC,GAAgBoC,EAAYK,SAAW,EAEpH,OACA,qBAAYtO,UAAWkO,EAAiB,UAAY,GAAI1M,QAAS,kBA7B9C+M,EA6BmFN,EAAYO,eA5BlIxJ,EAAQiB,KAAR,uBAA6BsI,IADM,IAAAA,GA6BnB,UACI,6BAAKN,EAAYO,YACjB,uCAAKP,EAAYL,mBAAjB,aAAK,EAAyB9J,WAC9B,uCAAKmK,EAAYa,gBAAjB,aAAK,EAAsBhL,WAC3B,6BAAK4E,GAAyBuF,EAAYD,WAC1C,6BAAKS,KAAWC,YAAYT,EAAYU,YACxC,oBAAI3O,UAAWkO,EAAiB,MAAQ,GAAxC,SAA8CC,OAAOC,SAASH,EAAYI,kBAAoB,EAAIxC,GAAgBoC,EAAYK,SAAU,MANnI7F,gBAe7B,IAAK,yBAGG,OAFA2D,EAAS,CAAC,OAAO,cAAc,sBAG3B,mCACExI,EACE,sBAAK5D,UAAU,oBAAf,UACA,sBAAKA,UAAU,oBAAf,UACI,mBAAGA,UAAU,gBAAb,+BACA,uBACA,yBAAQwB,QAAU,kBAAMmL,EAAqBF,IAA7C,qBAA0E,mBAAGzM,UAAU,oBAAvF,UAGJ,wBAAOkE,IAAKuI,EAAZ,UACA,gCACI,6BACCL,EAAQ7K,KAAI,SAACsM,EAAOpF,GAAR,OACL,6BAAaoF,GAAJpF,UAKpB7E,EAAKtC,OAAS,EAAK,6BAChB,gCACCsC,EACAkK,MAAK,SAAC5K,EAAE6K,GAAH,OAAS7K,EAAE6M,KAAKC,cAAcjC,EAAEgC,SACrCxO,KAAI,SAAC0O,EAASC,EAAOC,GAMlB,OAHGD,EAAQ,GAAKC,EAAID,EAAQ,GAAGpM,SAAS+L,UAAU,EAAE,KAAOI,EAAQnM,SAAS+L,UAAU,EAAE,KACnE,EAGjB,qBACA7P,UACKiQ,EAAQG,eAAiB,IAAMH,EAAQG,eAAiB,EAAI,UAAY,UAAY,GAFzF,UAII,6BAAKH,EAAQI,YACb,6BAAKJ,EAAQG,iBACb,6BAAKH,EAAQK,yBANRL,EAAQtO,mBA5BxB,0CA8CrB,IAAK,oBAGG,OAFAyK,EAAS,CAAC,OAAO,cAAc,QAAS,OAGpC,mCACExI,EACE,sBAAK5D,UAAU,oBAAf,UACA,sBAAKA,UAAU,oBAAf,UACI,mBAAGA,UAAU,gBAAb,+BACA,uBACA,yBAAQwB,QAAU,kBAAMmL,EAAqBD,IAA7C,qBAA0E,mBAAG1M,UAAU,oBAAvF,UAGJ,wBAAOkE,IAAKwI,EAAoB/G,GAAG,8BAAnC,UACA,gCACI,6BACCyG,EAAQ7K,KAAI,SAACsM,EAAOpF,GAAR,OACL,6BAAaoF,GAAJpF,UAIpB7E,EAAKtC,OAAS,EAAK,6BAChB,gCACI,qCACHsC,EACAkK,MAAM,SAAC5K,EAAG6K,GAAJ,OAAU7K,EAAEqN,YAAYP,cAAcjC,EAAEwC,gBAC9ChP,KAAK,SAAC0O,EAASC,EAAOC,GAOnB,OAJGD,EAAQ,GAAKC,EAAID,EAAQ,GAAGK,YAAYV,UAAU,EAAE,KAAOI,EAAQM,YAAYV,UAAU,EAAE,KACzE,EAIjB,qBAA6CW,OAAQP,EAAQM,YAA7D,UACI,oBAAIvQ,UAAU,SAAd,SAAwBiQ,EAAQM,cAChC,6BAAKN,EAAQQ,OACb,6BAAKhC,KAAWC,YAAYuB,EAAQS,SACpC,6BAAKT,EAAQU,QAJjB,oBAAsBV,EAAQM,iBAQtC,+BACI,uBACA,uBACA,oBAAI3O,MAAO,CAACgP,WAAY,QAAxB,SAAkCnC,KAAWC,YAAY9K,EAAKyH,QAAQ,SAACwF,EAAKvL,GAAN,OAAmBA,EAAQoL,MAAQpL,EAAQqL,IAAOE,IAAK,MAC7H,oBAAIjP,MAAO,CAACgP,WAAY,QAAxB,SAAkChN,EAAKyH,QAAQ,SAACwF,EAAKvL,GAAN,OAAkBA,EAAQqL,IAAME,IAAK,mBAzCvF,4C,SClQvBC,I,OAAqB,SAACZ,GASxB,MARe,CACX,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEUA,KAKHa,GApJG,SAAC,GAAuB,IAAtBxU,EAAqB,EAArBA,KAAMyU,EAAe,EAAfA,UAMtB,OAFAxL,QAAQC,IAAIuL,GAEJzU,GACJ,IAAK,2BACD,IAAMqH,EAAO,CACTqN,OAAS9N,OAAOC,KAAK4N,GAAWnQ,QAAQ,SAACyG,EAAM4I,GAAP,OAAiBA,GAAS/M,OAAOC,KAAK4N,GAAW1P,OAAS,KAAGC,KAAI,SAAA+F,GAAI,OAAIA,KACjH4J,SAAW,CACP,CAEItN,KAAMT,OAAOC,KAAK4N,GAAWnQ,QAAQ,SAACyG,EAAM4I,GAAP,OAAiBA,GAAS/M,OAAOC,KAAK4N,GAAW1P,OAAS,KAAGC,KAAI,SAAA+F,GAAI,OAAI0J,EAAU1J,GAAM6J,cAC9HC,gBAAkBjO,OAAOC,KAAK4N,GAAWzP,KAAK,SAAC+F,EAAM4I,GAAP,OAAiBY,GAAmBZ,SAKxFmB,EAAU,CAEZC,OAAQ,CACJC,SAAS,GAEbC,qBAAqB,EACrBC,YAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,EACbC,SAAU,SAASjM,EAAOqK,EAAO6B,GAC7B,OAAG3D,SAASvI,IAAU,IACb,IAAMA,EAAMmM,WAAWrG,QAAQ,wBAAyB,KAExD,IAAM9F,OAO3BoM,QAAS,CACLC,WAAY,CACRC,OAAQ,MACRC,MAAO,QACPC,OAAQ,MACRC,MAAO,QACPC,YAAa,EACbC,KAAM,CACFC,OAAQ,KAEZlB,QAAS,SAAAmB,GACL,OAAO,GAEXC,UAAW,SAACD,EAAK9O,GACb,IAAMsM,EAAQtM,EAAKgP,UACbxD,EAASxL,EAAKiP,QAAQjP,KAAKsM,GACjC,OAAOzB,KAAWC,YAAYU,OAM5C,OACI,sBAAKpP,UAAU,sBAAf,UACI,qBAAKA,UAAU,eAAf,SACM,mBAAGA,UAAU,gBAAb,6BAEN,cAAC,OAAD,CAAK4D,KAAMA,EAAMyN,QAASA,OAGxC,IAAK,wBACL,IAAMyB,EAAQ,CACV7B,OAAS,CAAC,aACVC,SAAW,CACP,CACItN,KAAM,CAAC,IACPwN,gBAAkBN,GAAmB,MAI3CiC,EAAW,CAEbzB,OAAQ,CACJC,SAAS,GAEbC,qBAAqB,EACrBC,YAAY,EACZC,OAAQ,CACJC,MAAO,CACP,CACIC,MAAO,CACPC,aAAa,MAKrBI,QAAS,CACLC,WAAY,CACRC,OAAQ,MACRC,MAAO,MACPE,MAAO,QACPC,YAAa,EACbC,KAAM,CACFC,OAAQ,KAEZlB,QAAS,SAAAmB,GACL,OAAO,GAEXC,UAAW,SAACD,EAAK9O,GACb,IAAMsM,EAAQtM,EAAKgP,UACbxD,EAASxL,EAAKiP,QAAQjP,KAAKsM,GACjC,OAAOzB,KAAWC,YAAYU,OAM1C,OACI,sBAAKpP,UAAU,sBAAf,UACI,qBAAKA,UAAU,eAAf,SACI,mBAAGA,UAAU,gBAAb,6BAEJ,cAAC,OAAD,CAAK4D,KAAMkP,EAAOzB,QAAS0B,SC5DhCC,GA7DE,SAAC,GAAe,IAAD,MAAbhO,EAAa,EAAbA,QAAa,EAEKzE,oBAAS,GAFd,oBAErB0S,EAFqB,KAEXC,EAFW,KAKpBzW,EADU6D,aAAY,SAAAjE,GAAK,OAAIA,EAAMD,aACrCK,SAEFuB,EAAuBsC,aAAY,SAAAjE,GAAK,OAAIA,EAAM2B,wBAChDC,EAAUD,EAAVC,MAEFe,EAAc,OAAGf,QAAH,IAAGA,GAAH,UAAGA,EAAOc,gBAAV,aAAG,EAAiBC,eAClCmU,EAAa,OAAGlV,QAAH,IAAGA,GAAH,UAAGA,EAAOkB,kBAAV,iBAAG,EAAmBC,gBAAtB,aAAG,EAA6BC,SAXvB,EAakBkB,mBAAS,IAb3B,oBAarB6S,EAbqB,KAaJC,EAbI,KAgCzB5W,GAGCuI,EAAQiB,KAAK,UAWjB,OALAvF,qBAAU,YA1Ba,WACnB,GAAG1B,GAAkBmU,EAAc,CAC/B,IAAMG,EAAoBnQ,OAAOC,KAAK+P,GAAe5R,KAAI,SAAAgS,GAAC,OAAIA,KAC9DF,EACIlQ,OAAOC,KAAKpE,GACX6B,QAAO,SAAA0S,GAAC,OAAKD,EAAiBE,SAASD,MACvChS,KAAI,SAAAgS,GAAC,OAAIvU,EAAeuU,QAqBjCE,KACD,CAACzV,IAIA,sBAAKgC,UAAU,gCAAf,UACEiT,GAAa,cAAC,GAAD,CAAgB/K,UAAU,WAAWC,IAAI,4CAA4CC,aArBrF,SAAArC,GACfP,QAAQC,IAAI,gBACZyN,GAAa,MAqBb,cAAC,GAAD,CAAWpM,MAAM,YAAYD,SAAS,WAAWE,KAAM,GAAIC,iBAAiB,IAC5E,uBAAK,uBAAK,uBAEV,uBAAK,uBAAK,uBAEV,cAAC,GAAD,CAAkBpD,KAAMwP,EAAiB7W,KAAK,+BCyBvCmX,GA9EG,SAAC,GAA0B,IAAxB1O,EAAuB,EAAvBA,QAAuB,KAAd2O,SAGApT,mBAAS,kBAHK,oBAGjCmP,EAHiC,aAIRnP,mBAAS,YAJD,oBAIjCqT,EAJiC,aAOPrT,oBAAS,IAPF,oBAOjCsT,EAPiC,KAOvBC,EAPuB,KAUlC9Q,EAAW4B,cAGXxI,EAAYkE,aAAY,SAAAjE,GAAK,OAAIA,EAAMD,aAC7BO,GAAoBP,EAA7BI,QAA6BJ,EAApBO,OAAOF,EAAaL,EAAbK,SAGvBiE,qBAAU,WACH/D,GACCmX,GAAa,KAElB,CAACnX,IAKJ+D,qBAAU,WAEN6B,GAAKmC,oBAAoB,SAAAd,GAAI,OAAIZ,ECzBL,yCAAM,WAAOA,GAAP,UAAAE,EAAA,sDAE/BX,GAAKwR,aAEJxR,GAAKwR,YAAYC,mBAChBvQ,MAAM,SAAAwQ,GAEHjR,EAAS,CACLzG,KAAM/E,EACNkF,QAAQ,2BAAK6F,GAAKwR,aAAgB,CAAEG,OAAQD,EAAcC,WAG9DvV,aAAawV,QAAQ,WAAYtV,KAAKuV,UAAU7R,GAAKwR,iBAExDhQ,OAAM,SAAAC,GACHhB,EAAS,CACLzG,KAAO9E,EACPiF,QAAUsH,OAjBY,2CAAN,0DD2BzBvH,IACC+I,QAAQC,IAAI,mBACZT,EAAQiB,KAAK,QAEnB,CAACjB,EAAQvI,EAASuG,IAepB,OACI,sBAAKhD,UAAU,0BAAf,UACC6T,GAAa,cAAC,GAAD,CAAgB3L,UAAU,QAAQC,IAAI,uCAAuCC,aAAc,kBAAM0L,GAAa,MAE5H,cAAC,GAAD,CAAWhN,MAAM,QAAQD,SAAS,oBAAoBE,KAAM,GAAIC,iBAAiB,IAEjF,mBAAGhH,UAAU,gCAEb,qBAAKA,UAAU,iBAAf,SACI,uBAAMqU,SAnBQ,SAACtO,GACnBA,EAAEuO,iBACFtR,ECda,SAAC0M,EAAOkE,GAAR,gDAAqB,WAAO5Q,GAAP,UAAAE,EAAA,sDACtCF,EAAS,CACLzG,KAAMhF,IAGVgL,GAAKgS,2BAA2B7E,EAAOkE,GACtCnQ,MAAK,SAACG,GAEHrB,GAAKwR,YAAYC,mBAChBvQ,MAAM,SAAAwQ,GAEHjR,EAAS,CACLzG,KAAO/E,EACPkF,QAAO,2BAAOkH,GAAS,CAAEsQ,OAAQD,EAAcC,WAGnDvV,aAAawV,QAAQ,WAAYtV,KAAKuV,UAAUxQ,OAEnDG,OAAM,SAAAC,GACHhB,EAAS,CACLzG,KAAO9E,EACPiF,QAAUsH,UAMrBD,OAAM,SAACpH,GACJqG,EAAS,CACLzG,KAAO9E,EACPiF,QAAUC,OA9BoB,2CAArB,sDDcJ6X,CAAM9E,EAAMkE,KAiBjB,UACI,sBAAK5T,UAAU,gBAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,uBAAOyU,QAAQ,QAAf,2BACA,uBAAOlY,KAAK,QAAQkU,KAAK,QAAQ5K,MAAO6J,OAE5C,sBAAK1P,UAAU,uBAAf,UACI,uBAAOyU,QAAQ,QAAf,sBACA,uBAAOlY,KAAK,WAAWkU,KAAK,WAAW5K,MAAO+N,UAGtD,cAAC,GAAD,CAAQnN,QAAQ,mBEWjBiO,GAxFK,SAAC,GAAoF,IAAnF5N,EAAkF,EAAlFA,MAAMlB,EAA4E,EAA5EA,YAAY+O,EAAgE,EAAhEA,OAAOpY,EAAyD,EAAzDA,KAAM8U,EAAmD,EAAnDA,QAASxL,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAU8O,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,UAAe,EAE9DtU,mBAAS,GAFqD,oBAE/FuU,EAF+F,KAEjFC,EAFiF,KAYtG,OAAQxY,GACN,IAAK,OACH,OAAQ,sBAAKyD,UAAU,uBAAf,UACI,gCAAK,uBAAOyU,QAASE,EAAQC,SAAUA,GAAYA,EAA9C,SAA0D9N,IAA/D,OACA,sBAAK9G,UAAU,YAAf,UACE,uBAAOzD,KAAK,OAAOkU,KAAMkE,EAAQ/O,YAAaA,EAAaC,MAAOA,EAAOC,SAAUA,EAAU8O,SAAUA,GAAYA,EAAUC,UAAWA,GAAaA,KAC/I,OAALhP,QAAK,IAALA,OAAA,EAAAA,EAAOvE,QAAS,GAAK,wBAAQE,QAASsE,EAAUvJ,KAAK,SAASyD,UAAU,cAAcgV,SAAS,OAChG,wBACM,OAALnP,QAAK,IAALA,OAAA,EAAAA,EAAOvE,QAAS,GAAK,oBAAGtB,UAAU,aAAb,UAA2B6F,EAAMvE,OAAjC,IAA0CuT,WAKhF,IAAK,QACH,OAAQ,sBAAK7U,UAAU,uBAAf,UACI,gCAAK,uBAAOyU,QAASE,EAAQC,SAAUA,GAAYA,EAA9C,SAA0D9N,IAA/D,OACA,sBAAK9G,UAAU,YAAf,UACE,uBAAOzD,KAAK,QAAQkU,KAAMkE,EAAQ/O,YAAaA,EAAaC,MAAOA,EAAOC,SAAUA,EAAU8O,SAAUA,GAAYA,EAAUC,UAAWA,GAAaA,IACrJhP,EAAMvE,OAAS,GAAK,wBAAQE,QAASsE,EAAUvJ,KAAK,SAASyD,UAAU,cAAcgV,SAAS,OAC/F,uBACCnP,EAAMvE,OAAS,GAAK,oBAAGtB,UAAU,aAAb,UAA2B6F,EAAMvE,OAAjC,IAA0CuT,WAI/E,IAAK,SACH,OAAQ,sBAAK7U,UAAU,uBAAf,UACI,gCAAK,uBAAOyU,QAASE,EAAQC,SAAUA,GAAYA,EAA9C,SAAyD9N,IAA9D,OACA,qBAAK9G,UAAU,YAAf,SACE,uBAAOzD,KAAK,SAAS0Y,IAAI,IAAIC,IAAI,MAAMzE,KAAMkE,EAAQ/O,YAAaA,EAAaC,MAAOA,EAAOC,SAAUA,EAAU8O,SAAUA,GAAYA,SAIvJ,IAAK,gBACH,OAAQ,sBAAK5U,UAAU,gCAAf,UACE,8BAAK,wBAAOyU,QAASE,EAAQC,SAAUA,GAAYA,EAA9C,UAAyD9N,EAAzD,IAAgE,mBAAGlF,MAAO,CAAC0Q,MAAO,WAAWtS,UAAU,6BAC5G,sBAAKA,UAAU,YAAf,UACE,uBAAOmV,UAAQ,EAAC5Y,KAAK,OAAOkU,KAAMkE,EAAQ/O,YAAaA,EAAaC,MAAOA,EAAOC,SAAUA,EAAU8O,SAAUA,GAAYA,IAC5H,wBAAQpT,QAASsE,EAAUvJ,KAAK,SAASyD,UAAU,cAAcgV,SAAS,aAGxF,IAAK,SACH,OAAQ,sBAAKhV,UAAU,wCAAf,UACI,wBAAOyU,QAASE,EAAhB,UAAyB7N,EAAzB,IAAiC8N,EAAW,sBAAMhT,MAAO,CAAC0Q,MAAO,OAArB,eAAwC,MACpF,wBAAQ7B,KAAMkE,EAAQ/O,YAAaA,EAAaC,MAAOA,EAAOC,SAAUA,EAAxE,SACGuL,GAAWA,EAAQ9P,KAAK,SAAA6T,GAAM,OAAI,wBAAqBvP,MAAOuP,EAA5B,SAAqCA,GAAxBA,WAIhE,IAAK,QACH,OAAQ,sBAAKpV,UAAU,wCAAf,UACI,uBAAOyU,QAASE,EAAhB,SAAyB7N,IACzB,yBAAQ2J,KAAMkE,EAAQ/O,YAAaA,EAAaC,MAAOA,EAAOC,SAAUA,EAAxE,UACE,wBAAQD,MAAM,MAAd,iBACA,wBAAQA,MAAM,KAAd,sBAGhB,IAAK,WACH,OAAQ,sBAAK7F,UAAU,uBAAf,UACI,uBAAOyU,QAASE,EAAQC,SAAUA,GAAYA,EAA9C,SAA0D9N,IAC1D,0BAAU2J,KAAMkE,EAAQ/O,YAAaA,EAAagP,SAAUA,GAAYA,EAAUC,UAAWA,GAAaA,EAAWpK,KAAMqK,EAAcjP,MAAOA,EAAOC,SAAU,SAACC,GAnE3J,IAACsP,KAmEgLtP,EAAEC,QAlE/LsP,aAAeD,EAAKE,cAE3BR,EAAgBD,EAAe,GAgEgLhP,EAASC,MAC5M,uBACGF,EAAMvE,OAAS,GAAK,oBAAGtB,UAAU,sBAAb,UAAoC6F,EAAMvE,OAA1C,IAAmDuT,QAExF,IAAK,WACH,OAAS,sBAAK7U,UAAU,uBAAf,UACK,uBAAOyU,QAASE,EAAhB,SAAyB7N,GAAS,aAClC,uBAAOvK,KAAK,WAAWkU,KAAMkE,EAAQ/O,YAAaA,EAAaC,MAAOA,EAAOC,SAAUA,EAAU+O,UAAWA,GAAaA,OAEzI,QACE,OAAQ,sBAAK7U,UAAU,uBAAf,UACI,uBAAOyU,QAASE,EAAhB,SAAyB7N,IACzB,uBAAOvK,KAAMA,EAAMkU,KAAMkE,EAAQ/O,YAAaA,SC7DjD4P,GAxBO,SAAC,GAAkD,IAAjD/E,EAAgD,EAAhDA,KAAMY,EAA0C,EAA1CA,QAASoE,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,cAAmB,EAGrCnV,mBAASmV,GAH4B,oBAG7DC,EAH6D,KAGpDC,EAHoD,KAKpE,OACQ,qBAAK5V,UAAU,wBAAf,SACKqR,EAAQ9P,KAAK,SAAC6T,EAAQ3M,GAEnB,OAAQ,sBAAKzI,UAAU,cAAf,UACA,uBAAQzD,KAAK,QACLoJ,GAAE,uBAAkB8K,EAAlB,YAA0BhI,GAC5BgI,KAAMA,EACNoF,QAASF,IAAaP,EAAOvP,MAC7BC,SAAU,SAAAC,GAAM6P,EAAYR,EAAOvP,OAAQ4P,EAAaL,EAAOvP,QAC/DA,MAAOuP,EAAOvP,QAEtB,uBAAO4O,QAAO,uBAAkBhE,EAAlB,YAA0BhI,GAAxC,SAA8C2M,EAAOtO,UARnB2B,S,SCyDjDqN,GAAW,SAACC,EAAOC,EAAYC,GAApB,gDAAiC,WAAOjT,EAAUC,GAAjB,oCAAAC,EAAA,6DAEjDgT,GAAQ,EAFyC,EAK/BjT,IAAd7E,EAL6C,EAK7CA,UACF+X,EAAqB/X,EAAUlB,MAGjC+Y,GACAjT,EAAS,CACLzG,KAAM7C,IAXuC,SAgB/C2K,GAAe9B,IAhBgC,iCAmB9BA,GAAKwR,mBAnByB,aAmB9B,EAAkBC,mBAnBY,gBAmB9CE,EAnB8C,EAmB9CA,OAGHkC,EAAQ5T,GAAGc,WAAW,SACtB+S,EAAS7T,GAAGc,WAAW,UAGlB,OAAN4Q,QAAM,IAANA,GAAA,UAAAA,EAAQvE,oBAAR,mBAAsBC,cAAtB,eAA8BtO,QAAS,IACtC4U,GAAQ,EACRE,EAAQA,EAAME,MAAM,oBAAqB,KAAMpC,EAAOvE,aAAaC,QACnEyG,EAASA,EAAOC,MAAM,YAAa,KAAM,kBAK7CF,GADAA,EAAQA,EAAME,MAAM,YAAa,KAAMP,EAAM1M,OAC/BiN,MAAM,YAAa,KAAMP,EAAM1P,IAG7CgQ,GADAA,EAASA,EAAOC,MAAM,YAAa,KAAMP,EAAM1M,OAC/BiN,MAAM,YAAa,KAAMP,EAAM1P,IAI5C2P,GACC7S,OAAOC,KAAK4S,GAAYO,SAAQ,SAAAC,GAC5B,GAA+B,QAA5BR,EAAWQ,GACV,OAAQA,GACJ,IAAK,SACDJ,EAAQA,EAAME,MAAM,wBAAyB,KAAKN,EAAWQ,IAC7DH,EAASA,EAAOC,MAAM,wBAAyB,KAAKN,EAAWQ,IAC/D,MACJ,IAAK,YACDJ,EAAQA,EAAME,MAAM,YAAa,KAAKN,EAAWQ,IACjD,MACJ,IAAK,aACDJ,EAAQA,EAAME,MAAM,WAAY,KAAKN,EAAWQ,IAChDH,EAASA,EAAOC,MAAM,WAAY,KAAKN,EAAWQ,QAWtEJ,EAAQA,EAAMK,MAAM,IACpBJ,EAASA,EAAOI,MAAM,IAGtBL,EAAQA,EAAMM,QAAQ,YAAa,QACnCL,EAASA,EAAOK,QAAQ,YAAa,QAGlCT,IACCG,EAAQA,EAAMO,WAAWV,GACzBI,EAASA,EAAOM,WAAWV,IAK/BG,EAAM5S,MACDC,KADL,yCACU,WAAMmT,GAAN,gBAAA1T,EAAA,yDACE2T,EAAS,GACbD,EAAKL,SAAQ,SAAAhT,GAAG,OAAIsT,EAAO5Q,KAAP,2BAAgB1C,EAAIK,QAApB,IAA4B+B,GAAKpC,EAAIoC,UAEtDuQ,EAJD,gCAKQG,EAAO7S,MAAMC,MAAM,SAAAqT,GACrBA,EAAMP,SAAQ,SAAAQ,GACVvR,QAAQC,IAAIsR,EAAKnT,QACjBiT,EAAO5Q,KAAP,2BAAgB8Q,EAAKnT,QAArB,IAA6B+B,GAAKoR,EAAKpR,YARjD,OAcCsQ,IAEIY,EAAOvV,OAAS,GACf0B,EAAS,CACLzG,KAAMjC,GACNoC,SAAS,IAGjBma,EAAM,uBAAOA,GAAP,aAAkBV,KAG5BnT,EAAS,CACLzG,KAAM5C,EACN+C,QAASma,IA3BX,2CADV,uDAgCK9S,OAAM,SAAAC,GACHwB,QAAQC,IAAIzB,GACZhB,EAAS,CACLzG,KAAM3C,EACN8C,QAASsH,OApHgC,4CAAjC,yDA2IXgT,GAA0B,2DAAM,WAAOhU,EAAUC,GAAjB,8BAAAC,EAAA,6DACzCF,EAAS,CACLzG,KAAMzC,IAF+B,EAMCmJ,IAAjBpG,EANgB,EAMlCD,gBAAkBC,aANgB,SASnCwH,GAAe9B,IAToB,iCAYlBA,GAAKwR,mBAZa,aAYlB,EAAkBC,mBAZA,gBAYlCE,EAZkC,EAYlCA,OAGHkC,EAAQ5T,GAAGc,WAAW,UAGjB,OAAN4Q,QAAM,IAANA,GAAA,UAAAA,EAAQvE,oBAAR,mBAAsBC,cAAtB,eAA8BtO,QAAS,IACtC8U,EAAQA,EAAME,MAAM,oBAAqB,KAAMpC,EAAOvE,aAAaC,UAIvEwG,EAAQA,EAAME,MAAM,qBAAsB,KAAMzZ,EAAa8E,SAKvDsV,YAAW,SAAAL,GACb,IAAIC,EAAS,GACbD,EAAKL,SAAQ,SAAAhT,GAAG,OAAIsT,EAAO5Q,KAAP,2BAAgB1C,EAAIK,QAApB,IAA4B+B,GAAKpC,EAAIoC,SACzD3C,EAAS,CACLzG,KAAMxC,EACN2C,QAASma,OAEd,SAAAla,GACCqG,EAAS,CACLzG,KAAMvC,GACN0C,QAASC,OAtCwB,4CAAN,yDAkFvC,SAAS0H,GAAe9B,GACpB,OAAO,IAAI+B,SAAQ,SAACC,EAASC,GAC1B,IAAMC,EAAclC,EAAKmC,oBAAmB,SAAAjG,GACzCgG,IACAF,EAAQ9F,KACR+F,MCxRV,IA2Me0S,GA3MQ,SAAC,GAAiB,IAAflS,EAAc,EAAdA,QAChBhC,EAAW4B,cADmB,EAIHrE,oBAAS,GAJN,oBAI7B0S,EAJ6B,KAInBC,EAJmB,OAKH3S,oBAAS,GALN,oBAK7BsT,EAL6B,KAKnBC,EALmB,KAS7B3W,EAAgBmD,aAAY,SAAAjE,GAAK,OAAIA,EAAMc,gBAA3CA,aACAV,EAAY6D,aAAa,SAAAjE,GAAK,OAAIA,EAAMD,aAAxCK,SACDuB,EAAuBsC,aAAY,SAAAjE,GAAK,OAAIA,EAAM2B,wBAChDC,EAAUD,EAAVC,MAIJkZ,EAAc,GAEfnZ,EAAqBoZ,eAAe,WAChCnZ,EAAMmZ,eAAe,aACpBD,EAAchU,OAAOC,KAAKnF,EAAMiB,WAAWqC,KAAI,SAAA8V,GAAG,OAAIpZ,EAAMiB,UAAUmY,GAAK/H,eAE3E9J,QAAQC,IAAI,8BAtBgB,MA2BmBlF,mBAAS,IA3B5B,oBA2B7B+W,EA3B6B,KA2BRC,EA3BQ,OA4BFhX,mBAAS,YA5BP,oBA4B7BiX,EA5B6B,KA4BlBC,EA5BkB,OA6BNlX,mBAAS,IA7BH,oBA6B7BmX,EA7B6B,KA6BpBC,EA7BoB,OA8BEpX,mBAAS,IA9BX,oBA8B7BqX,EA9B6B,KA8BhBC,EA9BgB,OA+BAtX,mBAAS,QA/BT,oBA+B7BuX,EA/B6B,KA+BjBC,EA/BiB,OAgCJxX,mBAAS,IAhCL,oBAgC7ByX,EAhC6B,KAgCnBC,EAhCmB,KAyDpCvX,qBAAU,WACyB,KAA5BsE,EAAQ2O,SAASuE,QAtBO,WAC3B,IAAMC,EAAwBnT,EAAQ2O,SAASuE,OAAO3P,MAAM,KAAK,GAC3D6P,EAAmBjb,EAAa0D,QAAO,SAAAC,GAAQ,OAAIA,EAASa,SAAWwW,KAAwB,GACrGZ,EAAuBa,GAoBnBC,KAEL,CAACrT,EAAQ2O,SAASuE,SA6DrB,OACI,sBAAKvS,GAAG,mBAAmB3F,UAAU,yCAArC,UACKiT,GAAa,cAAC,GAAD,CAAgB/K,UAAU,WAAWC,IAAI,6CAA6CC,aA5BzF,WAEf,IAAMjK,EAAO,CACTyP,YAAa0J,EACbgB,QAASV,EACTW,KAAMP,EACN3I,UAAW,CACPmJ,IAAK/b,EAAS+b,IACdlJ,YAAa7S,EAAS6S,YACtBI,MAAOjT,EAASiT,MAChB+I,SAAUhc,EAASgc,UAEvBC,SAAWZ,EACXa,UAAYnB,EACZxI,UAAW,IAAItH,MAInBwL,GAAa,GAEblQ,EDvGkB,SAAA7E,GAAI,gDAAI,WAAO6E,EAAUC,GAAjB,UAAAC,EAAA,sDAC9B,IAEIF,EAAS,CACLzG,KAAMhD,IAQN0J,IAHJ7G,UACIK,SAIJ+F,GAAGc,WAAW,SAASsV,IAAIza,GAC1BsF,MAAK,SAAAF,GACFP,EAAS,CACLzG,KAAM/C,EACNkD,QAAQ,2BAAKyB,GAAN,IAAWwH,GAAIpC,EAAIoC,UAKjC5B,OAAM,SAAAC,GACHhB,EAAS,CACLzG,KAAM9C,EACNiD,QAASsH,OAInB,MAAMrH,GACJ6I,QAAQC,IAAI9I,GACZqG,EAAS,CACLzG,KAAM9C,EACNiD,QAASC,IAlCa,2CAAJ,wDCuGbkc,CAAW1a,IAEpB6G,EAAQiB,KAAK,gBAMqHoC,cAAe,kBAAK6K,GAAa,MAC9JW,GAAa,cAAC,GAAD,CAAgB3L,UAAU,QAAQC,IAAI,qCAAqCC,aAAc,kBAAM0L,GAAa,MAC1H,cAAC,GAAD,CAAWhN,MAAM,YAAYD,SAAS,iBAAiBE,KAAM,CAAC,SAAUE,QAnFzD,WACnBsQ,EAAuB,IACvBI,EAAW,IACXE,EAAe,IACfE,EAAc,QACdE,EAAY,OA+ER,sBAAM3b,OAAO,GAAG+X,SA1CF,SAACtO,GACnBA,EAAEuO,iBAEe,aAAdkD,GAA4BrU,OAAOC,KAAKkU,GAAqBhW,OAAS,EACrEwS,GAAa,GAEbZ,GAAa,IAoCb,SACI,sBAAKlT,UAAU,gBAAf,UACA,cAAC,GAAD,CACIyQ,KAAK,yBACLiF,cAAc,WACdrE,QAAS,CAAC,CAACvK,MAAO,WAAYjB,MAAO,YAAY,CAACiB,MAAO,WAAYjB,MAAQ,kBAC7E4P,aAAc,SAAA1P,GAAC,OAnED,SAAAA,GAEtBgS,EADK,aAANhS,EACe,WAEA,QAElB0R,EAAa1R,GA6DkB+S,CAAsB/S,MAE7C,uBAAK,uBACc,aAAdyR,EAAuE,IAA5CrU,OAAOC,KAAKkU,GAAqBhW,OAE7D,qCACI,cAAC,GAAD,CACAwF,MAAM,kBACNlB,YAAY,wBACZ+O,OAAO,oBACPpY,KAAK,OACLsJ,MAAO6R,EACP9C,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAI4R,EAAW5R,EAAEC,OAAOH,QACnCgP,UAAW,KAEV6C,EAAQpW,OAAS,EACf,cAAC,GAAD,CACCpB,cAAewX,EACfvX,mBAAoB,kBAAMwX,EAAW,KACrCvX,YAAa,SAAA2Y,GApGjCxB,EAoGqEwB,MAClD,yCAAe,mBAAG/Y,UAAU,8BAA5B,8BAEH,mCACA,cAAC,GAAD,CACI8G,MAAM,oBACN6N,OAAO,oBACPpY,KAAK,gBACLsJ,MAAOyR,EAAoBvW,YAC3B6T,UAAU,EACV9O,SAAU,kBAAMyR,EAAuB,SAG3C,6BAEJ,uBAEA,cAAC,GAAD,CACIzQ,MAAM,eACNlB,YAAY,gCACZ+O,OAAO,uBACPpY,KAAK,OACLqY,UAAU,EACV/O,MAAO+R,EACP9R,SAAU,SAAAC,GAAC,OAAI8R,EAAe9R,EAAEC,OAAOH,QACvCgP,UAAW,MACf,cAAC,GAAD,CACI/N,MAAM,eACNlB,YAAY,GACZ+O,OAAO,oBACPpY,KAAK,SACL8U,QAAS8F,EACTtR,MAAOiS,EACPhS,SAAU,SAAAC,GAAC,OA9GA,SAAAA,GAEvBgS,EADa,aAAdP,EACe,WAEAzR,GA0GaiT,CAAuBjT,EAAEC,OAAOH,UACnD,cAAC,GAAD,CACIiB,MAAM,YACNlB,YAAY,GACZ+O,OAAO,oBACPpY,KAAK,WACLqY,UAAU,EACV/O,MAAOmS,EACPnD,UAAW,IACX/O,SAAU,SAAAC,GAAC,OAAIkS,EAAYlS,EAAEC,OAAOH,UACxC,cAAC,GAAD,CAAQY,QAAQ,oBC7KrBwS,GA/BE,SAAC,GAAY,IAAX9a,EAAU,EAAVA,KACRkR,EAA6ElR,EAA7EkR,UAAWzB,EAAkEzP,EAAlEyP,YAAa+K,EAAqDxa,EAArDwa,UAAWD,EAA0Cva,EAA1Cua,SAAUJ,EAAgCna,EAAhCma,QAASC,EAAuBpa,EAAvBoa,KAAMvJ,EAAiB7Q,EAAjB6Q,UAAWrJ,EAAMxH,EAANwH,GAE9E,OACI,qBAAK3F,UAAU,OAAf,SACA,eAAC,KAAD,CAAMqG,GAAE,oBAAeV,GAAvB,UACI,qBAAK3F,UAAU,cAAf,SACmB,aAAd2Y,EACG,+CAAiB,mBAAG3Y,UAAU,4BAE9B,8BAAI4N,EAAY7M,YAAhB,IAA6B,mBAAGf,UAAU,8BAGlD,sBAAKA,UAAU,YAAf,UACI,4BAAIsY,IACJ,4BAAIC,OAER,sBAAKvY,UAAU,cAAf,UACI,4BAAI8I,GAAekG,EAAUE,YAC7B,4BAAIwJ,IACJ,4BAAIrJ,EAAUC,YAAcD,EAAUC,YAAc,uBCvB/C4J,G,WACjB,WAAatV,EAAMuV,EAAY5c,GAAQ,qBAGnC,IAAM6c,EAAY/L,SAASC,cAAc,MAOzC,OANA8L,EAAUC,UAAYF,EAAW5X,KAAI,SAAAsM,GACjC,MAAM,OAAN,OAAcA,EAAd,YAKItR,GACJ,IAAK,YACDiO,KAAKC,KAAO7G,EAAKrC,KAAI,SAAApD,GACjB,IAAMmb,EAASjM,SAASC,cAAc,MASlC,OARJgM,EAAOD,WAAP,wCACUlb,EAAKwH,GAAKxH,EAAKwH,GAAK,QAD9B,8CAEUxH,EAAKyP,YAAczP,EAAKyP,YAAY7M,YAAc,gBAF5D,8CAGU5C,EAAKkR,UAAUC,YAAcnR,EAAKkR,UAAUC,YAAcnR,EAAKkR,UAAUK,MAHnF,8CAIUvR,EAAK6Q,UAAYlG,GAAe3K,EAAK6Q,UAAUE,UAAY,GAJrE,8CAKU/Q,EAAKua,SAAWva,EAAKua,SAAW,GAL1C,8CAMUva,EAAKma,QAAUna,EAAKma,QAAU,aANxC,8CAOUna,EAAKoa,KAAOpa,EAAKoa,KAAO,aAPlC,SAQWe,KAEf,MACJ,IAAK,aACD9O,KAAKC,KAAO7G,EAAKrC,KAAI,SAAA9D,GACjB,IAAM6b,EAASjM,SAASC,cAAc,MAclC,OAbJgM,EAAOD,WAAP,wCACU5b,EAAMkI,GAAKlI,EAAMkI,GAAK,QADhC,8CAEUlI,EAAM8b,YAAc9b,EAAM+b,eAAezY,YAActD,EAAMmQ,YAAY7M,YAFnF,8CAGUtD,EAAM4R,UAAUC,YAAc7R,EAAM4R,UAAUC,YAAc7R,EAAM4R,UAAUK,MAHtF,8CAIUjS,EAAMuR,UAAYlG,GAAerL,EAAMuR,UAAUE,UAAY,GAJvE,8CAKUzR,EAAMgc,WAAahc,EAAMgc,WAAa,GALhD,8CAMUhc,EAAMic,MAAQjc,EAAMic,MAAQ,GANtC,8CAOUjc,EAAM0R,YAAc1R,EAAM0R,YAAYwK,QAAU,GAP1D,8CAQUlc,EAAM0R,YAAc1R,EAAM0R,YAAYwB,IAAM,GARtD,8CASUlT,EAAM0R,YAAc1R,EAAM0R,YAAYC,OAAS,GATzD,8CAUU3R,EAAM8b,YAAc,eAAiB,GAV/C,8CAWU9b,EAAMmc,kBAAoBnc,EAAMmc,kBAAoB,GAX9D,8CAYUnc,EAAMoc,cAAgBpc,EAAMoc,cAAgB,GAZtD,SAaWP,KASvB9O,KAAKC,KAAKqP,QAAQV,G,4DAKlB,IADY,EACNvO,EAAQ,GACRC,EAAUN,KAAKO,wBAFT,eAIMP,KAAKC,MAJX,IAIZ,2BAA6B,CAGzB,IAH0B,IAAnBO,EAAkB,QACrBxC,EAAO,GAEFC,EAAI,EAAGA,EAAIqC,EAASrC,SACDwC,IAApBD,EAAIE,SAASzC,KACbD,GAAQ0Q,EAAgB/N,UAAUH,EAAIE,SAASzC,KAGnDD,GAASC,IAAOqC,EAAU,EAAM,IAAM,GAG1CD,EAAM5E,KAAKuC,IAfH,8BAkBZ,OAAOqC,EAAMO,KAAK,Q,8CAIlB,OAAOZ,KAAKC,KAAKY,QAAO,SAACC,EAAGN,GAAJ,OAAYA,EAAIO,kBAAoBD,EAAIN,EAAIO,kBAAoBD,IAAG,M,iCAG7EE,GAEd,IAAIC,EAAcD,EAAUE,YAQ5B,OALAD,EAAcA,EAAYE,QAAQ,KAApB,MAGdF,EAAc,SAASG,KAAKH,GAAd,WAAiCA,EAAjC,KAAkDA,M,KCvElEsO,GAAeC,IAAMC,MAAK,YAAiB,EAAdjV,QAAe,IACxChC,EAAW4B,cAGX5G,EAAuBsC,aAAY,SAAAjE,GAAK,OAAIA,EAAM2B,wBAJX,EAKMsC,aAAY,SAAAjE,GAAK,OAAIA,EAAM+B,aAAtE5B,EALqC,EAKrCA,QAASU,EAL4B,EAK5BA,MAAcK,GALc,EAKrBZ,MALqB,EAKdY,iBALc,GAM3BS,EAAVC,MAG8BsC,oBAAS,IATF,oBAStC2Z,EATsC,KASzBC,EATyB,OAYT5Z,mBAAS4C,OAAOC,KAAK+F,IAAe,IAZ3B,oBAYtCiR,EAZsC,KAY1BC,EAZ0B,OAaP9Z,mBAAS4I,GAAa,OAbf,oBAatCmR,EAbsC,KAazBC,EAbyB,OAgBjBha,mBAAS,OAhBQ,oBAgBtCia,EAhBsC,KAgB9BC,EAhB8B,OAiBXla,mBAAS,OAjBE,oBAiBtCiX,EAjBsC,KAiB3BC,EAjB2B,OAkBTlX,mBAAS,OAlBA,oBAkBtCuX,EAlBsC,KAkB1BC,EAlB0B,OAoBTxX,mBAAS,IApBA,oBAoBtCyV,EApBsC,KAoB1B0E,EApB0B,KAuB7Cha,qBAAU,WACN,IAAMkD,EAAO+W,eAAe/b,QAAQ,iBAC9Bgc,EAAkB/b,KAAKC,MAAM8E,GAEnC,GAAGA,EAAK,CACJyW,EAAcO,EAAgBR,YAC9BG,EAAe,CACXlR,KAAO,IAAI3B,KAAKkT,EAAgBN,YAAYjR,MAC5ChD,GAAK,IAAIqB,KAAKkT,EAAgBN,YAAYjU,MAE9CoU,EAAUG,EAAgBC,QAAQL,QAClC/C,EAAamD,EAAgBC,QAAQrD,WACrCO,EAAc6C,EAAgBC,QAAQ/C,YAEtC,IAAMgD,EAAa,CACfN,OAASI,EAAgBC,QAAQL,OACjChD,UAAYoD,EAAgBC,QAAQrD,UACpCM,WAAa8C,EAAgBC,QAAQ/C,YAEzC4C,EAAcI,GAIf5d,GAASA,EAAMoE,OAAS,GAGnB0B,EAAS8S,GADTlS,EACkBuF,GAActK,KAAKC,MAAM8E,GAAMwW,YAG/BjR,GAAciR,GAH6BpE,MAOtE,IAGHtV,qBAAU,WAENia,eAAexG,QAAQ,gBAAiBtV,KAAKuV,UAAU,CACnDgG,WAAaA,EACbE,YAAaA,EACbO,QAAU,CACNL,SAAOhD,YAAWM,oBAM9B,IA0CMiD,EAAiB,WACnB/X,EAAS8S,GAASwE,EAAatE,EAAa9Y,EAAMA,EAAMoE,OAAS,GAAG0N,aAIxE,OACI,sBAAKrJ,GAAG,iBAAiB3F,UAAU,+BAAnC,UACI,cAAC,GAAD,CAAW8G,MAAM,aAAaD,SAAS,2BAA2BE,KAAM,CAAC,UAAWE,QAAS,kBAAKkT,GAAgBD,MAClH,sBAAKla,UAAU,gBAAf,UACKka,GACD,sBAAKla,UAAU,0BAAf,UACI,sBAAKA,UAAU,eAAf,UACI,mBAAGA,UAAU,8BAAb,0BAGA,uBACA,sBAAKA,UAAU,qBAAf,UACI,cAAC,GAAD,CACI8G,MAAM,eACNlB,YAAY,GACZ+O,OAAO,oBACPpY,KAAK,SACL8U,QAAS8F,GACTtR,MAAOiS,EACPhS,SAAU,SAAAC,GAAC,OAAIgS,EAAchS,EAAEC,OAAOH,UAGtC,qBAAKjE,MAAO,CAACoZ,MAAO,QACxB,cAAC,GAAD,CACIlU,MAAM,aACNlB,YAAY,GACZ+O,OAAO,qBACPpY,KAAK,SACL8U,QAAS4J,GACTpV,MAAO2R,EACP1R,SAAU,SAAAC,GAAC,OAAI0R,EAAa1R,EAAEC,OAAOH,aAG7C,qBAAK7F,UAAU,qBAAf,SACI,cAAC,GAAD,CACI8G,MAAM,SACNlB,YAAY,GACZ+O,OAAO,qBACPpY,KAAK,SACL8U,QAAS6J,GACTrV,MAAO2U,EACP1U,SAAU,SAAAC,GAAC,OAAI0U,EAAU1U,EAAEC,OAAOH,YAG1C,sBAAK7F,UAAU,qBAAf,UACA,wBAAQ4B,MAAO,CAACuZ,OAAQ,QAAS3Z,QApErB,WAC5B,IAAMsZ,EAAa,CACfN,SACAhD,YACAM,cAEJ4C,EAAcI,GACdX,GAAe,GACfnX,EAAS8S,GAASwE,EAAD,YAAC,eAAiBtE,GAAc8E,MA4DjC,2BACA,qBAAKlZ,MAAO,CAACoZ,MAAO,QACpB,wBAAQpZ,MAAO,CAACuZ,OAAQ,QAAS3Z,QA5D3B,WACtBkZ,EAAc,IACdP,GAAe,GACfM,EAAU,OACV1C,EAAc,OACdN,EAAa,OACbzU,EAAS8S,GAASwE,EAAa,MAsDf,iCAIJ,qBAAKta,UAAU,eAGvB,cAAC,GAAD,CACY8G,MAAM,aACNlB,YAAY,GACZ+O,OAAO,0BACPpY,KAAK,SACL8U,QAASlO,OAAOC,KAAK+F,IACrBtD,MAAOuU,EACPtU,SAAU,SAAAC,GAAC,OA5GJ3B,EA4G0B2B,EAAEC,OAAOH,MA3G1DwU,EAAcjW,GACdmW,EAAepR,GAAc/E,IAC7BoB,QAAQC,IAAI,2CACZzC,EAAS8S,GAAS3M,GAAc/E,GAAK4R,IAJf,IAAC5R,KA8GnB,oBAAGpE,UAAU,mBAAb,UACI,iCACCsa,GAAe1R,GAAmB0R,EAAYjR,MAD/C,MACyDiR,GAAe1R,GAAmB0R,EAAYjU,OAEtGlD,OAAOC,KAAK4S,GAAY1U,OAAS,GAC9B,qCACA,uBAAK,uBACD,uBAAMtB,UAAqC,QAA1BgW,EAAW8B,WAAuB,YAAc,GAAjE,uBAAiF9B,EAAW8B,cAC5F,uBAAM9X,UAAoC,QAAzBgW,EAAWwB,UAAsB,YAAc,GAAhE,wBAAgFxB,EAAWwB,aAC3F,uBAAMxX,UAAiC,QAAtBgW,EAAWwE,OAAmB,YAAc,GAA7D,qBAA2ExE,EAAWwE,OAAtF,gBAKZ,qBAAKxa,UAAU,kBAAf,SACKxD,EAAW,cAAC,GAAD,IACRU,GAASA,EAAMoE,OAAS,EACpB,qCAEA,sBAAKtB,UAAU,oBAAf,UACI,oBAAGA,UAAU,gBAAb,UAA8Boa,EAA9B,YAA4Cld,QAA5C,IAA4CA,OAA5C,EAA4CA,EAAOoE,OAAnD,aACA,uBACA,yBAAQE,QA7HH,WACzB,IACMqL,EADW,IAAIqM,GAAgBhc,EAAO,CAAC,UAAW,WAAY,SAAU,OAAQ,YAAa,eAAgB,aAAc,aACtG4P,eACrBC,EAAU,IAAIC,KAAK,CAACH,GAAY,CAAEtQ,KAAM,aACxC0Q,EAAUC,IAAIC,gBAAgBJ,GAC9BK,EAAgBC,SAASC,cAAc,KAE7CF,EAAcG,KAAON,EACrBG,EAAcI,SAAW,uBACzBJ,EAAcK,QAEdC,YAAW,WACPR,IAAIS,gBAAgBV,KACrB,MAgHiB,qBAA+C,mBAAGjN,UAAU,oBAA5D,UAGJ,uBACC9C,EACA4Q,MAAK,SAAC5K,EAAE6K,GAAH,OAASA,EAAEiB,UAAUE,SAAWhM,EAAE8L,UAAUE,YACjD3N,KAAI,SAAApD,GAAI,OAAI,cAAC,GAAD,CAAUA,KAAMA,GAAWA,EAAKwH,OAEzC,uBACA,qBAAK3F,UAAU,oBAAf,SACKzC,EACG,wBAAQyC,UAAWzC,EAAkB,WAAa,GAAIqE,MAAO,CAACuZ,OAAQ,QAAS3Z,QAASuZ,EAAxF,2BAIA,wBAAQnZ,MAAO,CAACuZ,OAAQ,QAAS3Z,QAASuZ,EAA1C,4BASZ,oBAAG/a,UAAU,mBAAb,cAAiC,mBAAGA,UAAU,8BAA9C,uDAUlBmX,GAAc,CAAC,MAAM,OAAO,QAAQ,OAAQ,QAAQ,QAAS,iBAAkB,QAAS,YAAa,YAErG8D,GAAc,CAAC,MAAM,gBAAiB,YACtCC,GAAc,CAAC,OAENnB,MCrJTjR,GAAkB,SAACrB,GAIrB,OAHAjC,QAAQC,IAAIgC,GACE,UAAOA,EAAKoB,WAAa,EAAzB,YAA8BpB,EAAKM,UAAnC,YAAgDN,EAAKE,eAE/C,IADHF,EAAKsB,mBAAmB,QAAS,CAAEC,KAAM,UAAWC,QAAQ,EAAMC,OAAQ,aAIhFkS,GAxGM,SAAC,GAAe,IAAbpa,EAAY,EAAZA,MACdgC,EAAW4B,cACXyW,EAASra,EAAMsa,OAAO3V,GAFI,GAKbrF,aAAa,SAAAjE,GAAK,OAAIA,EAAMD,aAAxCK,SACgB6D,aAAY,SAAAjE,GAAK,OAAIA,EAAMgC,gBAA3C7B,EANyB,EAMzBA,QAAQ2B,EANiB,EAMjBA,KAIfuC,qBAAU,WACNsC,EL+NsB,SAACqY,GAAD,gDAAY,WAAOrY,EAAUC,GAAjB,oBAAAC,EAAA,yDAEtCF,EAAS,CACLzG,KAAMrC,KAIsB+I,IAAzB7G,UAAYK,SAPmB,EAQTwG,MAAV/F,EARmB,EAQ/BkB,UAAYlB,OARmB,qBAW5Bqe,EAAYre,EAAMse,MAAK,SAAArd,GAAI,OAAIA,EAAKwH,KAAO0V,MAXf,uBAc9BrY,EAAS,CACLzG,KAAMpC,GACNuC,QAAS6e,IAhBiB,0BAuBrC/Y,GAAGc,WAAW,SAASC,IAAI8X,GAAQ7X,MAC/BC,MAAK,SAAAF,GACFP,EAAS,CACLzG,KAAMpC,GACNuC,QAAQ,2BAAK6G,EAAIK,QAAV,IAAkB+B,GAAIpC,EAAIoC,UAGxC5B,OAAM,SAAAC,GACHhB,EAAS,CACLzG,KAAMnC,GACNsC,QAAQsH,OAjCkB,2CAAZ,wDK/NbyX,CAAeJ,MAC1B,CAACA,IAKH,IAIOzN,EAAyEzP,EAAzEyP,YAAayB,EAA4DlR,EAA5DkR,UAAUsJ,EAAkDxa,EAAlDwa,UAAUD,EAAwCva,EAAxCua,SAASJ,EAA+Bna,EAA/Bma,QAAQC,EAAuBpa,EAAvBoa,KAAKvJ,EAAkB7Q,EAAlB6Q,UAAWrJ,EAAOxH,EAAPwH,GAEzE,OACI,sBAAKA,GAAG,iBAAiB3F,UAAU,0BAAnC,UACI,cAAC,GAAD,CAAW8G,MAAM,YAAYD,SAAS,eAAeE,KAAM,CAAC,UAAWE,QARzD,eASd,uBAAK,uBAEJzK,EAAW,cAAC,GAAD,IACR,qCACA,sBAAKwD,UAAU,eAAe2F,GAAG,iBAAjC,UACC,mBAAG3F,UAAU,gBAAb,kBACA,qBAAKA,UAAU,kBAAf,SACG,sBAAKA,UAAU,2BAAf,UACQ,mBAAGA,UAAU,iBACjB,gCACQ,4BAAIsY,IACJ,4BAAIC,eAKvB,uBAAK,uBACD,sBAAKvY,UAAU,eAAf,UACA,oBAAGA,UAAU,gBAAb,oBAAqC2F,KACrC,sBAAK3F,UAAU,kBAAf,UACmB,aAAd2Y,EACG,qCACA,sBAAK3Y,UAAU,2BAAf,UACG,mBAAGA,UAAU,iBACb,gCACI,wCACA,4BAAI4N,GAAeA,EAAY7M,oBAGtC,qBAAKf,UAAU,iBAAf,SACG,gCACI,yCACA,4BAAI4N,GAAeA,EAAYjM,iBAIrC,6BAEL,sBAAK3B,UAAU,2BAAf,UACG,mBAAGA,UAAU,qBAChB,gCACQ,6CACA,6BAAa,OAATqP,QAAS,IAATA,OAAA,EAAAA,EAAWC,aAAX,OAAyBD,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAWC,YAAc,oBAG9D,qBAAKtP,UAAU,iBAAf,SACI,gCACG,6CACC,4BAAIgP,GAAalG,GAAekG,EAAUE,iBAGlD,qBAAKlP,UAAU,6BAIf,qBAAKA,UAAU,iBAAf,SACI,gCACG,0CACC,4BAAI0Y,sBCtClBgD,GA3DI,SAAC,GAAqD,IAApDxQ,EAAmD,EAAnDA,SAAUyQ,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aAE5CC,EAASF,GAAwB,EACjCG,EAAYF,EAEZG,EAAa9Q,EAAS,GAAG+Q,MAAM/Q,SAC/BgR,EAAWhR,EAAS,GAAG+Q,MAAM/Q,SAC7BiR,EAAgBjR,EAAS,GAAG+Q,MAAM/Q,SAAS5J,OAGjD,OACI,sBAAKtB,UAAU,aAAf,UACI,qBAAKA,UAAU,kBAAf,SACKgc,EAAWza,KAAK,SAACgG,EAAKkB,GAEnB,YAAyBwC,IAAtB1D,EAAI0U,MAAMza,QACFwY,IAAMoC,aAAa7U,EAAI,CAC1B8P,IAAM5O,EACNjH,QAAU,WAAOua,EAAUtT,IAC3BzI,UAAY8b,IAAWrT,EAAI,SAAW,KAGnCuR,IAAMoC,aAAa7U,EAAI,CAC1B8P,IAAM5O,EACNjH,QAAU,WAAOua,EAAUtT,GAAIlB,EAAI0U,MAAMza,WACzCxB,UAAY8b,IAAWrT,EAAI,SAAW,UAMtD,qBAAKzI,UAAU,mBAAf,SACKkc,EAAS3a,KAAK,SAAC8a,EAAK5T,GACjB,OAAOuR,IAAMoC,aAAaC,EAAK,CAC3BhF,IAAM5O,EACNzI,UAAY8b,IAAWrT,EAAI,8BAAgC,8BAKtEkT,GACG,qBAAK3b,UAAU,yBAAf,SACgB,IAAX8b,EACG,cAAC,GAAD,CAAQrV,QAAQ,OAAOjF,QAAS,kBAAMua,EAAUD,EAAS,MAC1DA,IAAWK,EAAgB,EAC1B,cAAC,GAAD,CAAQ1V,QAAQ,OAAOjF,QAAS,kBAAMua,EAAUD,EAAS,MAEzD,qCACI,cAAC,GAAD,CAAQrV,QAAQ,OAAOjF,QAAS,WAAOua,EAAUD,EAAS,MAC1D,cAAC,GAAD,CAAQrV,QAAQ,OAAOjF,QAAS,WAAOua,EAAUD,EAAS,eCYvEQ,GA1DG,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,KAAMlc,EAAqC,EAArCA,KAAMmc,EAA+B,EAA/BA,QAAS7W,EAAsB,EAAtBA,GAAI8W,EAAkB,EAAlBA,aACrCC,EAAc,GAMlB,OAJGH,IACCG,EAAcC,GAAoBJ,EAAKld,SAAUgB,EAAKrB,iBAItD,qBAAKgB,UAAU,YAAY2F,GAAIA,EAA/B,SACI,kCACI,gCACI,+BACI,sCACA,uCACA,0CAGN4W,EACE,gCACCG,EAAY5O,MAAK,SAAC5K,EAAE6K,GAAH,OAAS7K,EAAE6M,KAAKC,cAAcjC,EAAEgC,SAAOxO,KAAK,SAAC0O,EAASC,EAAOC,GAG3E,IAAIyM,GAAiB,EAKrB,OAJG1M,EAAQ,GAAKC,EAAID,EAAQ,GAAGpM,SAAS+L,UAAU,EAAE,KAAOI,EAAQnM,SAAS+L,UAAU,EAAE,KACpF+M,GAAiB,GAIjB,qBAAyB5c,UAAW4c,EAAiB,cAAgB,GAArE,UACI,6BAAK3M,EAAQI,YACb,6BACI5B,KAAWC,YACX+N,EAAe,EAAIxM,EAAQ4M,WAAe5M,EAAQ4M,YAAcJ,EAAe,KAAQxM,EAAQ4M,cAGnG,6BACI,uBAAOtgB,KAAK,MAAMuJ,SAAU,SAACC,GAAD,OAAOyW,EAC/B,CACAM,cAAe7M,EAAQtO,OACvBgP,IAAsB,EAAjB5K,EAAEC,OAAOH,MACd6K,MAAO+L,EAAe,EAAIxM,EAAQ4M,WAAe5M,EAAQ4M,YAAcJ,EAAe,KAAQxM,EAAQ4M,WACtGpM,KAAMR,EAAQI,UACdE,YAAaN,EAAQnM,kBAdxBmM,EAAQtO,aAXpB,mCAuDnBgb,GAAsB,SAACI,EAAkBC,GAQ3C,OAnBqB,SAACC,GACtB,IAAIpG,EAAS,GAEb,IAAI,IAAIqG,KAAQD,EACZpG,EAAO5Q,KAAKgX,EAAQC,IAGxB,OAAOrG,EAKiBsG,CAAiBJ,GAEVxb,KAAI,SAAA2b,GAAI,OAAIF,EAAmBE,EAAKvb,WAAUmM,MAAM,SAAC5K,EAAE6K,GAClF,OAAO7K,EAAE6M,KAAOhC,EAAEgC,SCLbqN,GAAY,SAACrH,EAAOC,EAAYC,GAApB,gDAAiC,WAAOjT,EAAUC,GAAjB,oCAAAC,EAAA,6DAElDgT,GAAQ,EAF0C,EAK/BjT,IAAftF,EAL8C,EAK9CA,WACF0f,EAAsB1f,EAAWC,OAGnCqY,GACAjT,EAAS,CACLzG,KAAM7B,KAXwC,SAgBhD2J,GAAe9B,IAhBiC,iCAmB/BA,GAAKwR,mBAnB0B,aAmB/B,EAAkBC,mBAnBa,gBAmB/CE,EAnB+C,EAmB/CA,OAGHkC,EAAQ5T,GAAGc,WAAW,UACtB+S,EAAS7T,GAAGc,WAAW,WAGlB,OAAN4Q,QAAM,IAANA,GAAA,UAAAA,EAAQvE,oBAAR,mBAAsBC,cAAtB,eAA8BtO,QAAS,IACtC4U,GAAQ,EACRE,EAAQA,EAAME,MAAM,oBAAqB,KAAMpC,EAAOvE,aAAaC,QACnEyG,EAASA,EAAOC,MAAM,mCAAoC,KAAMpC,EAAOvE,aAAaC,SAMxFwG,GADAA,EAAQA,EAAME,MAAM,YAAa,KAAMP,EAAM1M,OAC/BiN,MAAM,YAAa,KAAMP,EAAM1P,IAG7CgQ,GADAA,EAASA,EAAOC,MAAM,YAAa,KAAMP,EAAM1M,OAC/BiN,MAAM,YAAa,KAAMP,EAAM1P,IAK/C+P,EAAQA,EAAMK,MAAM,IACpBJ,EAASA,EAAOI,MAAM,IAGtBL,EAAQA,EAAMM,QAAQ,YAAa,QACnCL,EAASA,EAAOK,QAAQ,YAAa,QAGlCT,IACCG,EAAQA,EAAMO,WAAWV,GACzBI,EAASA,EAAOM,WAAWV,IAG3BG,EAAMa,WAAN,yCAAiB,WAAML,GAAN,gBAAA1T,EAAA,yDACT2T,EAAS,GACbD,EAAKL,SAAQ,SAAAhT,GAAG,OAAIsT,EAAO5Q,KAAP,2BAAgB1C,EAAIK,QAApB,IAA4B+B,GAAKpC,EAAIoC,UAEtDuQ,EAJU,gCAKHG,EAAO7S,MAAMC,MAAM,SAAAqT,GACrBA,EAAMP,SAAQ,SAAAQ,GACVF,EAAO5Q,KAAP,2BAAgB8Q,EAAKnT,QAArB,IAA6B+B,GAAKoR,EAAKpR,YAPtC,OAaVsQ,IAEIY,EAAOvV,OAAS,GACf0B,EAAS,CACLzG,KAAMrB,GACNwB,SAAS,IAGjBma,EAAM,uBAAOA,GAAP,aAAkBwG,KAI5Bra,EAAS,CACLzG,KAAM5B,GACN+B,QAASma,IA3BA,2CAAjB,uDA8BG,SAAA7S,GACChB,EAAS,CACLzG,KAAM3B,GACN8B,QAASsH,OAzFiC,4CAAjC,yDAkGZsZ,GAAkB,SAACrO,GAAD,gDAAa,WAAMjM,EAASC,GAAf,4BAAAC,EAAA,sDAGxCF,EAAS,CACLzG,KAAMzB,KAJ8B,EAQRmI,IARQ,EAQjC7G,UAAYK,SARqB,EASTwG,IAAXrF,EAToB,EASjCD,WAAaC,OAToB,EAUSqF,IAAtBlG,EAVa,EAUjCA,kBAAoBA,kBAErBwgB,EAAwB3f,EAAO4d,MAAK,SAAA/d,GAAK,OAAIA,EAAMkI,KAAOsJ,KAC1DuO,EAA2BzgB,EAAkBye,MAAK,SAAA/d,GAAK,OAAIA,EAAMkI,KAAOsJ,KAE3EsO,EACCva,EAAS,CACLzG,KAAMxB,GACN2B,QAAS6gB,IAEPC,EACNxa,EAAS,CACLzG,KAAMxB,GACN2B,QAAS8gB,KAGbhY,QAAQC,IAAI,gCACZjD,GAAGc,WAAW,UAAUC,IAAI0L,GAASgI,YAAW,SAAA1T,GAC5CP,EAAS,CACLzG,KAAMxB,GACN2B,QAAQ,2BAAK6G,EAAIK,QAAV,IAAkB+B,GAAIpC,EAAIoC,UAEtC,SAAA3B,GACAhB,EAAS,CACLzG,KAAMvB,GACNgJ,IAAIA,QAnCyB,2CAAb,yDA6C/B,SAASK,GAAe9B,GACpB,OAAO,IAAI+B,SAAQ,SAACC,EAASC,GAC1B,IAAMC,EAAclC,EAAKmC,oBAAmB,SAAAjG,GACzCgG,IACAF,EAAQ9F,KACR+F,MC5MV,IA+uBeiZ,GA/uBS,SAAC,GAAe,IAoBhCte,EAAYJ,EAAU2e,EApBJ1Y,EAAa,EAAbA,QAChBhC,EAAW4B,cADkB,EAIFrE,oBAAS,GAJP,oBAI5B0S,EAJ4B,KAIlBC,EAJkB,OAKF3S,oBAAS,GALP,oBAK5BsT,EAL4B,KAKlBC,EALkB,OAMHvT,mBAAS,IANN,oBAM5Bod,EAN4B,KAMlBC,EANkB,KAS7B3f,EAAQqC,aAAY,SAAAjE,GAAK,OAAIA,EAAM2B,qBAAqBC,SACtDd,EAAgBmD,aAAY,SAAAjE,GAAK,OAAIA,EAAMc,gBAA3CA,aAGDV,EAAY6D,aAAa,SAAAjE,GAAK,OAAIA,EAAMD,aAAxCK,SAGDkH,EAAerD,aAAY,SAAAjE,GAAK,OAAIA,EAAMO,mBAC/BihB,EAAsCla,EAA/CnH,QAA8BK,EAAiB8G,EAAjB9G,aAMlCoB,GAKAkB,EAAalB,EAAMkB,WACnBJ,EAAWd,EAAMc,SACjB2e,EAAYva,OAAOC,KAAKnF,EAAMuB,UAAU+B,KAAI,SAAAuc,GAAI,OAAI7f,EAAMuB,SAASse,GAAM/N,UANzE5Q,EAAa,KACbJ,EAAW,KACX2e,EAAY,MAShB,IAAMK,EAAwB9f,GAAUkF,OAAOC,KAAKjE,GAnCjB,EAsCFoB,mBAAS,GAtCP,oBAsC5Bqb,EAtC4B,KAsClBC,EAtCkB,OAyCOtb,mBAAS,YAzChB,oBAyC5Byd,EAzC4B,KAyCbC,EAzCa,OA0CoB1d,mBAAS,IA1C7B,oBA0C5B+W,EA1C4B,KA0CPC,EA1CO,OA6CKhX,mBAAS,mBA7Cd,oBA6C5B2d,EA7C4B,KA6CdC,EA7Cc,OA8CK5d,mBAAS,IA9Cd,oBA8C5B6d,EA9C4B,KA8CdC,EA9Cc,OAiDO9d,mBAAS,IAjDhB,oBAiD5B+d,EAjD4B,KAiDbC,EAjDa,OAkDXhe,mBAAS,IAlDE,qBAkD5Bie,GAlD4B,MAkDtBC,GAlDsB,SAmDTle,mBAAS,KAnDA,sBAmD5BlE,GAnD4B,MAmDrBqiB,GAnDqB,SAoDLne,mBAAS,IApDJ,sBAoD5Boe,GApD4B,MAoDnBC,GApDmB,SAuDDre,mBAAS,IAvDR,sBAuD5BiP,GAvD4B,MAuDjBqP,GAvDiB,SAwDHte,mBAAS,IAxDN,sBAwD5BkP,GAxD4B,MAwDlBqP,GAxDkB,SAyDTve,mBAAS,IAzDA,sBAyD5Bwe,GAzD4B,MAyDrBC,GAzDqB,SA0DTze,mBAAS,IA1DA,sBA0D5BmP,GA1D4B,MA0DrBuP,GA1DqB,SA6DG1e,mBAAS,eA7DZ,sBA6D5B2e,GA7D4B,MA6DfC,GA7De,SA8DC5e,mBAAS,IA9DV,sBA8D5B6e,GA9D4B,MA8DhBC,GA9DgB,SAiEiB9e,mBAAS1D,EAAaiS,SAAWjS,EAAaiS,SAAShL,SAAW,KAjEnF,sBAiE5Bwb,GAjE4B,MAiERC,GAjEQ,SAkEehf,mBAAS1D,GAAeA,EAAagH,cAAgBhH,EAAagH,cAAcC,SAASyE,MAAM,KAAK,GAAQ,GAlE3H,sBAkE5BiX,GAlE4B,MAkETC,GAlES,SAqEKlf,mBAAS,IArEd,sBAqE5Bmf,GArE4B,MAqEdC,GArEc,SAsEGpf,mBAAS,CAAC6O,OAAQ,EAAGuB,IAAK,EAAGgJ,QAAS,IAtEzC,sBAsE5BiG,GAtE4B,MAsEfC,GAtEe,SAyEetf,mBAAS,IAzExB,sBAyE5Buf,GAzE4B,MAyETC,GAzES,SA0ELxf,mBAAS,KA1EJ,sBA0E5Byf,GA1E4B,MAmG7BC,IAnG6B,MAmGT,SAAAnf,GACtBkC,EAASH,GAAgB/B,EAASa,SAClC4V,EAAuBzW,KAYrBof,GAAyB,SAACC,GAC5BV,GAAqBU,GACrBd,GAAcc,GAEd,IAAI9gB,EAAW,GACf8D,OAAOC,KAAKsc,IAAcnJ,SAAQ,SAAA6J,GAC9B,IAAMC,EAAyBthB,EAASC,eAAeohB,GAAWvD,WAClExd,EAAS+gB,GAAT,2BAA0BV,GAAaU,IAAvC,IAAmD1P,MAAO2P,EAA2BA,GAA0BF,EAAiB,UAEpIR,GAAgBtgB,IAIpBqB,qBAAU,WACN6e,GAAsB1iB,EAAeA,EAAaiS,UAAYjS,EAAaiS,SAAShL,SAAW,KAC/Foc,GAAuBrjB,GAAeA,EAAagH,cAAgBhH,EAAagH,cAAcC,SAASyE,MAAM,KAAK,GAAQ,KAC3H,CAAC1L,IAIJ6D,qBAAU,YAzDc,WACpB,IAAI0O,EAAS,EAAGuB,EAAM,EAAGgJ,EAAU,EAEnC,IAAK,IAAIuD,KAAQwC,GACbtQ,GAAWsQ,GAAaxC,GAAb,MAA8BwC,GAAaxC,GAAb,IACzCvM,GAAO+O,GAAaxC,GAAb,IACPvD,EAAU+F,GAAaxC,GAAb,IAA4B,EAAIvD,EAAU,EAAGA,EAE3DkG,GAAe,CAACzQ,SAAOuB,MAAIgJ,YAkD3B2G,KACD,CAACZ,KAIJhf,qBAAU,WACyB,KAA5BsE,EAAQ2O,SAASuE,QApDO,WAC3B,IAAMC,EAAwBnT,EAAQ2O,SAASuE,OAAO3P,MAAM,KAAK,GAC3D6P,EAAmBjb,EAAa0D,QAAO,SAAAC,GAAQ,OAAIA,EAASa,SAAWwW,KAAwB,GACrG8H,GAAkB7H,GAkDdC,KAEL,CAACrT,EAAQ2O,SAASuE,SAiGrB,OACI,sBAAKlY,UAAU,0BAA0B2F,GAAG,oBAA5C,UACKsN,GAAa,cAAC,GAAD,CAAgB/K,UAAU,WAAWC,IAAI,8CAA8CC,aAtDzF,WAEhB,IAAImY,EAAkB,GAEtBpd,OAAOC,KAAKsc,IAAc7e,QAAO,SAAAuf,GAAS,OAAIV,GAAaU,GAAb,IAAiC,KAAI7J,SAAQ,SAAA6J,GACvFG,EAAgBH,GAAaV,GAAaU,MAG9C,IAAM3iB,EAAQ,CACVmQ,YAAa0J,EACbiC,YAA8B,oBAAjB2E,EACb1E,eAAkC,oBAAjB0E,EAAqC,GAAK,CACvDsC,YAAa,CACTC,MAAOrC,EACPsC,MAAOpC,EACP7c,KAAM+c,GACNmC,eAAe,EACf5Q,KAAM,YACNhB,WAAY4P,GACZjd,MAAOrF,IAEXukB,YAAa,CACT7f,YAAaqd,EACbyC,MAAOnR,GACPoR,MAAO/B,GACP9d,UAAWuO,GACXtO,SAAUuO,KAIlBoK,cAAemE,EACf+C,SAAUR,EACVlR,UAAW,CACPmJ,IAAK/b,EAAS+b,IACdlJ,YAAa7S,EAAS6S,YACtBI,MAAOjT,EAASiT,MAChB+I,SAAUhc,EAASgc,UAEvBgB,WAA8B,oBAAjByE,EAAqCsB,GAAoBJ,GACtE1F,OAA0B,oBAAjBwE,EAAqCoB,GAAqBJ,IAAgC,oBAAjBhB,EAAqCoB,GAAqBJ,GAAc,GAC1J/P,YAAcyQ,GACd5Q,UAAW,IAAItH,KACfkS,kBAAmBkG,GACnBkB,YAAc,iBACdC,QAASjB,IAGb9M,GAAa,GACblQ,EDzOmB,SAAAvF,GAAK,gDAAI,WAAOuF,EAAUC,GAAjB,UAAAC,EAAA,sDAChCF,EAAS,CACLzG,KAAMhC,KAGV,IACIiI,GAAGc,WAAW,UAAUsV,IAAInb,GAC3BgG,MAAK,SAAAF,GACFP,EAAS,CACLzG,KAAM/B,GACNkC,QAAQ,2BAAKe,GAAN,IAAYkI,GAAIpC,EAAIoC,UAGlC5B,OAAM,SAAApH,GACHqG,EAAS,CACLzG,KAAM9B,GACNiC,QAASC,IAEb6I,QAAQC,IAAI9I,MAElB,MAAOA,GACLqG,EAAS,CACLzG,KAAM9B,GACNiC,QAASC,IAvBe,2CAAJ,wDCyOfukB,CAAYzjB,IACrBuH,EAAQiB,KAAK,iBAKuHoC,cAAe,kBAAK6K,GAAa,MAChKW,GAAa,cAAC,GAAD,CAAgB3L,UAAU,QAAQC,IAAKwV,EAAUvV,aAAc,kBAAM0L,GAAa,MACpG,cAAC,GAAD,CAAWhN,MAAM,aAAaD,SAAS,kBAAkBE,KAAM,CAAC,SAAUE,QAnGvD,eAoGnB,sBAAMoN,SAAU,SAACtO,GAAD,OAAOA,EAAEuO,kBAAzB,SACI,eAAC,GAAD,CAAaqH,YAAU,EAACC,UAAWA,EAAWC,aAAcA,EAA5D,UACI,sBAAKpL,KAAK,cAAV,UACI,wBAAQlU,KAAK,SAAb,sBACA,wBAAQA,KAAK,SAAb,sBACA,wBAAQA,KAAK,SAAb,wBAEJ,sBAAKkU,KAAK,YAAV,UACI,8BACI,sBAAKzQ,UAAU,gBAAf,UACI,cAAC,GAAD,CACAyQ,KAAK,uBACLiF,cAAc,kBACdrE,QAAS8P,GACT1L,aAAc,SAAA1P,GAAC,OA1JN,SAACA,GAC9BoY,EAAgBpY,GACP,gBAANA,GACCwR,EAAuB,IAuJY6J,CAAyBrb,MAC5C,uBAAK,uBACa,oBAAjBmY,EACG,qCACA,cAAC,GAAD,CACIpX,MAAmD,IAA5C3D,OAAOC,KAAKkU,GAAqBhW,OAAe,oBAAsB,oBAC7EsE,YAAY,iCACZ+O,OAAO,gBACPpY,KAAkD,IAA5C4G,OAAOC,KAAKkU,GAAqBhW,OAAe,OAAS,gBAC/DuE,MAAmD,IAA5C1C,OAAOC,KAAKkU,GAAqBhW,OAAe8c,EAAe9G,EAAoBvW,YAC1F6T,UAAU,EACVC,UAAW,GACX/O,SAAU,SAAAC,GAAOsY,EAAgBtY,EAAEC,OAAOH,OAAQ0R,EAAuB,OAExE6G,EAAa9c,OAAS,EAChB,cAAC,GAAD,CACCpB,cAAeke,EACfje,mBAAoB,kBAAMke,EAAgB,KAC1Cje,YAAa,SAAA2Y,GAAc,OAAIkH,GAAkBlH,MACnD,GACL5V,OAAOC,KAAKkU,GAAqBhW,OAAS,EACvC,qCAGA,sBAAKtB,UAAU,uBAAuB2F,GAAG,iCAAzC,UACI,cAAC,GAAD,CACImB,MAAM,QACN6N,OAAO,qBACPpY,KAAK,SACL8U,QAASqM,EACT7X,MAAOyZ,GACP1K,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAIwZ,GAAsBxZ,EAAEC,OAAOH,UAElD,cAAC,GAAD,CACIiB,MAAM,aACNlB,YAAY,iBACZ+O,OAAO,2BACPpY,KAAK,SACLsJ,MAAO2Z,GACP1Z,SAAU,SAAAC,GAAC,OAAIma,GAAuBna,EAAEC,OAAOH,aAKtDgY,EAAuB,2CACpB,mCACChhB,EACG,qCACAA,EAAaiS,UAAYjS,EAAaiS,SAAShL,WAAawb,GACxD,2CAAiB,mBAAGtf,UAAU,8BAA9B,6DAEA,6BAIJnD,EAAagH,eAAiBhH,EAAagH,cAAcC,SAASyE,MAAM,KAAK,KAAOiX,GAChF,2CAAiB,mBAAGxf,UAAU,8BAA9B,6DAEA,6BAEJ,uBAAK,0BAEJ,KAKT,qBAAKA,UAAU,eAAe2F,GAAG,iCAAjC,SACKkY,EAAuB,cAAC,GAAD,IACpB,qCACA,mBAAG7d,UAAU,gBAAb,iCACA,sBAAKA,UAAU,uBAAf,UACI,sBAAKA,UAAU,iBAAf,UACA,gDACA,4BAAInD,GAAgB4R,KAAWC,YAAY7R,EAAawkB,cAExD,sBAAKrhB,UAAU,iBAAf,UACI,gDACA,4BAAInD,GAAgB,IAAI6K,KAAK7K,EAAaykB,aAAaC,0BAE3D,qBAAKvhB,UAAU,iBAAf,SACI,gCACI,6CACA,8BAAKnD,GAAgBA,EAAaoE,UAAlC,IAA8CpE,GAAgBA,EAAaqE,iBAGnF,sBAAKlB,UAAU,2BAAf,UACI,mBAAGA,UAAU,4BACb,gCACI,2CACA,4BAAInD,GAAgBA,EAAaikB,cAGzC,sBAAK9gB,UAAU,2BAAf,UACI,mBAAGA,UAAU,2BACb,gCACQ,2CACA,4BAAInD,GAAgBA,EAAagkB,cAG7C,sBAAK7gB,UAAU,2BAAf,UACI,mBAAGA,UAAU,0BACb,gCACI,iDACCnD,GAAgBA,EAAa2jB,aAC9B,8BAAI3jB,EAAa2jB,YAAYC,MAAM,uBAClC5jB,EAAa2jB,YAAYE,MAAM,uBAC/B7jB,EAAa2jB,YAAY/e,KAF1B,KAEkC5E,EAAa2jB,YAAY9e,MAF3D,IAEmE7E,EAAa2jB,YAAYzR,4BAQhH,uBAAK,0BAEN,8BAAG,mBAAG/O,UAAU,8BAAhB,8BAGP,qCACA,uBACC,qBAAKA,UAAU,eAAf,SACG,mBAAGA,UAAU,8BAAb,4BAIJ,uBAAK,uBAEL,cAAC,GAAD,CACI8G,MAAM,oBACNlB,YAAY,iCACZ+O,OAAO,oBACPpY,KAAK,OACLsJ,MAAOuY,EACPxJ,UAAU,EACVC,UAAW,GACX/O,SAAU,SAAAC,GAAC,OAAIsY,EAAgBtY,EAAEC,OAAOH,UACxC,uBAAK,uBAET,qBAAK7F,UAAU,eAAf,SACI,mBAAGA,UAAU,8BAAb,oCAIJ,uBAAK,uBAEL,cAAC,GAAD,CACI8G,MAAM,iBACNlB,YAAY,uBACZ+O,OAAO,6BACPpY,KAAK,OACLsJ,MAAOyY,EACP1J,UAAU,EACVC,UAAW,IACX/O,SAAU,SAAAC,GAAC,OAAIwY,EAAiBxY,EAAEC,OAAOH,UAE7C,cAAC,GAAD,CACIiB,MAAM,OACNlB,YAAY,aACZ+O,OAAO,oBACPpY,KAAK,OACLsJ,MAAO2Y,GACP5J,UAAU,EACVC,UAAW,GACX/O,SAAU,SAAAC,GAAC,OAAI0Y,GAAQ1Y,EAAEC,OAAOH,UAEpC,cAAC,GAAD,CACIiB,MAAM,QACNlB,YAAY,cACZ+O,OAAO,qBACPpY,KAAK,SACLsJ,MAAOxJ,GACPuY,UAAU,EACVvD,QAASmQ,GACT1b,SAAU,SAAAC,GAAC,OAAI2Y,GAAS3Y,EAAEC,OAAOH,UAErC,cAAC,GAAD,CACIiB,MAAM,WACNlB,YAAY,iBACZ+O,OAAO,mBACPpY,KAAK,OACLsJ,MAAO8Y,GACP/J,UAAU,EACVC,UAAW,EACX/O,SAAU,SAAAC,GAAC,OAAI6Y,GAAW7Y,EAAEC,OAAOH,UAEvC,qBAAK7F,UAAU,eAAf,SACI,mBAAGA,UAAU,8BAAb,mCAIJ,uBAAK,uBAEL,cAAC,GAAD,CACI8G,MAAM,aACNlB,YAAY,2BACZ+O,OAAO,qBACPpY,KAAK,OACLsJ,MAAO2J,GACPoF,UAAU,EACVC,UAAW,GACX/O,SAAU,SAAAC,GAAC,OAAI8Y,GAAa9Y,EAAEC,OAAOH,UAEzC,cAAC,GAAD,CACIiB,MAAM,YACNlB,YAAY,0BACZ+O,OAAO,qBACPpY,KAAK,OACLsJ,MAAO4J,GACPmF,UAAU,EACVC,UAAW,GACX/O,SAAU,SAAAC,GAAC,OAAI+Y,GAAY/Y,EAAEC,OAAOH,UAExC,cAAC,GAAD,CACIiB,MAAM,UACNlB,YAAY,sBACZ+O,OAAO,qBACPpY,KAAK,OACLsJ,MAAOkZ,GACPnK,UAAU,EACVC,UAAW,GACX/O,SAAU,SAAAC,GAAC,OAAIiZ,GAASjZ,EAAEC,OAAOH,UAErC,cAAC,GAAD,CACIiB,MAAM,gBACNlB,YAAY,8BACZ+O,OAAO,qBACPpY,KAAK,QACLsJ,MAAO6J,GACPkF,UAAU,EACVC,UAAW,GACX/O,SAAU,SAAAC,GAAC,OAAIkZ,GAASlZ,EAAEC,OAAOH,UAErC,qBAAK7F,UAAU,eAAf,SACI,mBAAGA,UAAU,8BAAb,6BAIJ,uBAAK,uBAEL,cAAC,GAAD,CACI8G,MAAM,QACN6N,OAAO,qBACPpY,KAAK,SACL8U,QAASqM,EACT7X,MAAOqZ,GACPtK,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAIoZ,GAAepZ,EAAEC,OAAOH,UAE3C,cAAC,GAAD,CACIiB,MAAM,cACNlB,YAAY,iBACZ+O,OAAO,2BACPpY,KAAK,SACLsJ,MAAOuZ,GACPtZ,SAAU,SAAAC,GAAC,OAAIma,GAAuBna,EAAEC,OAAOH,kBAM/D,gCACI,qBAAK7F,UAAU,gBAAf,SACA,cAAC,GAAD,CACI8G,MAAM,qBACNlB,YAAY,GACZ+O,OAAO,kBACPpY,KAAK,SACL8U,QAAS0M,EACTlY,MAAOmY,EACPlY,SAAU,SAAAC,GAAC,OAAIkY,EAAiBlY,EAAEC,OAAOH,YAE7C,cAAC,GAAD,CACIF,GAAG,YACHpJ,KAAK,YACLggB,KAAMpd,GAAcA,EAAWC,SAC/BiB,KAAMtB,EACNyd,QA5bO,SAACvM,GAC5B0P,GAAgB,2BAAID,IAAL,mBAAmBzP,EAAQ6M,cAAiB7M,MA4bvCwM,aAA+B,oBAAjByB,EAAqCsB,GAAoBJ,KAC3E,uBACA,uBACA,sBAAKpf,UAAU,eAAe2F,GAAG,oBAAjC,UACI,mBAAG3F,UAAU,gBAAb,0BACA,sBAAKA,UAAU,kBAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,gCACQ,6CACA,4BAAIyO,KAAWC,YAAYkR,GAAYxQ,eAGnD,qBAAKpP,UAAU,kBAAf,SACI,gCACQ,oCACA,4BAAI4f,GAAYjP,WAG5B,qBAAK3Q,UAAU,kBAAf,SACI,gCACQ,wCACA,4BAAI4f,GAAYjG,wBAOxC,gCACI,uBACA,qBAAK3Z,UAAU,eAAf,SACI,mBAAGA,UAAU,8BAAb,6BAIJ,uBAIkB,oBAAjBke,EACG,mCACA,sBAAKle,UAAU,eAAe2F,GAAG,yCAAjC,UACA,mBAAG3F,UAAU,gBAAb,yCACA,sBAAKA,UAAU,kBAAf,UACQ,qBAAKA,UAAU,kBAAf,SACI,gCACQ,6CACA,4BAAImD,OAAOC,KAAKkU,GAAqBhW,OAAS,EAAIgW,EAAoBvW,YAAc,WAGhG,qBAAKf,UAAU,kBAAf,SACI,gCACQ,4CACA,4BAAImD,OAAOC,KAAKkU,GAAqBhW,OAAS,EAAI,qCAAGgW,EAAoB7V,KAAO,KAA9B,IAAqC6V,EAAoB5V,MAAzD,OAAqE,WAGnI,qBAAK1B,UAAU,kBAAf,SACI,gCACQ,qCACA,4BAAImD,OAAOC,KAAKkU,GAAqBhW,OAAS,EAAIgW,EAAoBnW,cAAgB,WAGlG,qBAAKnB,UAAU,kBAAf,SACI,gCACQ,wCACA,4BAAImD,OAAOC,KAAKkU,GAAqBhW,OAAS,EAAIgW,EAAoB3V,OAAS,mBAOnG,mCACA,sBAAK3B,UAAU,eAAf,UACA,mBAAGA,UAAU,gBAAb,8CACA,sBAAKA,UAAU,uBAAf,UACQ,qBAAKA,UAAU,kBAAf,SACI,gCACQ,6CACA,4BAAIoe,EAAa9c,OAAS,EAAI8c,EAAe,WAGzD,qBAAKpe,UAAU,kBAAf,SACI,gCACQ,6CACA,4BAAIwP,GAAUlO,OAAS,EAAIkO,GAAY,IAAMC,GAAW,WAGpE,qBAAKzP,UAAU,kBAAf,SACI,gCACQ,oDACA,8BACC+e,GAAMzd,OAAS,EAAI,+CAAUyd,GAAV,IAAiB,uBAAjB,OAA6B,yCAAG,0BACnDrP,GAAMpO,OAAS,EAAI,+CAAUoO,GAAV,IAAiB,uBAAjB,OAA6B,iDAI7D,qBAAK1P,UAAU,kBAAf,SACI,gCACQ,iDACA,8BACCse,EAAchd,OAAS,EAAIgd,EAAgB,IAAI,uBAC/CE,GAAKld,OAAS,EAAI,qCAAGkd,GAAH,KAAWniB,GAAX,IAAmBsiB,MAAc,iDAIhE,qBAAK3e,UAAU,kBAAf,SACI,gCACQ,mDACA,0CAAaof,GAAb,IAAyB,uBAAzB,WAAuCF,mBAO/D,uBAAK,uBAGL,sBAAKlf,UAAU,eAAe2F,GAAG,oBAAjC,UACI,mBAAG3F,UAAU,gBAAb,0BACA,sBAAKA,UAAU,kBAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,gCACQ,6CACA,4BAAIyO,KAAWC,YAAYkR,GAAYxQ,eAGnD,qBAAKpP,UAAU,kBAAf,SACI,gCACQ,oCACA,4BAAI4f,GAAYjP,WAG5B,qBAAK3Q,UAAU,kBAAf,SACI,gCACQ,wCACA,4BAAI4f,GAAYjG,qBAOpC,uBAAK,uBAEL,qBAAK3Z,UAAU,eAAf,SACI,mBAAGA,UAAU,gBAAb,gCAKJ,wBAAO2F,GAAG,8BAAV,UACI,gCACI,+BACI,yCACA,uCACA,2CAINxC,OAAOC,KAAKsc,IAAcpe,OAAS,EACrC,6BAGI,gCACK6B,OAAOC,KAAKsc,IAAc7e,QAAO,SAAA4gB,GAAM,OAAI/B,GAAa+B,GAAQ9Q,IAAM,KAAIpP,KAAK,SAACkgB,EAAQvR,EAAOC,GAE5F,IAAIyM,GAAiB,EAIrB,OAHG1M,EAAQ,GAAKwP,GAAavP,EAAID,EAAQ,IAAIK,YAAYV,UAAU,EAAE,KAAO6P,GAAa+B,GAAQlR,YAAYV,UAAU,EAAE,KACrH+M,GAAiB,GAGjB,qBAAiB5c,UAAW4c,EAAiB,oBAAsB,GAAnE,UACI,6BAAK8C,GAAa+B,GAAQhR,OAC1B,6BAAKhC,KAAWC,YAAYgR,GAAa+B,GAAQ/Q,SACjD,6BAAKgP,GAAa+B,GAAQ9Q,QAHrB8Q,WAY7B,uBAAK,uBACL,sBAAKzhB,UAAU,gBAAf,UACI,cAAC,GAAD,CACI8G,MAAM,qBACNlB,YAAY,6BACZ+O,OAAO,qBACPpY,KAAK,OACLsJ,MAAOia,GACPjL,UAAW,IACX/O,SAAU,SAAAC,GAAC,OAAIga,GAAqBha,EAAEC,OAAOH,UACjD,uBAAK,uBAGL,wBAAQtJ,KAAK,SAASmlB,QAAM,IAE5B,cAAC,GAAD,CAAQjb,QAAQ,mBAAmBjF,QA7kBrC,WAElB,IAAImgB,EAAmB,GAKH,oBAAjBzD,GACI/a,OAAOC,KAAKkU,GAAqBhW,OAAS,IAAGqgB,GAAoB,sCACrD,MAAZ3B,KAAiB2B,GAAoB,+BACrCxe,OAAOC,KAAKsc,IAAc7e,QAAO,SAAAuf,GAAS,OAAIV,GAAaU,GAAb,IAAiC,KAAI9e,OAAS,IAAGqgB,GAAoB,0DAGnHvD,EAAa9c,OAAS,IAAGqgB,GAAoB,6BAC7CrD,EAAchd,OAAS,IAAGqgB,GAAoB,8BAC9CnD,GAAKld,OAAS,IAAGqgB,GAAoB,oBAC3B,MAAVtlB,KAAeslB,GAAoB,qBACnChD,GAAQrd,OAAS,IAAGqgB,GAAoB,uBACxCnS,GAAUlO,OAAS,IAAGqgB,GAAoB,kCAC1ClS,GAASnO,OAAS,IAAGqgB,GAAoB,iCACzC5C,GAAMzd,OAAS,IAAGqgB,GAAoB,6BACtCjS,GAAMpO,OAAS,IAAGqgB,GAAoB,6BACtCxe,OAAOC,KAAKsc,IAAc7e,QAAO,SAAAuf,GAAS,OAAIV,GAAaU,GAAb,IAAiC,KAAI9e,OAAS,IAAGqgB,GAAoB,wDACvG,MAAZ3B,KAAiB2B,GAAoB,+BACrCA,EAAiBpZ,MAAM,MAAMjH,OAAS,IAAGqgB,GAAoB,+HAIjEA,EAAiBrgB,OAAS,GACzBsc,EAAY+D,GACZ7N,GAAa,IAGbZ,GAAa,wBA0jBnBiO,GAAe,CACjB,CAACra,MAAO,mBAAoBjB,MAAO,mBACnC,CAACiB,MAAO,eAAgBjB,MAAQ,gBAI9B2b,GAAa,CACnB,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MC/xBeI,GAhCK,WAAO,IAAD,EAEGrhB,oBAAS,GAFZ,oBAEnBshB,EAFmB,KAEXC,EAFW,OAGKvhB,oBAAS,GAHd,oBAGnBwhB,EAHmB,KAGVC,EAHU,KAMzB,KA4BD,SAAwBzf,GACpB,OAAO,IAAI+B,SAAQ,SAACC,EAASC,GAC1B,IAAMC,EAAclC,EAAKmC,oBAAmB,SAAAjG,GACzCgG,IACAF,EAAQ9F,KACR+F,OAhCJH,CAAe9B,IAAMkB,MAAK,SAAAhF,GAClBA,GACEA,EAAKuV,mBAAmBvQ,MAAM,SAAAwe,GAAU,IAAD,KAC7B,OAALA,QAAK,IAALA,GAAA,UAAAA,EAAO/N,cAAP,eAAegO,OAAQJ,GAAW,GAAQA,GAAW,IAChD,OAALG,QAAK,IAALA,GAAA,UAAAA,EAAO/N,cAAP,eAAeiO,QAASH,GAAY,GAAQA,GAAY,SAI1E,MAAOrlB,GACJ6I,QAAQC,IAAI9I,GAGd,OACI,qBAAKqD,UAAU,GAAf,SACG6hB,GAAWE,EAAW,wBACrB/G,MAAM,OACNoH,OAAO,OACPC,IAAI,gGACJC,YAAY,IACZ1gB,MAAO,CAAC2gB,OAAQ,KAChBC,iBAAe,IAAa,gCC1BxC,IAwBM1Z,GAAkB,SAACrB,GAIrB,MAHc,UAAOA,EAAKoB,WAAa,EAAzB,YAA8BpB,EAAKM,UAAnC,YAAgDN,EAAKE,eAG/C,IAFHF,EAAKsB,mBAAmB,QAAS,CAAEC,KAAM,UAAWC,QAAQ,EAAMC,OAAQ,aAOhFuZ,GAjCG,SAAC,GAAa,IAAD,EAAXhlB,EAAW,EAAXA,MACT4R,EAAmF5R,EAAnF4R,UAAWzB,EAAwEnQ,EAAxEmQ,YAAauB,EAA2D1R,EAA3D0R,YAAaH,EAA8CvR,EAA9CuR,UAAWrJ,EAAmClI,EAAnCkI,GAAI6T,EAA+B/b,EAA/B+b,eAAgBD,EAAe9b,EAAf8b,YAE3E,OACI,qBAAKvZ,UAAU,QAAf,SACI,cAAC,KAAD,CAAMqG,GAAE,qBAAgBV,GAAxB,SACA,sBAAK3F,UAAiC,kBAAtBvC,EAAMujB,YAAkC,4BAA6B,kBAArF,UACI,sBAAKhhB,UAAU,aAAf,UACI,4BAAI4N,EAAY7M,YAAc6M,EAAY7M,YAAtC,UAAoDyY,EAAeoH,mBAAnE,aAAoD,EAA4B7f,cACnFwY,GAAe,8CAAgB,sBAAM3X,MAAO,CAAC0Q,MAAQ,OAAtB,kBAChC,4BAAIxJ,GAAekG,EAAUE,YAC7B,4BAAIG,GAAaA,EAAUC,YAAcD,EAAUC,YAAc,iBAErE,sBAAKtP,UAAU,cAAf,UACI,4BAAIyO,KAAWC,YAAYS,EAAYC,UACvC,8BAAID,EAAYwB,IAAhB,YACA,8BAAIxB,EAAYwK,QAAhB,sBCwBd+I,GAAgB,SAACC,EAAQC,GAE3B,OADenU,KAAWoU,SAAWD,EAAQD,GAAWA,EAAW,IAAK,GACxD,MAGLG,GAhDI,SAAC,GAAkB,IAAjBvmB,EAAgB,EAAhBA,KAAMqH,EAAU,EAAVA,KAEvB,OAAQrH,GACJ,IAAK,oCACD,OACI,sBAAKyD,UAAU,wBAAf,UACI,qBAAKA,UAAU,eAAf,SACI,mBAAGA,UAAU,gBAAb,6BAER,kCACI,gCACI,+BACI,sCACA,+CACA,yCACA,uCACA,8CAGR,gCACK4D,GAAQT,OAAOC,KAAKQ,GAAMrC,KAAI,SAAA+F,GAC3B,IAAMyb,EAAsBnf,EAAK0D,EAAO,GAAKob,GAAc9e,EAAK0D,EAAO,GAAG6J,WAAWvN,EAAK0D,GAAM6J,YAAc,IACxG6R,EAAmD,aAAtCD,EAAoBxa,MAAM,KAAK,GAElD,OAAO,+BACH,6BAAKjB,IACL,6BAAKmH,KAAWC,YAAY9K,EAAK0D,GAAM2b,iBACvC,6BAAKrf,EAAK0D,GAAMqS,UAChB,6BAAKlL,KAAWC,YAAY9K,EAAK0D,GAAM6J,cACvC,6BAAO6R,EAAa,IAAMD,MALdzb,gBCgV7B4b,GArVM,SAAC,GAAwB,IAAD,UAArBliB,EAAqB,EAArBA,MAAQgE,EAAa,EAAbA,QACtBhC,EAAW4B,cACXue,EAAaniB,EAAMsa,OAAO3V,GAE1BvJ,EAAYkE,aAAY,SAAAjE,GAAK,OAAIA,EAAMD,aACVK,GAAaL,EAAxCI,QAAwCJ,EAAbK,UAE7BkH,EAAerD,aAAY,SAAAjE,GAAK,OAAIA,EAAMO,mBACxCJ,EAAuDmH,EAAvDnH,QAASK,EAA8C8G,EAA9C9G,aAAqBumB,EAAyBzf,EAAhChH,MAEzBG,EAAmBwD,aAAY,SAAAjE,GAAK,OAAIA,EAAMS,oBACnCumB,EAAiGvmB,EAA1GN,QAAoD8mB,EAAsDxmB,EAAxEA,iBAA8CymB,EAA0BzmB,EAAjCH,MAE3EI,EAAoBuD,aAAY,SAAAjE,GAAK,OAAIA,EAAMU,qBACpCymB,EAA4FzmB,EAArGP,QAAsDinB,EAA+C1mB,EAAlEA,kBAAgD2mB,EAAkB3mB,EAAzBJ,MAE9EK,EAAsBsD,aAAY,SAAAjE,GAAK,OAAIA,EAAMW,uBACtC2mB,EAAoG3mB,EAA7GR,QAA0DonB,EAAmD5mB,EAAxEA,oBAAoD6mB,EAAoB7mB,EAA3BL,MAEpFS,EAAoBkD,aAAY,SAAAjE,GAAK,OAAIA,EAAMe,qBACC0mB,GAAuD1mB,EAArGZ,QAAqGY,EAAlEC,WAErCJ,GAFuGG,EAAjCT,MAEtD2D,aAAY,SAAAjE,GAAK,OAAIA,EAAMY,kBAChC8mB,EAAgC9mB,EAAzCT,QAA+BU,EAAUD,EAAVC,MAGvCwD,oBAAS,wBAAC,uBAAAwC,EAAA,yDACFzG,EADE,gBAEFuI,EAAQiB,KAAK,UAFX,0BAQEpJ,EARF,oDASCsmB,IAAetmB,EAAa8E,OAT7B,6BAUEqB,EAVF,UAUkBH,GAAgBsgB,GAVlC,mCAWEngB,E7BiNiB,yCAAM,WAAOA,GAAP,UAAAE,EAAA,sDACnCF,EAAS,CAACzG,KAAM/D,IADmB,2CAAN,uD6B5NnB,4CAgBP,CAACwK,EAAUhC,EAAMmiB,IAGpB,IAAMa,EAAmB,CAAC,WAAY,cA7CG,EA+CKzjB,mBAASyjB,EAAiB,IA/C/B,oBA+ClCC,EA/CkC,KA+CjBC,EA/CiB,OAgDR3jB,mBAAS,GAhDD,oBAgDlCqb,GAhDkC,KAgDxBC,GAhDwB,KAmDzCnb,qBAAU,WACN,IAAMkD,EAAO+W,eAAe/b,QAAQ,gBACjCgF,IACCsgB,EAAmBrlB,KAAKC,MAAM8E,GAAMqgB,iBACpCpI,GAAahd,KAAKC,MAAM8E,GAAMgY,cAEnC,IAGHlb,qBAAU,WACNia,eAAexG,QAAQ,eAAgBtV,KAAKuV,UAAU,CAClD6P,gBAAkBA,EAClBrI,UAAYA,SAKpB,IAAMuI,GAA4B,WAE3BjnB,EAAMoE,OAAS,EACXpE,EAAM,GAAG0Q,YAAYjM,SAAWwhB,GAC/BngB,EAASgU,MAKbhU,EAASgU,OAkCjB,OACI,qBAAKhX,UAAU,8CAAf,SACSojB,EACG,sBAAKpjB,UAAU,2BAAf,UACA,mBAAGA,UAAU,8BACb,yCAAYojB,EAAqBgB,WAIjC,mCACE5nB,EAkNF,cAAC,GAAD,IAlNa,sBAAKwD,UAAU,0BAAf,UACb,oBAAIA,UAAU,QAAd,SAAuBnD,GAAgBA,EAAaiH,WAEpD,sBAAK9D,UAAU,uBAAf,UACI,4BAAG,mBAAGA,UAAU,mBAChB,4BAAInD,GAAgBA,EAAasE,gBAChC,4BAAItE,GAAgBA,EAAa2jB,aAAe3jB,EAAa2jB,YAAY/e,KACpE,KAAO5E,EAAa2jB,YAAY9e,WAG1C,sBAAK1B,UAAU,uBAAf,UACI,cAAC,KAAD,CAAMqG,GAAE,sCAAiC8c,GAAcnjB,UAAU,qBAAjE,SACI,8BAAG,mBAAGA,UAAU,+BAAhB,kBAGJ,cAAC,KAAD,CAAMqG,GAAE,qCAAgC8c,GAAcnjB,UAAU,oBAAhE,SACI,8BAAG,mBAAGA,UAAU,eAAhB,oBAQR,eAAC,GAAD,CAAa4b,UAAWA,GAAWC,aAAcA,GAAjD,UACQ,sBAAKpL,KAAK,cAAV,UACI,0CACA,2CACA,wBAAQjP,QAAS2iB,GAAjB,mBACA,qDAGJ,sBAAK1T,KAAK,YAAV,UACI,gCAEA,sBAAKzQ,UAAU,eAAf,UACI,mBAAGA,UAAU,gBAAb,wCACA,sBAAKA,UAAU,uBAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,gDACA,4BAAInD,GAAgB4R,KAAWC,YAAY7R,EAAawkB,cAE5D,sBAAKrhB,UAAU,iBAAf,UACI,8CACA,4BAAKnD,GAAgBA,EAAaiS,WAA7B,UAAyCjS,EAAaiS,gBAAtD,aAAyC,EAAuBhL,eAEzE,sBAAK9D,UAAU,iBAAf,UACI,gDACA,4BAAInD,GAAgB,IAAI6K,KAAJ,OAAS7K,QAAT,IAASA,OAAT,EAASA,EAAcykB,aAAaC,0BAE5D,sBAAKvhB,UAAU,iBAAf,UACI,4CACA,4BAAInD,GAAgBA,EAAagH,cAA7B,UAA6ChH,EAAagH,qBAA1D,aAA6C,EAA4BC,SAAW,sBAIpG,qBAAK9D,UAAU,YAEf,sBAAKA,UAAU,eAAf,UACI,mBAAGA,UAAU,gBAAb,iCACA,sBAAKA,UAAU,kBAAf,UACI,sBAAKA,UAAU,2BAAf,UACI,mBAAGA,UAAU,uBACb,gCACI,6CACA,8BAAKnD,GAAgBA,EAAaoE,UAAlC,IAA8CpE,GAAgBA,EAAaqE,kBAGnF,sBAAKlB,UAAU,2BAAf,UACI,mBAAGA,UAAU,4BACb,gCACI,2CACA,4BAAInD,GAAgB,mBAAG0Q,KAAI,wBAAS1Q,EAAaikB,aAAtB,aAAS,EAAoBnV,QAAS,QAAS,KAAtD,SAA8D9O,EAAaikB,gBAGvG,sBAAK9gB,UAAU,2BAAf,UACI,mBAAGA,UAAU,2BACjB,gCACQ,2CACA,4BAAInD,GAAgB,mBAAG0Q,KAAI,iBAAY1Q,EAAagkB,OAAhC,SAA0ChkB,EAAagkB,gBAGnF,sBAAK7gB,UAAU,2BAAf,UACI,mBAAGA,UAAU,0BACb,gCACI,iDACCnD,GAAgBA,EAAa2jB,aAC9B,8BAAI3jB,EAAa2jB,YAAYC,MAAM,uBAClC5jB,EAAa2jB,YAAYE,MAAM,uBAC/B7jB,EAAa2jB,YAAY/e,KAF1B,KAEkC5E,EAAa2jB,YAAY9e,MAF3D,IAEmE7E,EAAa2jB,YAAYzR,6BAOhH,gCACI,uBACA,sBAAK/O,UAAU,eAAf,UACI,mBAAGA,UAAU,gBAAb,+BACA,sBAAKA,UAAU,uBAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,+CACA,mCAAI8jB,QAAJ,IAAIA,GAAJ,UAAIA,EAAsBO,mBAA1B,aAAI,EAAmC7V,eAE3C,sBAAKxO,UAAU,iBAAf,UACI,kDACA,mCAAK8jB,QAAL,IAAKA,GAAL,UAAKA,EAAsBO,mBAA3B,aAAK,EAAmCC,mBAIpD,uBAAK,uBAAK,uBACTR,GAAwBA,EAAqBS,UAAY,cAAC,GAAD,CAAWhoB,KAAK,2BAA2ByU,UAAW8S,EAAqBS,YAAe,6BACpJ,uBAAK,uBAAK,uBAAK,uBACdT,GAAwBA,EAAqBS,UAAY,cAAC,GAAD,CAAYhoB,KAAK,oCAAoCqH,KAAMkgB,EAAqBS,YAAe,gCAE7J,8BACKR,EAAwB,cAAC,GAAD,IACrB,mCACC7mB,EACG,qCAECA,EAAMoE,OAAS,GAAKpE,EAAM,GAAG0Q,YAAYjM,SAAWwhB,EAAagB,KAA6B,6BAC3F,oBAAGnkB,UAAU,mBAAb,UAAiC9C,EAAMoE,OAAvC,kBACA,qBAAKtB,UAAU,kBAAf,SACK9C,EACI4Q,MAAK,SAAC5K,EAAE6K,GAAH,OAASA,EAAEiB,UAAUE,SAAWhM,EAAE8L,UAAUE,YACjD3N,KAAI,SAAApD,GAAI,OACT,cAAC,GAAD,CAAwBA,KAAMA,GAAfA,EAAKwH,YAKhC,mCACI,mBAAG3F,UAAU,mBAAb,iCAMhB,8BACI,sBAAKA,UAAU,gBAAf,UACA,cAAC,GAAD,CACI8G,MAAM,8BACNlB,YAAY,GACZ+O,OAAO,4BACPpY,KAAK,SACL8U,QAAS2S,EACTne,MAAOoe,EACPne,SAAU,SAAAC,GAAC,OAAIme,EAAmBne,EAAEC,OAAOH,UAG/C,cAAC,GAAD,CAAQY,QAAQ,OAAOjF,QAhMjB,W7BgFH,IAACyC,E6B/EL,aAApBggB,IACIX,GAAuBA,EAAoBhiB,OAAS,GAAKgiB,EAAoB,GAApB,qBAAoDzmB,EAAa8E,QAGzHqB,G7B2EoBiB,E6B3ESpH,EAAa8E,O7B2EvB,yCAAoB,WAAOqB,GAAP,0BAAAE,EAAA,6DACnDF,EAAS,CACLzG,KAAMlE,IAFyC,SAK7CgM,GAAe9B,IAL8B,iCAS5BA,GAAKwR,mBATuB,aAS5B,EAAkBC,mBATU,gBAS5CE,EAT4C,EAS5CA,OAGHkC,EAAQ5T,GAAGc,WAAW,aAGjB,OAAN4Q,QAAM,IAANA,GAAA,UAAAA,EAAQvE,oBAAR,mBAAsBC,cAAtB,eAA8BtO,QAAS,IACtC8U,EAAQA,EAAME,MAAM,oBAAqB,KAAMpC,EAAOvE,aAAaC,UAIvEwG,EAAQA,EAAME,MAAM,qBAAqB,KAAKrS,IAI7CT,MACIC,MAAM,SAAAmT,GACH,IAAIC,EAAS,GACTD,EAAKL,SAAS,SAAAhT,GAAG,OAAIsT,EAAO5Q,KAAK1C,EAAIK,WAEzCZ,EAAS,CACLzG,KAAMjE,EACNoE,QAASma,OAGhB9S,OAAO,SAAAC,GACJhB,EAAS,CACLzG,KAAMhE,EACNmE,QAASsH,OArC8B,4CAApB,yD6BvEJ,eAApBigB,IACIR,GAAwBA,EAAqBniB,OAAS,GAAKmiB,EAAqB,GAArB,qBAAqD5mB,EAAa8E,QAG5HqB,E7B4JoB,SAACiB,GAAD,gDAAoB,WAAOjB,EAAUC,GAAjB,UAAAC,EAAA,sDACpDF,EAAS,CACLzG,KAAM9D,IAGV,IAEI+J,GAAGc,WAAW,UACbgT,MAAM,qBAAqB,KAAKrS,GAChCT,MACIC,MAAM,SAAAmT,GACH,IAAIC,EAAS,GACTD,EAAKL,SAAS,SAAAhT,GACVsT,EAAO5Q,KAAP,2BAAgB1C,EAAIK,QAApB,IAA4B+B,GAAIpC,EAAIoC,SAG5C3C,EAAS,CACLzG,KAAM7D,EACNgE,QAASma,OAGhB9S,OAAO,SAAAC,GACJhB,EAAS,CACLzG,KAAM5D,EACN+D,QAASsH,OAGvB,MAAOrH,GACLqG,EAAS,CACLzG,KAAM5D,EACN+D,QAASC,IA9BmC,2CAApB,wD6B5JX6nB,CAAqB3nB,EAAa8E,UAI5B,iBAApBsiB,IACIL,GAA0BA,EAAuBtiB,OAAS,GAAKsiB,EAAuB,GAAvB,qBAAuD/mB,EAAa8E,QAGlIqB,E7BqGsB,SAACiB,GAAD,gDAAoB,WAAOjB,GAAP,0BAAAE,EAAA,6DACtDF,EAAS,CACLzG,KAAM1D,IAF4C,SAKhDwL,GAAe9B,IALiC,iCAS/BA,GAAKwR,mBAT0B,aAS/B,EAAkBC,mBATa,gBAS/CE,EAT+C,EAS/CA,OAGHkC,EAAQ5T,GAAGc,WAAW,gBAGjB,OAAN4Q,QAAM,IAANA,GAAA,UAAAA,EAAQvE,oBAAR,mBAAsBC,cAAtB,eAA8BtO,QAAS,IACtC8U,EAAQA,EAAME,MAAM,oBAAqB,KAAMpC,EAAOvE,aAAaC,UAIvEwG,EAAQA,EAAME,MAAM,qBAAqB,KAAKrS,IAI7CT,MACIC,MAAM,SAAAmT,GACH,IAAIC,EAAS,GACTD,EAAKL,SAAS,SAAAhT,GAAG,OAAIsT,EAAO5Q,KAAK1C,EAAIK,WAEzCZ,EAAS,CACLzG,KAAMzD,EACN4D,QAASma,OAGhB9S,OAAO,SAAAC,GACJhB,EAAS,CACLzG,KAAMxD,EACN2D,QAASsH,OArCiC,4CAApB,sD6BrGbygB,CAAuB5nB,EAAa8E,WA2K6B+E,KAAI,eAAUud,KACxE,qBAAKjkB,UAAU,kBAGM,aAApBikB,GACG,mCACCZ,EAA0B,cAAC,GAAD,IACzBE,EAAwB,wCAAWA,EAAsBa,QACvD,mCACCd,GAAuBA,EAAoBhiB,OAAS,EACjD,cAAC,GAAD,CAAkBsC,KAAM0f,EAAsB/mB,KAAK,2BAEnD,oBAAGyD,UAAU,mBAAb,cAAiC,mBAAGA,UAAU,8BAA9C,iCAQS,eAApBikB,GACG,mCACCT,EAA2B,cAAC,GAAD,IAC1BE,EAAiB,wCAAWA,EAAeU,QACzC,mCACCX,GAAwBA,EAAqBniB,OAAS,EACnD,cAAC,GAAD,CAAkBsC,KAAM6f,EAAuBlnB,KAAK,4BAEpD,oBAAGyD,UAAU,mBAAb,cAAiC,mBAAGA,UAAU,8BAA9C,mCAQS,iBAApBikB,GACG,mCACCN,EAA6B,cAAC,GAAD,IAC5BE,EAAmB,wCAAWA,EAAiBO,QAC7C,mCACCR,GAA0BA,EAAuBtiB,OAAS,EACvD,cAAC,GAAD,CAAkBsC,KAAMggB,EAAyBrnB,KAAK,8BAEtD,oBAAGyD,UAAU,mBAAb,cAAiC,mBAAGA,UAAU,8BAA9C,wDCrT7B0kB,GA5BQ,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,QAAS7d,EAA4B,EAA5BA,MAAOzK,EAAqB,EAArBA,MAAOqiB,EAAc,EAAdA,SAW5C,OACI,sBAAK1e,UAAU,kBAAf,UACI,6BAAK8G,IACL,sBAAK9G,UAAU,oCAAf,UACK2kB,EAAQpjB,KAAI,SAAA6T,GAAM,OACnB,8BACI,wBAAOX,QAAQ,SAAf,UACI,uBAAO3O,SAAU,SAAAC,GAAC,OAfrB,SAAAA,GACb,IAAM6e,EAAgB7e,EAAEC,OAAOH,MACzBgf,EAAgB9e,EAAEC,OAAO6P,QAE/B6I,EAAS,2BAAIriB,GAAL,mBAAauoB,EAAiBC,KAWA/e,CAASC,IAAIxJ,KAAK,WAAWkU,KAAM2E,EAAQvP,MAAOuP,IACxE,+BAAOA,QAHf,UAAaA,EAAb,iBAMA,mBAAGpV,UAAU,0BAAb,SAAwCmD,OAAOC,KAAK/G,GAAOkF,KAAI,SAAA6T,GAAM,OAAI/Y,EAAM+Y,GAAU,iCAAuCA,EAAvC,gBAAcA,EAAd,mBAAyD,qCC0ElK,SAAS/Q,GAAe9B,GACpB,OAAO,IAAI+B,SAAQ,SAACC,EAASC,GAC1B,IAAMC,EAAclC,EAAKmC,oBAAmB,SAAAjG,GACzCgG,IACAF,EAAQ9F,KACR+F,MCvFV,IA+VesgB,GA/VG,WAEd,IAAM9hB,EAAW4B,cAFG,EAIctE,aAAY,SAAAjE,GAAK,OAAIA,EAAMiC,iBAA5CC,GAJG,EAIZ/B,QAJY,EAIH+B,OAJG,KAII5B,MAC6D2D,aAAY,SAAAjE,GAAK,OAAIA,EAAMmC,uBAA/FumB,EALG,EAKZvoB,QAA6CwoB,GALjC,EAKmBvmB,KALnB,EAKyB9B,OAA4Be,EALrD,EAKqDA,QAEnEgB,GACU,EADVA,GAEU,EAFVA,EAGQ,GAHRA,EAIQ,GAJRA,EAKS,GALTA,EAMQ,GANRA,EAOY,GAPZA,EAQY,GARZA,EASI,SATJA,EAUc,GAVdA,GAWc,EAXdA,GAYe,EAZfA,EAakB,GAblBA,EAcsB,CACpB8Q,UAAY,GACZC,SAAY,GACZC,MAAO,GACPuV,IAAK,SACLC,cAAe,IA1BH,EA+Ba3kB,mBAAS7B,GA/BtB,oBA+BbuU,EA/Ba,KA+BHC,EA/BG,OAgCa3S,mBAAS7B,GAhCtB,oBAgCbmV,EAhCa,KAgCHC,EAhCG,OAiCYvT,mBAAS7B,GAjCrB,oBAiCbif,EAjCa,KAiCHC,EAjCG,OAqCYrd,mBAAS7B,GArCrB,oBAqCbymB,EArCa,KAqCHC,EArCG,OAsCa7kB,mBAAS7B,GAtCtB,oBAsCb8Q,EAtCa,KAsCHqP,EAtCG,OAuCWte,mBAAS7B,GAvCpB,oBAuCb+Q,EAvCa,KAuCJqP,EAvCI,OAwCoBve,mBAAS7B,GAxC7B,oBAwCb2mB,EAxCa,KAwCCC,EAxCD,OAyCoB/kB,mBAAS7B,GAzC7B,qBAyCb6mB,GAzCa,MAyCCC,GAzCD,SA0CIjlB,mBAAS7B,GA1Cb,sBA0Cb6Q,GA1Ca,MA0CPkW,GA1CO,SA6CuBllB,mBAAS7B,GA7ChC,sBA6CbwmB,GA7Ca,MA6CEQ,GA7CF,SA+CsBnlB,mBAAS7B,GA/C/B,sBA+CbinB,GA/Ca,MA+CEC,GA/CF,SAgDwBrlB,mBAAS7B,GAhDjC,sBAgDbmnB,GAhDa,gBAiDgCtlB,mBAAS7B,IAjDzC,sBAiDbonB,GAjDa,gBAkDwCvlB,mBAAS7B,IAlDjD,sBAkDbqnB,GAlDa,MAkDWC,GAlDX,MA0DdC,GAAmB,SAAAlgB,GAErBA,EAAEuO,iBAEF,IAAIqN,EAAmB,GAavB,GAVG0D,IAAiBE,KAAc5D,GAAoB,IAAMuE,GAAkB,OAG3Eb,EAAa/jB,OAAS,GAAKikB,GAAajkB,OAAS,KAAGqgB,GAAmB,IAAMwE,GAAY,MAGhF,QAAT5W,IAAkB2V,GAAc5jB,OAAS,IAAGqgB,GAAoB,IAAKyE,GAAwB,MAI7FzE,EAAiBrgB,OAAS,EAGzB,OAFAsc,EAAY+D,QACZ7N,GAAa,GAKjBZ,GAAa,IAmCXmT,GAAe,WA9BjBjB,EAAY1mB,GACZmgB,EAAangB,GACbogB,EAAYpgB,GACZ4mB,EAAgB5mB,GAChB8mB,GAAgB9mB,GAChB+mB,GAAQ/mB,GACRgnB,GAAkBhnB,GA0BlBsE,EAAS,CACLzG,KAAM,6BAKdmE,qBAAU,WACN4lB,OAAOC,SAAS,EAAG,GACnBvjB,EDjIwB,yCAAM,WAAOA,GAAP,gBAAAE,EAAA,6DAClCF,EAAS,CACLzG,KAAMb,KAFwB,SAK5B2I,GAAe9B,IALa,iCAQXA,GAAKwR,mBARM,aAQX,EAAkBC,mBARP,iBAQ3BE,OAGIgO,MAXuB,wBAY9Blf,EAAS,CACLzG,KAAMX,GACNc,QAAS,mBAdiB,2BAoBtB8F,GAAGc,WAAW,SAKpB2T,YAAW,SAAAL,GACb,IAAIC,EAAS,GACTD,EAAKL,SAAQ,SAAAhT,GAAG,OAAIsT,EAAO5Q,KAAP,2BAAgB1C,EAAIK,QAApB,IAA4B+B,GAAKpC,EAAIoC,SACzD3C,EAAS,CACLzG,KAAMZ,GACNe,QAASma,OAElB,SAAA7S,GACChB,EAAS,CACLzG,KAAMX,GACNc,QAASsH,EAAIwiB,YAnCa,4CAAN,yDCkIzB,IAiBH,OAFAhhB,QAAQC,IAAIqgB,IAGR,sBAAKngB,GAAG,aAAa3F,UAAU,gCAA/B,UACKiT,GAAa,cAAC,GAAD,CAAgB/K,UAAU,WAAWC,IAAI,6CAA6CC,aAhDvF,SAAArC,GACjBmN,GAAa,GAEb,IDhEqBuT,ECgEfhoB,EAAO,CACTiR,MAAOyV,EACP3V,YACAC,WACAmE,SAAWyR,EACX9V,QACAI,aAAe,CACXC,OAAkB,QAATL,GAAiBpM,OAAOC,KAAK8hB,IAAerkB,QAAO,SAAA0S,GAAC,OAAI2R,GAAc3R,MAAIhS,KAAI,SAAAgS,GAAC,OAAIA,KAAM,KAI1GvQ,GD3EqByjB,EC2EEhoB,ED3EK,yCAAI,WAAOuE,GAAP,kBAAAE,EAAA,6DACpCF,EAAS,CACLzG,KAAMjB,KAIJorB,EAAa9jB,GAAU+jB,cAAc,cANP,SAS9BtiB,GAAe9B,IATe,iCAYbA,GAAKwR,mBAZQ,aAYb,EAAkBC,mBAZL,iBAY7BE,OAGIgO,MAfyB,wBAgBhClf,EAAS,CACLzG,KAAMf,GACNkB,QAAS,mBAlBmB,2BAwBpCgqB,EAAWD,GACNhjB,MAAK,SAAAmjB,GAEJ5jB,EAAS,CACPzG,KAAMhB,GACNmB,QAASkqB,OAGZ7iB,OAAM,SAAApH,GACHqG,EAAS,CACLzG,KAAMf,GACNkB,QAASC,EAAMkqB,aAnCS,4CAAJ,yDC6GwGxe,cAAe,kBAAK6K,GAAa,MAChKW,GAAa,cAAC,GAAD,CAAgB3L,UAAU,QAAQC,IAAKwV,EAAUvV,aAAc,kBAAM0L,GAAa,MAEhG,cAAC,GAAD,CAAWhN,MAAM,aAAaD,SAAS,gCAAgCE,KAAM,KAC7E,sBAAK/G,UAAU,uBAAf,UAEI,cAAC,GAAD,CACI4D,KAAMrF,EACNhC,KAAK,sBACL0P,YAxGY,WACxB2Z,IAAkBD,KAwGNzZ,cA3BU,SAACnG,KA4BXoG,gBAnBY,SAACpG,GACzBP,QAAQC,IAAIM,MAqBJ,sBAAKJ,GAAG,yBAAR,UACKggB,GACG,uBAAMhgB,GAAG,cAAc3F,UAAU,qBAAqBqU,SAAU4R,GAAhE,UACI,qBAAKjmB,UAAU,eAAf,SACI,mBAAGA,UAAU,gBAAb,iCAIJ,uBAAK,uBACD,cAAC,GAAD,CACI8G,MAAM,aACNlB,YAAY,wBACZ+O,OAAO,iBACPpY,KAAK,OACLsJ,MAAO2J,EACPoF,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAI8Y,EAAa9Y,EAAEC,OAAOH,QACrCgP,UAAW,KAEf,cAAC,GAAD,CACI/N,MAAM,YACNlB,YAAY,uBACZ+O,OAAO,iBACPpY,KAAK,OACLsJ,MAAO4J,EACPmF,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAI+Y,EAAY/Y,EAAEC,OAAOH,QACpCgP,UAAW,KAEf,cAAC,GAAD,CACI/N,MAAM,SACNlB,YAAY,mCACZ+O,OAAO,iBACPpY,KAAK,QACLsJ,MAAOsf,EACPvQ,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAIqf,EAAYrf,EAAEC,OAAOH,QACpCgP,UAAW,KACf,cAAC,GAAD,CACI/N,MAAM,WACNlB,YAAY,8BACZ+O,OAAO,kBACPpY,KAAK,WACLsJ,MAAOwf,EACPzQ,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAIuf,EAAgBvf,EAAEC,OAAOH,UAC5C,cAAC,GAAD,CACIiB,MAAM,mBACNlB,YAAY,8BACZ+O,OAAO,kBACPpY,KAAK,WACLsJ,MAAO0f,GACP3Q,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAIyf,GAAgBzf,EAAEC,OAAOH,UAG5C,cAAC,GAAD,CACIiB,MAAM,OACN6N,OAAO,gBACPpY,KAAK,SACL8U,QAASyV,GACTjhB,MAAO0J,GACPqF,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAI0f,GAAQ1f,EAAEC,OAAOH,UAE1B,QAAT0J,IACG,qBAAKvP,UAAU,OAAO2F,GAAG,0BAAzB,SACA,cAAC,GAAD,CAAgBtJ,MAAO6oB,GAAexG,SAAUgH,GAAmBf,QAASnD,GAAY1a,MAAM,8CAIlG,uBACA,cAAC,GAAD,CAAQL,QAAQ,WAChB,uBAAK,uBAAK,uBAAK,uBAAK,uBACnBse,EAAuB,cAAC,GAAD,IACpB,qCACKC,GAAsB,sCACtBtnB,GACG,sBAAKsC,UAAU,cAAf,UACA,mBAAGA,UAAU,wBACb,kEACA,wBAAQ4B,MAAO,CAAC+E,MAAM,SAAUnF,QAAS6kB,GAAzC,8BAQpB,wBAIH,qBAAKzkB,MAAO,CAACoZ,MAAO,QACpB6K,GACG,uBAAM7lB,UAAU,qBAAqBqU,SAAU4R,GAA/C,UACI,qBAAKjmB,UAAU,eAAf,SACI,oBAAGA,UAAU,gBAAb,2BACmB8lB,GAAmBtW,UAAY,IAAMsW,GAAmBrW,cAG/E,uBAAK,uBACD,cAAC,GAAD,CACI3I,MAAM,aACNlB,YAAY,wBACZ+O,OAAO,iBACPpY,KAAK,OACLsJ,MAAOkgB,GAAuBvW,UAC9B1J,SAAU,SAAAC,GAAC,OAAIigB,GAA0B,aAACD,2BAA0BhgB,EAAEC,OAAOH,SAC7EgP,UAAW,KAEf,cAAC,GAAD,CACI/N,MAAM,YACNlB,YAAY,uBACZ+O,OAAO,iBACPpY,KAAK,OACLsJ,MAAO4J,EACP3J,SAAU,SAAAC,GAAC,OAAI+Y,EAAY/Y,EAAEC,OAAOH,QACpCgP,UAAW,KAEf,cAAC,GAAD,CACI/N,MAAM,SACNlB,YAAY,mCACZ+O,OAAO,iBACPpY,KAAK,QACLsJ,MAAOsf,EACPrf,SAAU,SAAAC,GAAC,OAAIqf,EAAYrf,EAAEC,OAAOH,QACpCgP,UAAW,KACf,cAAC,GAAD,CACI/N,MAAM,WACNlB,YAAY,8BACZ+O,OAAO,kBACPpY,KAAK,WACLsJ,MAAOwf,EACPzQ,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAIuf,EAAgBvf,EAAEC,OAAOH,UAC5C,cAAC,GAAD,CACIiB,MAAM,mBACNlB,YAAY,8BACZ+O,OAAO,kBACPpY,KAAK,WACLsJ,MAAO0f,GACP3Q,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAIyf,GAAgBzf,EAAEC,OAAOH,UAG5C,cAAC,GAAD,CACIiB,MAAM,OACN6N,OAAO,gBACPpY,KAAK,SACL8U,QAASyV,GACTjhB,MAAO0J,GACPqF,UAAU,EACV9O,SAAU,SAAAC,GAAC,OAAI0f,GAAQ1f,EAAEC,OAAOH,UAE1B,QAAT0J,IACG,qBAAKvP,UAAU,OAAO2F,GAAG,0BAAzB,SACA,cAAC,GAAD,CAAgBtJ,MAAO6oB,GAAexG,SAAUgH,GAAmBf,QAASnD,GAAY1a,MAAM,8CAIlG,uBACA,cAAC,GAAD,CAAQL,QAAQ,WAChB,uBAAK,uBAAK,uBAAK,uBAAK,uBACnBse,EAAuB,cAAC,GAAD,IACpB,qCACKC,GAAsB,sCACtBtnB,GACG,sBAAKsC,UAAU,cAAf,UACA,mBAAGA,UAAU,wBACb,kEACA,wBAAQ4B,MAAO,CAAC+E,MAAM,SAAUnF,QAAS6kB,GAAzC,8BAQpB,kCAalBS,GAAQ,CAAC,QAAS,SAAU,OAE5BV,GAAqB,oLAErBF,GAAkB,6BAClBC,GAAY,8CACZ3E,GAAa,CACf,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MCxaJ,IA6BeuF,GA7Ba,WAExB,IAAMvpB,EAAc8C,aAAY,SAAAjE,GAAK,OAAIA,EAAMmB,eACvChB,EAA2BgB,EAA3BhB,QAASkB,EAAkBF,EAAlBE,QAASD,EAASD,EAATC,MAE1B,OACI,qBAAKuC,UAAU,mCAAf,SACKxD,EAAW,cAAC,GAAD,IACR,mCACCkB,EACG,sBAAKsC,UAAU,cAAf,UACI,mBAAGA,UAAU,wBACb,gDAAmBvC,EAAMmQ,YAAY7M,YAArC,iCACI,cAAC,KAAD,CAAMsF,GAAE,qBAAgB5I,EAAMkI,IAAM3F,UAAU,cAA9C,yBACCvC,EAAMmQ,YAAYjM,QAAU,cAAC,KAAD,CAAM0E,GAAE,wBAAmB5I,EAAMmQ,YAAYjM,QAAU3B,UAAU,cAAjE,+BAIrC,sBAAKA,UAAU,cAAf,UACI,mBAAGA,UAAU,wBACb,mGCkBTgnB,GAtCY,WAEvB,IAAM9oB,EAAaoC,aAAY,SAAAjE,GAAK,OAAIA,EAAM6B,cACtC1B,EAA0B0B,EAA1B1B,QAASkB,EAAiBQ,EAAjBR,QAASS,EAAQD,EAARC,KAE1B,OACI,qBAAK6B,UAAU,0BAAf,SACKxD,EAAW,cAAC,GAAD,IACR,mCACCkB,EACG,sBAAKsC,UAAU,cAAf,UACI,mBAAGA,UAAU,wBACZ7B,EAAKyP,YACF,qCACA,+CAAkBzP,EAAKyP,YAAY7M,YAAnC,iCACA,cAAC,KAAD,CAAMsF,GAAE,oBAAelI,EAAKwH,IAAM3F,UAAU,cAA5C,wBACA,cAAC,KAAD,CAAMqG,GAAE,wBAAmBlI,EAAKyP,YAAYjM,QAAU3B,UAAU,cAAhE,+BAGA,qCACA,8EACA,cAAC,KAAD,CAAMqG,GAAE,oBAAelI,EAAKwH,IAAM3F,UAAU,cAA5C,8BAMR,sBAAKA,UAAU,cAAf,UACI,mBAAGA,UAAU,wBACb,kGCkHlBinB,GAAa,CACf,WACA,WACA,SACA,OACA,aACA,QACA,UACA,MACA,SACA,gBACA,qBACA,mBAKWC,GAnJO,SAAC,GAAgB,EAAdliB,QAAe,IAC9BhC,EAAW4B,cAGX5G,GADasC,aAAa,SAAAjE,GAAK,OAAIA,EAAMD,aAAxCK,SACsB6D,aAAY,SAAAjE,GAAK,OAAIA,EAAM2B,yBAJrB,EAKiBsC,aAAY,SAAAjE,GAAK,OAAIA,EAAMsB,cAAvEnB,EAL2B,EAK3BA,QAASoB,EALkB,EAKlBA,OAAQjB,EALU,EAKVA,MAAOY,EALG,EAKHA,gBALG,GAMjBS,EAAVC,MAG4BsC,mBAAS4C,OAAOC,KAAK+F,IAAe,KATrC,oBAS5BiR,EAT4B,KAShBC,EATgB,OAUG9Z,mBAAS4I,GAAa,OAVzB,oBAU5BmR,EAV4B,KAUfC,EAVe,KAcnC7Z,qBAAU,WACN,IAAMkD,EAAO+W,eAAe/b,QAAQ,kBACjCgF,IACCyW,EAAcxb,KAAKC,MAAM8E,GAAMwW,YAC/BG,EAAe,CACXlR,KAAO,IAAI3B,KAAK7I,KAAKC,MAAM8E,GAAM0W,YAAYjR,MAC7ChD,GAAK,IAAIqB,KAAK7I,KAAKC,MAAM8E,GAAM0W,YAAYjU,OAKhDzI,GAAUA,EAAO0D,OAAS,GAGrB0B,EAASoa,GADNxZ,EACgBuF,GAActK,KAAKC,MAAM8E,GAAMwW,YAG/BjR,GAAciR,OAG9C,IAGC1Z,qBAAU,WACNia,eAAexG,QAAQ,iBAAkBtV,KAAKuV,UAAU,CACpDgG,WAAaA,EACbE,YAAaA,QAKrB,IAuBMS,EAAiB,WACnB/X,EAASoa,GAAU9C,EAAa,EAAK1c,EAAOA,EAAO0D,OAAS,GAAG0N,aAInE,OACI,sBAAKrJ,GAAG,kBAAkB3F,UAAU,0BAApC,UACI,cAAC,GAAD,CAAW8G,MAAM,cAAcD,SAAS,8BACxC,sBAAK7G,UAAU,gBAAf,UACA,cAAC,GAAD,CACY8G,MAAM,aACNlB,YAAY,GACZ+O,OAAO,0BACPpY,KAAK,SACL8U,QAASlO,OAAOC,KAAK+F,IACrBtD,MAAOuU,EACPtU,SAAU,SAAAC,GAAC,OAvCJ3B,EAuC0B2B,EAAEC,OAAOH,MAtC1DwU,EAAcjW,GACdmW,EAAepR,GAAc/E,SAC7BpB,EAASoa,GAAUjU,GAAc/E,KAHX,IAACA,KAyCnB,oBAAGpE,UAAU,mBAAb,UACK4I,GAAmB0R,EAAYjR,MADpC,MAC8CT,GAAmB0R,EAAYjU,UAG7E,qBAAKrG,UAAU,kBAAf,SACKxD,IAAYG,EAAS,cAAC,GAAD,IAClB,mCACCA,EAAS,oBAAGqD,UAAU,mBAAb,cAAiC,mBAAGA,UAAU,8BAA9C,qCACNpC,GAAUA,EAAO0D,OAAS,EACtB,qCACA,sBAAKtB,UAAU,yBAAf,UACI,oBAAGA,UAAU,mBAAb,mBAAuCpC,EAAO0D,OAA9C,aACA,yBAAQE,QA9CP,WACzB,IACMqL,EADW,IAAIqM,GAAgBtb,EAAQqpB,GAAY,cAC9Bna,eACrBC,EAAU,IAAIC,KAAK,CAACH,GAAY,CAAEtQ,KAAM,aACxC0Q,EAAUC,IAAIC,gBAAgBJ,GAC9BK,EAAgBC,SAASC,cAAc,KAE7CF,EAAcG,KAAON,EACrBG,EAAcI,SAAW,wBACzBJ,EAAcK,QAEdC,YAAW,WACPR,IAAIS,gBAAgBV,KACrB,MAiCqB,6BAAuD,mBAAGjN,UAAU,oBAApE,UAEJ,uBACCpC,EACAkQ,MAAK,SAAC5K,EAAE6K,GAAH,OAASA,EAAEiB,UAAUE,SAAWhM,EAAE8L,UAAUE,YACjD3N,KAAI,SAAA9D,GAAK,OAAI,cAAC,GAAD,CAAWA,MAAOA,GAAYA,EAAMkI,OAElD,uBACA,qBAAK3F,UAAU,qBAAf,SACCzC,EACW,wBAAQyC,UAAWzC,EAAkB,WAAa,GAAIqE,MAAO,CAACuZ,OAAQ,QAAS3Z,QAASuZ,EAAxF,4BAIA,wBAAQnZ,MAAO,CAACuZ,OAAQ,QAAS3Z,QAASuZ,EAA1C,4BAOZ,oBAAG/a,UAAU,mBAAb,cAAiC,mBAAGA,UAAU,8BAA9C,wDCqGtB8I,GAAiB,SAACrB,GAGpB,MAFc,UAAOA,EAAKoB,WAAa,EAAzB,YAA8BpB,EAAKM,UAAnC,YAAgDN,EAAKE,eAE/C,IADHF,EAAKsB,mBAAmB,QAAS,CAAEC,KAAM,UAAWC,QAAQ,EAAMC,OAAQ,aAchFie,OA5OO,SAAC,GAAe,IAAD,0BAAZnmB,EAAY,EAAZA,MACfgC,EAAW4B,cACXqK,EAAUjO,EAAMsa,OAAO3V,GAGrBlJ,EAAa6D,aAAa,SAAAjE,GAAK,OAAIA,EAAMD,aAAzCK,SALyB,EAOsB6D,aAAa,SAAAjE,GAAK,OAAIA,EAAMyB,qBAAtCnB,GAPZ,EAOzBH,QAPyB,EAOGkB,QAPH,EAOYf,OAPZ,EAQP2D,aAAY,SAAAjE,GAAK,OAAIA,EAAMwB,gBAA7CrB,EARyB,EAQzBA,QAASiB,EARgB,EAQhBA,MAIjBiD,qBAAU,WACNsC,EAASsa,GAAgBrO,MAC3B,CAACA,IAEH,IAuBQrB,EAAuHnQ,EAAvHmQ,YAAayB,EAA0G5R,EAA1G4R,UAAWL,EAA+FvR,EAA/FuR,UAAgB4K,GAA+Enc,EAApFkI,GAAoFlI,EAA/Emc,mBAAmBzK,EAA4D1R,EAA5D0R,YAAa4R,EAA+CtjB,EAA/CsjB,SAAUvH,EAAqC/b,EAArC+b,eAAgBC,EAAqBhc,EAArBgc,WAAYC,EAASjc,EAATic,MAEtH,OACI,sBAAK/T,GAAG,kBAAkB3F,UAAU,wCAApC,UACI,cAAC,GAAD,CAAW8G,MAAM,aAAaD,SAAS,gBAAgBE,KAAM,CAAC,UAAWE,QA3B3D,eA4Bd,uBAAK,uBACJzK,EAAW,cAAC,GAAD,IAAa2G,OAAOC,KAAK3F,GAAO6D,OAAS,EACjD,qCACA,sBAAKtB,UAAU,eAAf,UACI,sBAAKA,UAAU,OAAf,UACCvC,EAAM8b,YAAc,oBAAGvZ,UAAU,gBAAb,0BAA0C,sBAAM4B,MAAO,CAAC0Q,MAAO,OAArB,kBAA4C,uCAC9G,oBAAGtS,UAAU,gBAAb,wBAA0CvC,EAAMkI,GAAhD,UAEA,sBAAK3F,UAAU,kBAAf,UACG,sBAAKA,UAAU,2BAAf,UACI,mBAAGA,UAAU,iBACb,gCACQ,6CACA,4BAAI4N,EAAY7M,YAAc6M,EAAY7M,YAAtC,UAAoDtD,EAAM+b,sBAA1D,iBAAoD,EAAsBoH,mBAA1E,aAAoD,EAAmC7f,oBAGvG,qBAAKf,UAAU,iBAAf,SACI,gCACQ,0CACA,4BAAI4N,GAAeA,EAAYzM,cAAgByM,EAAYzM,cAAgB,mBAGvF,sBAAKnB,UAAU,2BAAf,UACI,mBAAGA,UAAU,qBACb,gCACQ,6CACA,4BAAIqP,EAAUC,YAAcD,EAAUC,YAAc,oBAGhE,qBAAKtP,UAAU,iBAAf,SACI,gCACQ,6CACA,4BAAI8I,GAAekG,EAAUE,iBAGzC,sBAAKlP,UAAU,2BAAf,UACI,mBAAGA,UAAU,0BACb,gCACQ,mDACA,4BAAI4Z,UAGhB,qBAAK5Z,UAAU,iBAAf,SACI,gCACQ,oCACA,4BAAIvC,EAAMwjB,QAAUxjB,EAAMwjB,QAAU,iBAMpD,uBAAK,uBAEL,sBAAKjhB,UAAU,eAAe2F,GAAG,oBAAjC,UACY,mBAAG3F,UAAU,gBAAb,2BACA,sBAAKA,UAAU,kBAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,gCACQ,6CACA,4BAAIyO,KAAWC,YAAYS,EAAYC,eAGnD,qBAAKpP,UAAU,kBAAf,SACI,gCACQ,oCACA,4BAAImP,EAAYwB,WAG5B,qBAAK3Q,UAAU,kBAAf,SACI,gCACQ,wCACA,4BAAImP,EAAYwK,qBAM5C,uBAAK,uBAEL,cAAC,GAAD,CAAkBpd,KAAK,oBAAoBqH,KAAMT,OAAOC,KAAK2d,GAAUxf,KAAI,SAAAgS,GAAC,OAAIwN,EAASxN,QACzF,uBACA,uBAGC9V,EAAM8b,aACH,qCACA,sBAAKvZ,UAAU,eAAf,UACA,mBAAGA,UAAU,gBAAb,8CACA,sBAAKA,UAAU,uBAAf,UACQ,qBAAKA,UAAU,kBAAf,SACI,gCACQ,6CACA,sCAAIwZ,EAAeoH,mBAAnB,aAAI,EAA4B7f,mBAG5C,qBAAKf,UAAU,kBAAf,SACI,gCACQ,6CACA,wCAAIwZ,EAAeoH,mBAAnB,aAAI,EAA4B3f,UAAhC,cAA4CuY,EAAeoH,mBAA3D,aAA4C,EAA4B1f,iBAGpF,qBAAKlB,UAAU,kBAAf,SACI,gCACQ,oDACA,+BACC,UAAAwZ,EAAeoH,mBAAf,eAA4BE,OAAQ,yDAAUtH,EAAeoH,mBAAzB,aAAU,EAA4BE,MAAtC,IAA6C,uBAA7C,OAAyD,yCAAG,2BAChG,UAAAtH,EAAeoH,mBAAf,eAA4BC,OAAQ,yDAAUrH,EAAeoH,mBAAzB,aAAU,EAA4BC,MAAtC,IAA6C,uBAA7C,OAAyD,yCAAG,kCAI7G,qBAAK7gB,UAAU,kBAAf,SACI,gCACQ,iDACA,wCACCwZ,EAAegH,mBADhB,aACC,EAA4BE,MAAM,uBADnC,UAEClH,EAAegH,mBAFhB,aAEC,EAA4B/e,KAF7B,eAEqC+X,EAAegH,mBAFpD,aAEqC,EAA4B9e,MAFjE,cAEyE8X,EAAegH,mBAFxF,aAEyE,EAA4BzR,mBAIjH,qBAAK/O,UAAU,kBAAf,SACI,gCACQ,mDACA,kDAAqByZ,EAArB,IAAiC,uBAAjC,WAA+CC,gBAKnE,0BAMH/c,EACG,mCACI,8BAAG,mBAAGqD,UAAU,8BAAhB,gCAGJ,mCACEonB,GAAuB5T,SAAvB,OAAgC/W,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAU+b,KACxC,sBAAKxY,UAAU,eAAf,UACA,mBAAGA,UAAU,gBAAb,oBAGA,uBAC2B,kBAAtBvC,EAAMujB,YACH,8BAAG,mBAAGhhB,UAAU,wBAAhB,0BAEA,8BAAG,mBAAGA,UAAU,wBAAhB,iCAEJ,wBAAQwB,QA9KL,WAEvB,IZauB6lB,EAAOC,EYb1BljB,EAAM,GAEV,OAAO3G,EAAMujB,aACT,IAAK,iBACD5c,EAAM,gBACV,MACA,IAAK,gBACDA,EAAM,iBACV,MACA,QACIA,EAAM,gBAIdpB,GZDuBqkB,EYCCjjB,EZDMkjB,EYCDrY,EZDP,yCAAoB,WAAOjM,EAAUC,GAAjB,UAAAC,EAAA,sDAC9CF,EAAS,CACLzG,KAAMpB,KAIVqH,GAAGc,WAAW,UAAUC,IAAI+jB,GAASC,OAAO,CACxCvG,YAAaqG,IACd5jB,MAAM,WACLT,EAAS,CACLzG,KAAMnB,KAGV4H,EAASsa,GAAgBgK,OAC1BvjB,OAAM,SAAApH,GACLqG,EAAS,CACLzG,KAAMlB,GACNqB,QAASC,OAjB6B,2CAApB,2DY+JF,8BAYJ,kCAOP,+EA2BXyqB,GAAyB,CAC3B,+BACC,+BACA,+BACA,+BACA,gCC7FUI,GAxKI,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAGbC,EAAc,EACdC,EAAc,EACdC,EAAc,EAQlB,OANGH,EAAQI,gBAAkBJ,EAAQI,eAAevmB,SAChDomB,EAAcD,EAAQI,eAAevmB,OACrCqmB,EAAcG,KAAKC,KAAKL,EAPD,IAYvB,qBAAK1nB,UAAU,6BAAf,SACC,aAAI0K,MAAMid,IAAcpmB,KAAK,SAACwE,EAAGsW,GAC9B,OACA,sBAAKrc,UAAU,kBAAf,UACA,sBAAKA,UAAU,cAAf,UACA,sBAAKA,UAAU,gBAAf,UACI,qDACA,kDAAoB,uBAApB,WACQ,uBADR,wBAKJ,sBAAKA,UAAU,iBAAf,UACI,yCACA,uBAAOgoB,YAAa,EAApB,SACA,kCACI,+BACA,sCACA,8CAEA,+BACA,6BAAKP,EAAQzZ,SAAWia,GAAWR,EAAQzZ,WAC3C,6BAAKyZ,EAAQjZ,WAAaiZ,EAAQjZ,0BAK1C,uBACA,sBAAKxO,UAAU,eAAf,UACA,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,SAAf,SACA,0CAEA,qBAAKA,UAAU,eAAf,SACA,8BAAIynB,EAAQS,aAAeT,EAAQS,YAAYzH,OAASgH,EAAQS,YAAYzH,MAAM,uBAC7EgH,EAAQS,aAAeT,EAAQS,YAAYxH,OAAS+G,EAAQS,YAAYxH,MAAM,uBAC9E+G,EAAQS,aAAeT,EAAQS,YAAYzmB,MAAQgmB,EAAQS,YAAYzmB,KAF5E,IAGKgmB,EAAQS,aAAeT,EAAQS,YAAYxmB,OAAS+lB,EAAQS,YAAYxmB,MACxE+lB,EAAQS,aAAeT,EAAQS,YAAYnZ,YAAc0Y,EAAQS,YAAYnZ,mBAItF,sBAAK/O,UAAU,UAAf,UACI,qBAAKA,UAAU,SAAf,SACA,0CAEA,qBAAKA,UAAU,eAAf,SACI,8BAAIynB,EAAQjH,aAAeiH,EAAQjH,YAAYC,OAASgH,EAAQjH,YAAYC,MAAM,uBACjFgH,EAAQjH,aAAeiH,EAAQjH,YAAYE,OAAS+G,EAAQjH,YAAYE,MAAM,uBAC9E+G,EAAQjH,aAAeiH,EAAQjH,YAAY/e,MAAQgmB,EAAQjH,YAAY/e,KAFxE,IAGCgmB,EAAQjH,aAAeiH,EAAQjH,YAAY9e,OAAS+lB,EAAQjH,YAAY9e,MACxE+lB,EAAQjH,aAAeiH,EAAQjH,YAAYzR,YAAc0Y,EAAQjH,YAAYzR,sBAKtF,uBACA,uBAAO/O,UAAU,aAAagoB,YAAa,EAA3C,SACA,kCAAO,+BACH,0CACA,0CACA,uCACA,0CACA,qCACA,wCAEA,+BACA,uBACA,6BAAKP,EAAQU,WACb,6BAAKV,EAAQ3Y,SAAW2Y,EAAQ3Y,SAAShL,SAAW,KACpD,6BAAK2jB,EAAQnZ,QAAU2Z,GAAWR,EAAQnZ,SAAW,KACrD,6BAAKmZ,EAAQW,YAAcX,EAAQW,YAAYtkB,SAAW,KAC1D,+BAGJ,uBACA,wBAAO9D,UAAU,YAAYgoB,YAAa,EAA1C,UACA,gCACI,+BACA,sCACA,6CACA,sCACA,qCACA,6CACA,sCACA,6CAGJ,gCACKP,EAAQI,eAAiB,aAAInd,MArGf,IAqG0CnJ,KAAI,SAAE8mB,EAAGnL,GAC9D0K,GAA4B,EAC5B,IAAMzX,EAAMsX,EAAQI,eAEpB,OACI,mCACED,GAAezX,EAAI7O,OACjB,+BACI,6BAAK6O,EAAIyX,EAAc,GAAGU,SAAWnY,EAAIyX,EAAc,GAAGU,QAAQxkB,WAClE,6BAAKqM,EAAIyX,EAAc,GAAGW,MAAQpY,EAAIyX,EAAc,GAAGW,OACvD,6BAAK,KACL,6BAAKpY,EAAIyX,EAAc,GAAGY,UAAYrY,EAAIyX,EAAc,GAAGY,WAC3D,6BAAK,KACL,6BAAKrY,EAAIyX,EAAc,GAAGa,MAAQtY,EAAIyX,EAAc,GAAGa,OACvD,6BAAKtY,EAAIyX,EAAc,GAAGc,QAAUvY,EAAIyX,EAAc,GAAGc,WAP7D,oBAAsBvY,EAAIyX,EAAc,GAAGU,QAAUnY,EAAIyX,EAAc,GAAGU,QAAQ3mB,OAAS,KAS1F,+BACG,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,yBAPH,0BAA4BimB,EAAc,EAA1C,YAA+Ce,YAYxD,kCAIR,sBAAK3oB,UAAU,mBAAf,UACA,qBAAKA,UAAU,oBACf,sBAAKA,UAAU,kBAAf,UAAiC,0CAAiB,4BAAIynB,EAAQ9Y,UAAYD,uBAAY+Y,EAAQ9Y,eAC9F,sBAAK3O,UAAU,kBAAf,UAAiC,uCAAc,4BAAIynB,EAAQ9Y,UAAYD,uBAAY+Y,EAAQ9Y,eAC3F,sBAAK3O,UAAU,kBAAf,UAAiC,kDAAyB,4BAAI0O,uBAAiC,EAAnB+Y,EAAQ9Y,SAA4C,EAA3B8Y,EAAQpZ,uBAC7G,sBAAKrO,UAAU,kBAAf,UAAiC,6CAAoB,4BAAI0O,uBAAY+Y,EAAQpZ,0BAE7E,uBACA,qBAAKrO,UAAU,cAAf,SACA,uBAAOgoB,YAAa,EAApB,SACI,kCAAO,+BACH,yCACA,2CAEJ,+BACI,8CACA,kEAIR,uBACA,sBAAKhoB,UAAU,cAAf,kBAAmCqc,EAAO,OA3I1C,eAA8CA,EAAO,EAArD,YAA0DsM,WAH9D,cAAwDA,QA6J1DV,GAAa,SAACxgB,GAChB,IAAImhB,EAAU,IAAIlhB,KAAKD,GAAMohB,cAActgB,MAAM,KAAK,GAAGA,MAAM,KAC/D,MAAM,GAAN,OAAUqgB,EAAQ,GAAlB,YAAwBA,EAAQ,GAAhC,YAAsCA,EAAQ,KAI5CD,GAAY,WACd,OAAOb,KAAKgB,MAAM,IAAuB,IAAhBhB,KAAKiB,W,SC9GnBC,GA9DK,SAAC,GAAa,IAAZhoB,EAAW,EAAXA,MAEZgE,EAAUC,eAEVsJ,EAASvN,EAAMsa,OAAO3V,GAEtB7I,EAAmBwD,aAAY,SAAAjE,GAAK,OAAIA,EAAMS,oBACQwmB,GAAwBxmB,EAA5EN,QAA4EM,EAA1CA,kBAEpCmsB,EAAe3oB,aAAY,SAAAjE,GAAK,OAAIA,EAAMiB,eACE4rB,GAAoBD,EAA9DzsB,QAA8DysB,EAAjC3rB,aAVR,EAYCiD,mBAAS,IAZV,oBAYtBknB,EAZsB,KAYb0B,EAZa,KAcvB5lB,EAAM,IAAI6lB,KAAM,WAAW,KAAM,CAAC,IAAI,OAAO,GAAO,EAAM,EAAG,GAE7DC,EAAIlkB,iBAAO,MAGjBzE,qBAAU,WAEN,IAAM4oB,EAA2BhG,EAAoB9H,MAAK,SAAA+N,GAAG,OAAIA,EAAI/a,YAAcD,KAC7Eib,EAAsBN,EAAgB1N,MAAK,SAAA+N,GAAG,OAAIA,EAAI/a,YAAcD,KACvE+a,GAAyBH,EAAWG,GACpCE,GAAoBL,EAAWK,KACnC,IAoBH,OACI,sBAAK5nB,MAAO,CAAC6nB,QAAS,QAAQzpB,UAAU,gCAAxC,UACI,cAAC,GAAD,CAAW8G,MAAM,eAAeD,SAAQ,4BAAuB4gB,EAAQjZ,WAAazH,KAAM,KAC1F,uBAAK,uBACL,sBAAK/G,UAAU,OAAO4B,MAAO,CAAC8nB,eAAiB,gBAA/C,UACI,wBAAQloB,QAtBC,WACjB,IAAMmoB,EAAkBN,EAAE/jB,QAAQ+T,UAElC9V,EAAIqmB,KAAKD,EAAiB,CACtBN,EAAG,EACHQ,EAAG,IAGPnc,YAAa,WACTnK,EAAIumB,KAAJ,cAAgBvb,EAAhB,mCACD,MAYK,8BACA,wBAAQ/M,QAVY,WAC5BwD,EAAQiB,KAAR,wBAA8BwhB,EAAQ7Z,YAAYjM,UAS1C,+BAEJ,uBAAK,uBACL,qBAAKgE,GAAG,4BAA4BzB,IAAKmlB,EAAzC,SACI,cAAC,GAAD,CAAY5B,QAASA,MAEzB,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,2BCwG3BsC,GAvKO,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAEhBtf,MAAMuf,QAAQD,EAAWE,qBACzBF,EAAWE,kBAAoB,CAACF,EAAWE,oBAI/C,IACIxC,EAAc,EACdC,EAAc,EACdC,EAAc,EAUlB,OARGoC,EAAWE,mBAAqBF,EAAWE,kBAAkB5oB,SAC5DomB,EAAcsC,EAAWE,kBAAkB5oB,OAC3CqmB,EAAcG,KAAKC,KAAKL,EAPD,IAU3BliB,QAAQC,IAAIukB,GAIR,qBAAKhqB,UAAU,6BAAf,SACC,aAAI0K,MAAMid,IAAcpmB,KAAK,SAACwE,EAAGsW,GAAU,IAAD,wBACvC,OACA,sBAAKrc,UAAU,kBAAf,UACA,sBAAKA,UAAU,cAAf,UACA,sBAAKA,UAAU,gBAAf,UACI,qDACA,kDAAoB,uBAApB,WACQ,uBADR,wBAKJ,sBAAKA,UAAU,iBAAf,UACI,6CACA,uBAAOgoB,YAAa,EAApB,SACA,kCACI,+BACA,sCACA,kDAEA,+BACA,6BAAKgC,EAAWhc,SAAWia,GAAW+B,EAAWhc,WACjD,6BAAKgc,EAAWxb,WAAawb,EAAWxb,0BAKhD,uBACA,sBAAKxO,UAAU,eAAf,UACA,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,SAAf,SACA,0CAEA,qBAAKA,UAAU,eAAf,SACA,wCAAIgqB,EAAW9B,mBAAf,aAAI,EAAwBzH,MAAM,uBAAlC,UACKuJ,EAAW9B,mBADhB,aACK,EAAwBxH,MAAM,uBADnC,UAEKsJ,EAAW9B,mBAFhB,aAEK,EAAwBzmB,KAF7B,cAGKuoB,EAAW9B,mBAHhB,aAGK,EAAwBxmB,MAH7B,UAIKsoB,EAAW9B,mBAJhB,aAIK,EAAwBnZ,mBAIjC,sBAAK/O,UAAU,UAAf,UACI,qBAAKA,UAAU,SAAf,SACA,0CAEA,qBAAKA,UAAU,eAAf,SACI,wCAAIgqB,EAAWxJ,mBAAf,aAAI,EAAwBC,MAAM,uBAAlC,UACEuJ,EAAWxJ,mBADb,aACE,EAAwBE,MAAM,uBADhC,UAEEsJ,EAAWxJ,mBAFb,aAEE,EAAwB/e,KAF1B,cAGEuoB,EAAWxJ,mBAHb,aAGE,EAAwB9e,MAH1B,UAIEsoB,EAAWxJ,mBAJb,aAIE,EAAwBzR,sBAKlC,uBACA,uBAAO/O,UAAU,aAAagoB,YAAa,EAA3C,SACA,kCAAO,+BACH,0CACA,uCACA,qCACA,wCAEA,+BACA,6BAAKgC,EAAW7B,WAChB,uCAAK6B,EAAWlb,gBAAhB,aAAK,EAAqBhL,WAC1B,uCAAKkmB,EAAW5B,mBAAhB,aAAK,EAAwBtkB,WAC7B,6BAAKkmB,EAAWG,cAGpB,uBACA,wBAAOnqB,UAAU,YAAYgoB,YAAa,EAA1C,UACA,gCACI,+BACA,sCACA,6CACA,yCACA,yCACA,sCACA,6CAGJ,gCACKgC,EAAWE,kBAAoB,aAAIxf,MAlGrB,IAkGgDnJ,KAAI,SAAE8mB,EAAGnL,GACpE0K,GAA4B,EAC5B,IAAMzX,EAAM6Z,EAAWE,kBAEvB,OACI,mCACEtC,GAAezX,EAAI7O,QAAU6O,EAAIyX,EAAc,GAC7C,+BACI,6BAAKzX,EAAIyX,EAAc,GAAGU,SAAWnY,EAAIyX,EAAc,GAAGU,QAAQxkB,WAClE,6BAAKqM,EAAIyX,EAAc,GAAGW,MAAQpY,EAAIyX,EAAc,GAAGW,OACvD,6BAAKpY,EAAIyX,EAAc,GAAGY,UAAYrY,EAAIyX,EAAc,GAAGY,WAC3D,6BAAKrY,EAAIyX,EAAc,GAAGwC,UAAaja,EAAIyX,EAAc,GAAGY,SAAWrY,EAAIyX,EAAc,GAAGwC,WAC5F,6BAAKja,EAAIyX,EAAc,GAAGa,MAAQtY,EAAIyX,EAAc,GAAGa,OACvD,6BAAKtY,EAAIyX,EAAc,GAAGY,UAAY9Z,uBAAayB,EAAIyX,EAAc,GAAGY,UAAarY,EAAIyX,EAAc,GAAGa,KAAOtY,EAAIyX,EAAc,GAAGa,KAAO,QANjJ,oBAAsBb,EAAc,EAApC,YAAyCe,OAQxC,+BACG,uBACA,uBACA,uBACA,uBACA,uBACA,yBANH,0BAA4Bf,EAAc,EAA1C,YAA+Ce,YAWxD,kCAIR,sBAAK3oB,UAAU,mBAAf,UACA,qBAAKA,UAAU,oBACf,sBAAKA,UAAU,kBAAf,UAAiC,0CAAiB,4BAAIgqB,EAAWrb,UAAYD,uBAAYsb,EAAWrb,eACpG,sBAAK3O,UAAU,kBAAf,UAAiC,uCAAc,4BAAIgqB,EAAWrb,UAAYD,uBAAYsb,EAAWrb,kBAGjG,uBACA,qBAAK3O,UAAU,cAAf,SACA,uBAAOgoB,YAAa,EAApB,SACI,kCAAO,+BACH,yCACA,2CAEJ,+BACI,8CACA,kEAIR,uBACA,sBAAKhoB,UAAU,cAAf,kBAAmCqc,EAAO,OAnI1C,eAA8CA,EAAO,EAArD,YAA0DsM,WAH9D,cAAwDA,QAqJ1DV,GAAa,SAACxgB,GAChB,IAAImhB,EAAU,IAAIlhB,KAAKD,GAAMohB,cAActgB,MAAM,KAAK,GAAGA,MAAM,KAC/D,MAAM,GAAN,OAAUqgB,EAAQ,GAAlB,YAAwBA,EAAQ,GAAhC,YAAsCA,EAAQ,KAI5CD,GAAY,WACd,OAAOb,KAAKgB,MAAM,IAAuB,IAAhBhB,KAAKiB,WCrHnBsB,GAtDQ,SAAC,GAAa,IAE3Bxb,EAF0B,EAAX7N,MAEDsa,OAAO3V,GAErB3I,EAAsBsD,aAAY,SAAAjE,GAAK,OAAIA,EAAMW,uBACtC2mB,EAA6E3mB,EAAtFR,QAA0D8tB,EAA4BttB,EAAjDA,oBALb,EAOIuD,mBAAS,IAPb,oBAOzBgqB,EAPyB,KAObC,EAPa,KAS1BjnB,EAAM,IAAI6lB,KAAM,WAAW,KAAM,CAAC,IAAI,OAAO,GAAO,EAAM,EAAG,GAE7DC,EAAIlkB,iBAAO,MAGjBzE,qBAAU,WACP,IAAIijB,EAA6B,CAC7B,IAAM8G,EAA0BH,EAAwB9O,MAAK,SAAAkP,GAAE,OAAIA,EAAGlc,YAAcK,KACjF4b,GAEED,EAAcC,MAKvB,IAgBH,OACI,sBAAK7oB,MAAO,CAAC6nB,QAAS,GAAGzpB,UAAU,gCAAnC,UACI,cAAC,GAAD,CAAW8G,MAAM,mBAAmBD,SAAQ,gCAA2B0jB,EAAW/b,WAAazH,KAAM,KACrG,uBAAK,uBACL,wBAAQvF,QAjBK,WACjB,IAAMmpB,EAAiBtB,EAAE/jB,QAAQ+T,UAEjC9V,EAAIqmB,KAAKe,EAAgB,CACrBtB,EAAG,EACHQ,EAAG,IAGPnc,YAAa,WACTnK,EAAIumB,KAAJ,qBAAuBjb,EAAvB,mCACD,MAOC,kCACA,uBAAK,uBACL,qBAAKlJ,GAAG,4BAA4BzB,IAAKmlB,EAAzC,SACI,cAAC,GAAD,CAAeW,WAAYO,MAE/B,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,2BCwE3BK,GAtHC,WACZ,IAAMjX,EAAWvN,eACXpD,EAAW4B,cACX7G,EAAUuC,aAAY,SAAAjE,GAAK,OAAIA,EAAM0B,WAGnCtB,EADU6D,aAAY,SAAAjE,GAAK,OAAIA,EAAMD,aACrCK,SAEFouB,EAAW1lB,iBAAO,MARN,EAUW5E,oBAAS,GAVpB,oBAUXshB,EAVW,KAUHC,EAVG,OAWavhB,oBAAS,GAXtB,oBAWXwhB,EAXW,KAWFC,EAXE,KAcjB,KA4GL,SAAwBzf,GACnB,OAAO,IAAI+B,SAAQ,SAACC,EAASC,GAC1B,IAAMC,EAAclC,EAAKmC,oBAAmB,SAAAjG,GACzCgG,IACAF,EAAQ9F,KACR+F,OAhHDH,CAAe9B,IAAMkB,MAAK,SAAAhF,GAClBA,GACEA,EAAKuV,mBAAmBvQ,MAAM,SAAAwe,GAAU,IAAD,KAC7B,OAALA,QAAK,IAALA,GAAA,UAAAA,EAAO/N,cAAP,eAAegO,OAAQJ,GAAW,GAAQA,GAAW,IAChD,OAALG,QAAK,IAALA,GAAA,UAAAA,EAAO/N,cAAP,eAAeiO,QAASH,GAAY,GAAQA,GAAY,SAI1E,MAAOrlB,GACJ6I,QAAQC,IAAI9I,GAKlB,IAAMmuB,EAAoB,WAEpB9nB,E5BoCY,yCAAM,WAAOA,GAAP,UAAAE,EAAA,sDAExBX,GAAKwoB,UACJtnB,MAAK,WACFT,EAAS,CACLzG,KAAO5E,IAGXgH,aAAaqsB,WAAW,eAE3BjnB,OAAM,SAACpH,GACJqG,EAAS,CACLzG,KAAO3E,EACP8E,QAAUC,OAbM,2CAAN,uD4BlCZqG,EzC6H0B,yCAAM,WAAOA,GAAP,UAAAE,EAAA,sDACtCF,EAAS,CACLzG,KAAMnE,IAF4B,2CAAN,uDyC3H1B4K,EzCkIuB,yCAAM,WAAOA,GAAP,UAAAE,EAAA,sDACnCF,EAAS,CACLzG,KAAMvE,IAFyB,2CAAN,wDyC/HvBizB,EAAiB,WACjBJ,EAASvlB,QAAQmI,SAGvB,OACI,sBAAKzN,UAAS,kBAAajC,EAAU,SAAW,IAAhD,UACG,sBAAKiC,UAAU,iBAAf,UACI,wBAAQzD,KAAK,SAASyD,UAAU,YAAYkE,IAAK2mB,EAAUrpB,QAAS,kBAAMwB,EAAS,CAACzG,KAAM,oBAA1F,SACME,EAASgc,SACL,qBAAK4J,IAAK5lB,EAASgc,WAEnB,mBAAGzY,UAAU,mBAGtB,mBAAGA,UAAU,gCACb,6BAAKvD,EAAS6S,YAAc7S,EAAS6S,YAAc,SACnD,4BAAI7S,EAASiT,OAASjT,EAASiT,QAC/B,uBACA,qCACA,yBAAQlO,QAAS,kBAAK8kB,OAAO3S,SAASuX,UAAUtpB,MAAO,CAACupB,UAAW,aAAcnQ,MAAO,QAAxF,UAAiG,mBAAGhb,UAAU,gBAA9G,iBAEL,sBAAKA,UAAU,oBAAf,UACI,eAAC,KAAD,CAAMqG,GAAG,IAAIrG,UAAS,uBAAwC,UAAtB2T,EAASxN,UAA8C,MAAtBwN,EAASxN,UAAoB,UAAY3E,QAASypB,EAA3H,UACK,mBAAGjrB,UAAU,gBACb,qCACA,mBAAGA,UAAU,4BAElB,eAAC,KAAD,CAAMqG,GAAG,YAAYrG,UAAS,uBAAwC,cAAtB2T,EAASxN,UAA4B,UAAa3E,QAASypB,EAA3G,UACK,mBAAGjrB,UAAU,0BACb,2CACA,mBAAGA,UAAU,4BAElB,eAAC,KAAD,CAAMqG,GAAG,aAAarG,UAAS,uBAAwC,eAAtB2T,EAASxN,UAA6B,UAAa3E,QAASypB,EAA7G,UACK,mBAAGjrB,UAAU,yBACb,4CACA,mBAAGA,UAAU,4BAElB,eAAC,KAAD,CAAMqG,GAAG,cAAcrG,UAAS,uBAAwC,gBAAtB2T,EAASxN,UAA8B,UAAa3E,QAASypB,EAA/G,UACK,mBAAGjrB,UAAU,eACb,yCACA,mBAAGA,UAAU,4BAElB,eAAC,KAAD,CAAMqG,GAAG,eAAerG,UAAS,uBAAwC,iBAAtB2T,EAASxN,UAA+B,UAAY3E,QAASypB,EAAhH,UACK,mBAAGjrB,UAAU,+BACb,0CACA,mBAAGA,UAAU,4BAElB,eAAC,KAAD,CAAMqG,GAAG,SAASrG,UAAS,uBAAwC,WAAtB2T,EAASxN,UAAyB,UAAa3E,QAASypB,EAArG,UACK,mBAAGjrB,UAAU,gBACb,sCACA,mBAAGA,UAAU,6BAEf+hB,GAAYF,IACV,eAAC,KAAD,CAAMxb,GAAG,eAAerG,UAAS,uBAAwC,iBAAtB2T,EAASxN,UAA+B,UAAa3E,QAASypB,EAAjH,UACA,mBAAGjrB,UAAU,sBACb,wCACA,mBAAGA,UAAU,4BAGlB,eAAC,KAAD,CAAMqG,GAAG,SAASrG,UAAS,uBAAwC,YAAtB2T,EAASxN,UAA0B,UAAa3E,QAAS,WAAMspB,IAAqBG,KAAjI,UACK,mBAAGjrB,UAAU,wBACb,uCACA,mBAAGA,UAAU,4BAEjB6hB,GACI,eAAC,KAAD,CAAMxb,GAAG,SAASrG,UAAS,uBAAwC,WAAtB2T,EAASxN,UAAyB,UAAa3E,QAASypB,EAArG,UACA,mBAAGjrB,UAAU,uBACb,sCACA,mBAAGA,UAAU,+BAItB,qBAAKA,UAAU,4BC9GnB,IAAMorB,GAAiB,SAACpV,EAAYC,GAAb,gDAA0B,WAAOjT,EAAUC,GAAjB,gCAAAC,EAAA,+DAG5BD,IAAhB3F,EAH4C,EAG5CA,YACF+tB,EAAwB/tB,EAAYA,YAGtC2Y,GACAjT,EAAS,CACLzG,KAAMV,KATsC,SAc9CwI,GAAe9B,IAd+B,iCAiB7BA,GAAKwR,mBAjBwB,aAiB7B,EAAkBC,mBAjBW,gBAiB7CE,EAjB6C,EAiB7CA,OAGHkC,EAAQ5T,GAAGc,WAAW,aAGjB,OAAN4Q,QAAM,IAANA,GAAA,UAAAA,EAAQvE,oBAAR,mBAAsBC,cAAtB,eAA8BtO,QAAS,IACtC8U,EAAQA,EAAME,MAAM,oBAAqB,KAAMpC,EAAOvE,aAAaC,SAIpEoG,GACC7S,OAAOC,KAAK4S,GAAYO,SAAQ,SAAAC,GAC5B,GAA+B,QAA5BR,EAAWQ,GACV,OAAQA,GACJ,IAAK,YACDJ,EAAQA,EAAME,MAAM,YAAa,KAAMN,EAAWQ,IAClD,MACJ,IAAK,OACDJ,EAAQA,EAAME,MAAM,uBAAwB,KAAKN,EAAWQ,IAC5D,MACJ,IAAK,QACDJ,EAAQA,EAAME,MAAM,oBAAqB,KAAKN,EAAWQ,IACzD,MACJ,IAAK,OAEDJ,EAAQA,EAAME,MAAM,UAAW,KAAKN,EAAWQ,IAC/C,MACJ,IAAK,SACDJ,EAAQA,EAAME,MAAM,WAAY,KAAKN,EAAWQ,QAcpEJ,GAHAA,EAAQA,EAAMK,MAAM,KAGNC,QAAQ,UAAW,QAG9BT,IACCG,EAAQA,EAAMO,WAAWV,IAK7BG,EAAM5S,MACDC,MAAK,SAAAmT,GACF,IAAIC,EAAS,GACbD,EAAKL,SAAQ,SAAAhT,GAAG,OAAIsT,EAAO5Q,KAAP,2BAAgB1C,EAAIK,QAApB,IAA4B+B,GAAKpC,EAAIoC,SAGtDsQ,IAEIY,EAAOvV,OAAS,GACf0B,EAAS,CACLzG,KAAMN,GACNS,SAAS,IAGjBma,EAAM,uBAAOA,GAAP,aAAkBwU,KAK5BroB,EAAS,CACLzG,KAAMT,GACNY,QAASma,OAMhB9S,OAAM,SAAAC,GACHwB,QAAQC,IAAIzB,GACZhB,EAAS,CACLzG,KAAMR,GACNW,QAASsH,OApG+B,4CAA1B,yDAyG9B,SAASK,GAAe9B,GACpB,OAAO,IAAI+B,SAAQ,SAACC,EAASC,GAC1B,IAAMC,EAAclC,EAAKmC,oBAAmB,SAAAjG,GACzCgG,IACAF,EAAQ9F,KACR+F,MC9GV,IAAM8mB,GAAkBtR,IAAMC,MAAK,YAAiB,EAAdjV,QAAe,IAC3ChC,EAAW4B,cAMX2mB,GAHuBjrB,aAAY,SAAAjE,GAAK,OAAIA,EAAM2B,wBAG9BsC,aAAY,SAAAjE,GAAK,OAAIA,EAAMc,iBACpCquB,EAAsCD,EAA/C/uB,QAA+BW,EAAgBouB,EAAhBpuB,aAGjCsuB,EAAmBnrB,aAAY,SAAAjE,GAAK,OAAIA,EAAMiB,eACnCouB,EAAqDD,EAA9DjvB,QAA8Bc,EAAgCmuB,EAAhCnuB,YAAaC,EAAmBkuB,EAAnBluB,gBAZH,EAeVgD,oBAAS,GAfC,oBAezC2Z,EAfyC,KAe5BC,EAf4B,OAkBZ5Z,mBAAS,iBAlBG,oBAkBzCorB,EAlByC,KAkB7BC,EAlB6B,OAmBlBrrB,mBAAS,IAnBS,oBAmBzCsrB,EAnByC,KAmBhCC,EAnBgC,OAoBVvrB,mBAAS,QApBC,oBAoBzCiW,EApByC,KAoB5BuV,EApB4B,OAqBdxrB,mBAAS,QArBK,oBAqBzCyrB,EArByC,KAqB9BC,EArB8B,OAsBN1rB,mBAAS2rB,IAtBH,oBAsBzCC,EAtByC,KAsB1BC,EAtB0B,OAuBV7rB,mBAAS8rB,IAvBC,oBAuBzCC,EAvByC,KAuB5BC,EAvB4B,OA0BUhsB,mBAASpD,GA1BnB,oBA0BzCqvB,EA1ByC,KA0BlBC,EA1BkB,OA8BZlsB,mBAAS,IA9BG,oBA8BzCyV,EA9ByC,KA8B7B0E,EA9B6B,OA+BhBna,mBAAS,IA/BO,8BAkChDG,qBAAU,WACN+rB,EAAyBtvB,KAC1B,CAACA,IAIJuD,qBAAU,kBAAOia,eAAe/b,QAAf,8BAAuDgtB,EAAcjR,eAAe/b,QAAf,gCAAuD,IAG7I8B,qBAAU,kBAAMia,eAAexG,QAAf,4BAAoDwX,MAGpEjrB,qBAAU,WACN,OAAQirB,GACJ,IAAK,gBACDS,EAAiBF,IACjBK,EAAeF,IACI,cAAhB7V,GAA6BuV,EAAe,QAC/C,MACJ,IAAK,eACDK,EAAiBM,IACjBH,EAAeI,KACD,OAAXrvB,QAAW,IAAXA,OAAA,EAAAA,EAAagE,QAAS,GAAG0B,EAASooB,GAAe,QAS9D,CAACO,IAIHjrB,qBAAW,WACP,IAAMkD,EAAO/E,KAAKC,MAAM6b,eAAe/b,QAAf,yBAAyC+sB,KAC9D/nB,IACCmoB,EAAenoB,EAAK+nB,GAAYnV,aAChCyV,EAAaroB,EAAK+nB,GAAYK,WAC9BF,EAAWloB,EAAK+nB,GAAYE,SAC5Be,EAAwBhpB,MAG7B,CAAC+nB,IAEJ,IAAMiB,EAA0B,SAACC,GAE7B,IAAI/R,EAAU,gBAAMtE,EAAeqV,GACvB,gBAAMG,EAAaA,GAM/B,OAJGa,GAAmBA,EAAgBlB,KAClC7Q,EAAU,gBAAM+R,EAAgBlB,GAAhB,YAA8CkB,EAAgBlB,GAAhB,UAG1DA,GACJ,IAAK,eACDjR,EAAcI,GACdX,GAAe,GACf3U,QAAQC,IAAIuQ,EAAY8E,GACpB+R,EAAgBlB,IAChB3oB,EAASooB,GAAe,2BAAIpV,GAAc8E,KAE9C,MACJ,IAAK,gBACDX,GAAe,GACfsS,EAAyBK,EAAuBD,IAOxDlS,eAAexG,QAAf,yBAAyCwX,GAAc9sB,KAAKuV,UAAL,gBAClDuX,EAAc,CACXA,aACAnV,cACAqV,UACAG,iBAONc,EAAyB,SAAClS,GAC5B,IAEImS,EAAgBC,EAAcC,EAF5BC,EAAU/vB,EAMbyd,GAAmBzX,OAAOC,KAAKwX,GAAiBtZ,OAAS,GACxDyrB,EAAiBnS,EAAgB+Q,GAAYnV,YAC7CwW,EAAepS,EAAgB+Q,GAAYK,UAC3CiB,EAAarS,EAAgB+Q,GAAYE,UAEzCkB,EAAiBvW,EACjBwW,EAAehB,EACfiB,EAAapB,GAGjB,IAAIsB,EAAe,GAGnB,OAAQJ,GACJ,IAAK,OAAQI,EAAgBhwB,EAAe,MAC5C,IAAK,OAAQgwB,EAAgBD,EAAQrsB,QAAO,SAAAC,GAAQ,OAAIA,EAASC,cAAgBksB,KAAc,MAC/F,IAAK,OAAQE,EAAgBD,EAAQrsB,QAAO,SAAAC,GAAQ,OAAIA,EAASW,OAASwrB,KAAc,MACxF,IAAK,QAASE,EAAgBD,EAAQrsB,QAAO,SAAAC,GAAQ,OAAIA,EAASY,QAAUurB,KAAc,MAC1F,IAAK,UAAWE,EAAgBD,EAAQrsB,QAAO,SAAAC,GAAQ,OAAIA,EAASG,YAAcgsB,GAAcnsB,EAASI,WAAa+rB,KAAc,MACpI,IAAK,MAAOE,EAAgBD,EAAQrsB,QAAO,SAAAC,GAAQ,OAAIA,EAASiO,aAAeke,KAAc,MAC7F,QAASE,EAAgBhwB,EAI7B,OAAQ6vB,GACJ,IAAK,OAAQG,EAAarf,MAAK,SAAC5K,EAAE6K,GAAH,OAAU7K,EAAEnC,YAAYiP,cAAcjC,EAAEhN,gBAAgB,MACvF,IAAK,cAAeosB,EAAarf,MAAK,SAAC5K,EAAE6K,GAAH,OAAUA,EAAEhN,YAAYiP,cAAc9M,EAAEnC,gBAAiB,MAC/F,IAAK,OAAQosB,EAAarf,MAAK,SAAC5K,EAAE6K,GAAH,OAAU7K,EAAEzB,KAAKuO,cAAcjC,EAAEtM,SAAQ,MACxE,IAAK,cAAe0rB,EAAarf,MAAK,SAAC5K,EAAE6K,GAAH,OAAWA,EAAEtM,KAAKuO,cAAc9M,EAAEzB,SAAQ,MAChF,IAAK,QAAS0rB,EAAarf,MAAK,SAAC5K,EAAE6K,GAAH,OAAU7K,EAAExB,MAAMsO,cAAcjC,EAAErM,UAAS,MAC3E,IAAK,eAAgByrB,EAAarf,MAAK,SAAC5K,EAAE6K,GAAH,OAAUA,EAAErM,MAAMsO,cAAc9M,EAAExB,UAAS,MAClF,IAAK,UAAWyrB,EAAarf,MAAK,SAAC5K,EAAE6K,GAAH,OAAU7K,EAAEkqB,WAAWpd,cAAcjC,EAAEqf,eAAc,MACvF,IAAK,iBAAkBD,EAAarf,MAAK,SAAC5K,EAAE6K,GAAH,OAAUA,EAAEqf,WAAWpd,cAAc9M,EAAEkqB,eAAc,MAC9F,IAAK,MAAOD,EAAarf,MAAK,SAAC5K,EAAE6K,GAAH,OAAU7K,EAAE6L,WAAWiB,cAAcjC,EAAEgB,eAAc,MACnF,IAAK,aAAcoe,EAAarf,MAAK,SAAC5K,EAAE6K,GAAH,OAAUA,EAAEgB,WAAWiB,cAAc9M,EAAE6L,eAGhF,OAAOoe,GAgBLpS,EAAiB,wBAAM/X,EAASooB,GAAee,EAAe7uB,EAAW,UAAGA,EAAYA,EAAYgE,OAAS,UAApC,aAAG,EAAqC0M,QAAU1Q,KAIjI,OACI,sBAAKqI,GAAG,iBAAiB3F,UAAU,+BAAnC,UACI,cAAC,GAAD,CAAW8G,MAAM,aAAaD,SAAU,WAAa8kB,EAAY5kB,KAAM,CAAC,UAAWE,QAAS,kBAAKkT,GAAgBD,MACjH,sBAAKla,UAAU,gBAAf,UACA,cAAC,GAAD,CACQ8G,MAAM,eACNlB,YAAY,GACZ+O,OAAO,YACPpY,KAAK,SACL8U,QAASgc,GACTxnB,MAAO8lB,EACP7lB,SAAU,SAAAC,GAAC,OAAI6lB,EAAc7lB,EAAEC,OAAOH,UACzCqU,GACD,sBAAKla,UAAU,0BAAf,UACI,sBAAKA,UAAU,eAAf,UACI,oBAAGA,UAAU,8BAAb,oBACY2rB,KAEZ,uBACA,sBAAK3rB,UAAU,qBAAf,UACI,cAAC,GAAD,CACI8G,MAAM,YACNlB,YAAY,GACZ+O,OAAO,oBACPpY,KAAK,SACL8U,QAAS8a,EACTtmB,MAAO2Q,EACP1Q,SAAU,SAAAC,GAAMgmB,EAAehmB,EAAEC,OAAOH,OAAQimB,EAAW,OAI/D,mCACiB,SAAhBtV,EACG,qCACA,qBAAK5U,MAAO,CAACoZ,MAAO,QACpB,cAAC,GAAD,CACAlU,MAAK,UAAK0P,EAAL,UACL5Q,YAAY,kBACZ+O,OAAO,eACPpY,KAAK,OACLsJ,MAAOgmB,EACPhX,UAAW,GACX/O,SAAU,SAAAC,GAAC,OAAI+lB,EAAW/lB,EAAEC,OAAOH,aAGnC,kCAOR,qBAAK7F,UAAU,qBAAf,SACA,cAAC,GAAD,CACQ8G,MAAM,UACNlB,YAAY,GACZ+O,OAAO,qBACPpY,KAAK,SACL8U,QAASib,EACTzmB,MAAOmmB,EACPlmB,SAAU,SAAAC,GAAC,OAAIkmB,EAAalmB,EAAEC,OAAOH,YAG7C,sBAAK7F,UAAU,qBAAf,UACA,wBAAQ4B,MAAO,CAACuZ,OAAQ,QAAS3Z,QAjF3B,WACtBkZ,EAAc,IACdP,GAAe,GAEG,kBAAfwR,IACCI,EAAe,QACfD,EAAW,QACXG,EAAa,QACbW,MAyEY,2BACA,qBAAKhrB,MAAO,CAACoZ,MAAO,QACpB,wBAAQpZ,MAAO,CAACuZ,OAAQ,QAAS3Z,QAASorB,EAA1C,iCAIJ,qBAAK5sB,UAAU,kBAKvB,sBAAKA,UAAU,kBAAf,UACuB,kBAAf2rB,IAAmCH,EAAsB,cAAC,GAAD,IAAY,cAAC,GAAD,CAAkB5nB,KAAM4oB,EAAuBjwB,KAAK,qBAC1G,iBAAfovB,IAAkCD,EAAqB,cAAC,GAAD,IAEvD,qCACI,cAAC,GAAD,CAAkB9nB,KAAMtG,EAAaf,KAAK,mBAC1C,uBACA,qBAAKyD,UAAU,oBAAf,SACKzC,EACG,wBAAQyC,UAAWzC,EAAkB,WAAa,GAAIqE,MAAO,CAACuZ,OAAQ,QAAS3Z,QAASuZ,EAAxF,8BAIA,wBAAQnZ,MAAO,CAACuZ,OAAQ,QAAS3Z,QAASuZ,EAA1C,sCAgBtBsS,GAAe,CAAC,gBAAiB,gBACjCnB,GAA4B,CAAC,OAAO,OAAO,OAAQ,QAAQ,UAAU,OACrEQ,GAA2B,CAAC,OAAO,YAAY,OAAQ,QAAQ,QAI/DL,GAA0B,CAAC,OAAQ,cAAc,OAAQ,cAAe,QAAS,eAAe,UAAW,iBAAiB,MAAO,cACnIM,GAAyB,CAAC,YAAa,mBAAmB,OAAO,cAAe,QAAS,eAAe,OAAQ,eAI3GrB,MC7OAgC,GA3CH,WACV,IACQ7wB,EADU6D,aAAY,SAAAjE,GAAK,OAAIA,EAAMD,aACrCK,SAER,OACE,qBAAKuD,UAAS,MAAd,SACA,eAAC,KAAD,WACKvD,EACC,qCACE,cAAC,GAAD,IACA,cAAC,GAAD,OAEC,6BACL,+BACE,sBAAKuD,UAAU,YAAf,UACE,cAAC,KAAD,CAAOutB,KAAK,SAASC,UAAW9Z,GAAW+Z,OAAK,IAChD,cAAC,KAAD,CAAOF,KAAK,cAAcC,UAAWtW,GAAgBuW,OAAK,IAC1D,cAAC,KAAD,CAAOF,KAAK,YAAYC,UAAWzT,GAAc0T,OAAK,IACtD,cAAC,KAAD,CAAOF,KAAK,gBAAgBC,UAAWpS,GAAcqS,OAAK,IAC1D,cAAC,KAAD,CAAOF,KAAK,iBAAiBC,UAAWrG,GAAesG,OAAK,IAC5D,cAAC,KAAD,CAAOF,KAAK,eAAeC,UAAW/P,GAAiBgQ,OAAK,IAC5D,cAAC,KAAD,CAAOF,KAAK,aAAaC,UAAWtG,GAAeuG,OAAK,IACxD,cAAC,KAAD,CAAOF,KAAK,SAASC,UAAWE,GAAkBD,OAAK,IACvD,cAAC,KAAD,CAAOF,KAAK,eAAeC,UAAW5L,GAAa6L,OAAK,IACxD,cAAC,KAAD,CAAOF,KAAK,eAAeC,UAAWzG,GAAqB0G,OAAK,IAChE,cAAC,KAAD,CAAOF,KAAK,cAAcC,UAAWxG,GAAoByG,OAAK,IAC9D,cAAC,KAAD,CAAOF,KAAK,mBAAmBC,UAAWxE,GAAayE,OAAK,IAC5D,cAAC,KAAD,CAAOF,KAAK,sBAAsBC,UAAWnD,GAAgBoD,OAAK,IAClE,cAAC,KAAD,CAAOF,KAAK,oBAAoBC,UAAWtK,GAAcuK,OAAK,IAC9D,cAAC,KAAD,CAAOF,KAAK,UAAUC,UAAW1I,GAAW2I,OAAK,IACjD,cAAC,KAAD,CAAOF,KAAK,IAAIC,UAAWxa,GAAUya,OAAK,SAG7ChxB,EACC,cAAC,GAAD,IACG,mCCzDbkxB,IAASC,OACP,cAAC,IAAD,CAAUjuB,MAAOA,GAAjB,SACE,cAAC,GAAD,MAEF0N,SAASwgB,eAAe,U","file":"static/js/main.acaebcda.chunk.js","sourcesContent":["export const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST'\r\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS'\r\nexport const USER_LOGIN_FAIL = 'USER_LOGIN_FAIL'\r\nexport const USER_LOGIN_RESET = 'USER_LOGIN_RESET'\r\n\r\nexport const USER_LOGOUT= 'USER_LOGOUT'\r\nexport const USER_LOGOUT_ERROR= 'USER_USER_LOGOUT_ERROR'\r\n\r\nexport const USER_CREATE_REQUEST = 'USER_CREATE_REQUEST'\r\nexport const USER_CREATE_SUCCESS = 'USER_CREATE_SUCCESS'\r\nexport const USER_CREATE_FAIL = 'USER_CREATE_FAIL'","export const CUSTOMER_DETAILS_REQUEST = 'CUSTOMER_DETAILS_REQUEST'\r\nexport const CUSTOMER_DETAILS_SUCCESS = 'CUSTOMER_DETAILS_SUCCESS'\r\nexport const CUSTOMER_DETAILS_FAIL = 'CUSTOMER_DETAILS_FAIL'\r\nexport const CUSTOMER_DETAILS_RESET = 'CUSTOMER_DETAILS_RESET'\r\n\r\nexport const CUSTOMER_LIST_REQUEST = 'CUSTOMER_LIST_REQUEST'\r\nexport const CUSTOMER_LIST_SUCCESS = 'CUSTOMER_LIST_SUCCESS'\r\nexport const CUSTOMER_LIST_FAIL = 'CUSTOMER_LIST_FAIL'\r\nexport const CUSTOMER_LIST_RESET = 'CUSTOMER_LIST_RESET'\r\n\r\nexport const CUSTOMER_INVOICES_REQUEST = 'CUSTOMER_INVOICES_REQUEST'\r\nexport const CUSTOMER_INVOICES_SUCCESS = 'CUSTOMER_INVOICES_SUCCESS'\r\nexport const CUSTOMER_INVOICES_FAIL = 'CUSTOMER_INVOICES_FAIL'\r\nexport const CUSTOMER_INVOICES_RESET = 'CUSTOMER_INVOICES_RESET'\r\n\r\nexport const CUSTOMER_APP_ORDERS_REQUEST = 'CUSTOMER_APP_ORDERS_REQUEST'\r\nexport const CUSTOMER_APP_ORDERS_SUCCESS = 'CUSTOMER_APP_ORDERS_SUCCESS'\r\nexport const CUSTOMER_APP_ORDERS_FAIL = 'CUSTOMER_APP_ORDERS_FAIL'\r\nexport const CUSTOMER_APP_ORDERS_RESET = 'CUSTOMER_APP_ORDERS_RESET'\r\n\r\nexport const CUSTOMER_SALES_ORDERS_REQUEST = 'CUSTOMER_SALES_ORDERS_REQUEST'\r\nexport const CUSTOMER_SALES_ORDERS_SUCCESS = 'CUSTOMER_SALES_ORDERS_SUCCESS'\r\nexport const CUSTOMER_SALES_ORDERS_FAIL = 'CUSTOMER_SALES_ORDERS_FAIL'\r\n\r\nexport const CUSTOMER_NOTES_REQUEST = 'CUSTOMER_NOTES_REQUEST'\r\nexport const CUSTOMER_NOTES_SUCCESS = 'CUSTOMER_NOTES_SUCCESS'\r\nexport const CUSTOMER_NOTES_FAIL = 'CUSTOMER_NOTES_FAIL'\r\nexport const CUSTOMER_NOTES_RESET = 'CUSTOMER_NOTES_RESET'\r\n\r\nexport const CUSTOMER_SALES_LIST_REQUEST = 'CUSTOMER_SALES_LIST_REQUEST'\r\nexport const CUSTOMER_SALES_LIST_SUCCESS = 'CUSTOMER_SALES_LIST_SUCCESS'\r\nexport const CUSTOMER_SALES_LIST_FAIL = 'CUSTOMER_SALES_LIST_FAIL'\r\nexport const CUSTOMER_SALES_LIST_RESET = 'CUSTOMER_SALES_LIST_RESET'","export const ENVIRONMENT_VAR_REQUEST = 'ENVIRONMENT_VAR_REQUEST'\r\nexport const ENVIRONMENT_VAR_SUCCESS = 'ENVIRONMENT_VAR_SUCCESS'\r\nexport const ENVIRONMENT_VAR_FAIL = 'ENVIRONMENT_VAR_FAIL'\r\nexport const ENVIRONMENT_VAR_RESET = 'ENVIRONMENT_VAR_RESET'","export const NOTE_CREATE_REQUEST = 'NOTE_CREATE_REQUEST'\r\nexport const NOTE_CREATE_SUCCESS = 'NOTE_CREATE_SUCCESS'\r\nexport const NOTE_CREATE_FAIL = 'NOTE_CREATE_FAIL'\r\nexport const NOTE_CREATE_RESET = 'NOTE_CREATE_RESET'\r\n\r\nexport const NOTE_FEED_REQUEST = 'NOTE_FEED_REQUEST'\r\nexport const NOTE_FEED_SUCCESS = 'NOTE_FEED_SUCCESS'\r\nexport const NOTE_FEED_FAIL = 'NOTE_FEED_FAIL'\r\nexport const NOTE_FEED_ADD_SUCCESS = 'NOTE_FEED_ADD_SUCCESS'\r\nexport const NOTE_FEED_RESET = 'NOTE_FEED_RESET'\r\n\r\nexport const NOTE_CUSTOMER_FEED_REQUEST = 'NOTE_CUSTOMER_FEED_REQUEST'\r\nexport const NOTE_CUSTOMER_FEED_SUCCESS = 'NOTE_CUSTOMER_FEED_SUCCESS'\r\nexport const NOTE_CUSTOMER_FEED_FAIL = 'NOTE_CUSTOMER_FEED_FAIL'\r\nexport const NOTE_CUSTOMER_FEED_RESET = 'NOTE_CUSTOMER_FEED_RESET'\r\n\r\nexport const NOTE_DETAILS_REQUEST = 'NOTE_DETAILS_REQUEST'\r\nexport const NOTE_DETAILS_SUCCESS = 'NOTE_DETAILS_SUCCESS'\r\nexport const NOTE_DETAILS_FAIL = 'NOTE_DETAILS_FAIL'\r\nexport const NOTE_DETAILS_RESET = 'NOTE_DETAILS_RESET'\r\n\r\nexport const NOTE_FEED_DISABLE_SHOW_MORE = 'NOTE_FEED_DISABLE_SHOW_MORE'\r\n","export const ORDER_CREATE_REQUEST = 'ORDER_CREATE_REQUEST'\r\nexport const ORDER_CREATE_SUCCESS = 'ORDER_CREATE_SUCCESS'\r\nexport const ORDER_CREATE_FAIL = 'ORDER_CREATE_FAIL'\r\n\r\nexport const ORDER_FEED_REQUEST = 'ORDER_FEED_REQUEST'\r\nexport const ORDER_FEED_SUCCESS = 'ORDER_FEED_SUCCESS'\r\nexport const ORDER_FEED_FAIL = 'ORDER_FEED_FAIL'\r\nexport const ORDER_FEED_RESET = 'ORDER_FEED_RESET'\r\n\r\nexport const ORDER_DETAILS_REQUEST = 'ORDER_DETAILS_REQUEST'\r\nexport const ORDER_DETAILS_SUCCESS = 'ORDER_DETAILS_SUCCESS'\r\nexport const ORDER_DETAILS_FAIL = 'ORDER_DETAILS_FAIL'\r\nexport const ORDER_DETAILS_RESET = 'ORDER_DETAILS_RESET'\r\n\r\nexport const ORDER_FEED_DISABLE_SHOW_MORE = 'ORDER_FEED_DISABLE_SHOW_MORE'\r\n\r\n\r\nexport const ORDER_CHANGE_STATUS_REQUEST = 'ORDER_CHANGE_STATUS_REQUEST'\r\nexport const ORDER_CHANGE_STATUS_SUCCESS = 'ORDER_CHANGE_STATUS_SUCCESS'\r\nexport const ORDER_CHANGE_STATUS_FAIL = 'ORDER_CHANGE_STATUS_FAIL'\r\n\r\n","export const ADMIN_USER_CREATE_REQUEST = 'ADMIN_USER_CREATE_REQUEST'\r\nexport const ADMIN_USER_CREATE_SUCCESS = 'ADMIN_USER_CREATE_SUCCESS'\r\nexport const ADMIN_USER_CREATE_FAIL = 'ADMIN_USER_CREATE_FAIL'\r\nexport const ADMIN_USER_CREATE_RESET = 'ADMIN_USER_CREATE_RESET'\r\n\r\nexport const ADMIN_USER_LIST_REQUEST = 'ADMIN_USER_LIST_REQUEST'\r\nexport const ADMIN_USER_LIST_SUCCESS = 'ADMIN_USER_LIST_SUCCESS'\r\nexport const ADMIN_USER_LIST_FAIL = 'ADMIN_USER_LIST_FAIL'\r\nexport const ADMIN_USER_LIST_RESET = 'ADMIN_USER_LIST_RESET'","export const INVOICES_LIST_REQUEST = 'INVOICES_LIST_REQUEST'\r\nexport const INVOICES_LIST_SUCCESS = 'INVOICES_LIST_SUCCESS'\r\nexport const INVOICES_LIST_FAIL = 'INVOICES_LIST_FAIL'\r\nexport const INVOICES_LIST_RESET = 'INVOICES_LIST_RESET'\r\n\r\n\r\nexport const INVOICES_LIST_DISABLE_SHOW_MORE = 'INVOICES_LIST_DISABLE_SHOW_MORE'\r\n","import { createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\n// IMPORT REDUCERS HERE \r\nimport { userLoginReducer } from './reducers/userReducers'\r\nimport { customerDetailsReducer, customerListReducer,customerInvoicesReducer, customerAppOrdersReducer, customerSalesOrdersReducer, customerSalesListReducer} from './reducers/customerReducers'\r\nimport { sideNavReducer } from './reducers/sideNavReducer'\r\nimport { environmentVariablesReducer} from './reducers/environmentVariablesReducers'\r\nimport { noteCreateReducer, getNotesReducer, getNoteDetailsReducer, getNotesForCustomerReducer } from './reducers/noteReducers'\r\nimport { orderCreateReducer, getOrdersReducer, getOrdersDetailsReducer, orderChangeStatus } from './reducers/orderReducers'\r\nimport { getUsersForAdminReducer, createNewUserReducer} from './reducers/adminReducers'\r\nimport { invoiceListReducer } from './reducers/invoiceReducers'\r\n\r\n// COMBINE THE REDUCERS HERE \r\nconst reducer = combineReducers({\r\n    userLogin: userLoginReducer,\r\n    customerDetails : customerDetailsReducer,\r\n    customerInvoices : customerInvoicesReducer,\r\n    customerAppOrders : customerAppOrdersReducer,\r\n    customerSalesOrders : customerSalesOrdersReducer,\r\n    customerNotes: getNotesForCustomerReducer,\r\n    customerList : customerListReducer,\r\n    customerSalesList: customerSalesListReducer,\r\n    invoiceList : invoiceListReducer,\r\n   // salesOrderList : salesOrderListReducer,\r\n    orderCreate: orderCreateReducer,\r\n    ordersFeed : getOrdersReducer,\r\n    orderDetails: getOrdersDetailsReducer,\r\n    orderChangeStatus: orderChangeStatus,\r\n    sideNav: sideNavReducer,\r\n    environmentVariables: environmentVariablesReducer,\r\n    noteCreate: noteCreateReducer,\r\n    notesFeed : getNotesReducer,\r\n    noteDetails: getNoteDetailsReducer,\r\n    adminUserList: getUsersForAdminReducer,\r\n    adminCreateNewUser: createNewUserReducer\r\n    \r\n})\r\n\r\n// check if there is avaible user info in storage \r\nconst userInfoFromStorage = localStorage.getItem('userInfo') \r\n    ? JSON.parse(localStorage.getItem('userInfo')) \r\n    : null\r\n\r\n//DEFINE THE INITIAL STATE \r\nconst initialState = {\r\n    userLogin: {\r\n        userInfo : userInfoFromStorage\r\n    },\r\n    customerDetails: {\r\n        customerInfo: {}\r\n    },\r\n    notesFeed : {\r\n        loading: false,\r\n        notes: [],\r\n        disableShowMore: false,\r\n        error: false\r\n    },\r\n    ordersFeed : {\r\n        loading: false,\r\n        orders: [],\r\n        disableShowMore: false,\r\n        error: false\r\n    },\r\n    noteDetails : {\r\n        loading: false,\r\n        note: {},\r\n    },\r\n    orderDetails : {\r\n        loading: false,\r\n        order: {},\r\n    },\r\n    orderCreate : {\r\n        loading: false,\r\n        order:{}\r\n    },\r\n    environmentVariables : {\r\n        lists : {\r\n            itemList : {\r\n                inventoryItems: {},\r\n                inventoryServices : {}\r\n            },\r\n            noteTypes: {},\r\n            orderForms: {\r\n                standard : {\r\n                    products: {}\r\n                }\r\n            },\r\n            priceLevelList : {},\r\n            repList : {},\r\n            termList: {}\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// CREATE THE STORE\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\n\r\nexport default store","import {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGIN_RESET,\r\n    USER_LOGOUT,\r\n    USER_LOGOUT_ERROR,\r\n    USER_CREATE_REQUEST,\r\n    USER_CREATE_SUCCESS,\r\n    USER_CREATE_FAIL\r\n} from '../constants/userConstants'\r\n\r\n\r\nexport const userLoginReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case USER_LOGIN_REQUEST:\r\n            return { loading: true }\r\n        case USER_LOGIN_SUCCESS:\r\n            return { loading: false, userInfo: action.payload }\r\n        case USER_LOGIN_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        case USER_LOGIN_RESET:\r\n            return { }\r\n        case USER_LOGOUT:\r\n            return { }\r\n        case USER_LOGOUT_ERROR:\r\n            return { loading: false, error: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const userCreateReducer = (state = {loading: false, userCreated: {}}, action) => {\r\n    switch (action.type) {\r\n        case USER_CREATE_REQUEST:\r\n            return { loading: true }\r\n        case USER_CREATE_SUCCESS:\r\n            return { loading: false, userCreated: action.payload }\r\n        case USER_CREATE_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    CUSTOMER_DETAILS_REQUEST,\r\n    CUSTOMER_DETAILS_SUCCESS,\r\n    CUSTOMER_DETAILS_FAIL,\r\n    CUSTOMER_DETAILS_RESET,\r\n    CUSTOMER_LIST_REQUEST,\r\n    CUSTOMER_LIST_SUCCESS,\r\n    CUSTOMER_LIST_FAIL,\r\n    CUSTOMER_LIST_RESET,\r\n    CUSTOMER_INVOICES_REQUEST,\r\n    CUSTOMER_INVOICES_SUCCESS,\r\n    CUSTOMER_INVOICES_FAIL,\r\n    CUSTOMER_INVOICES_RESET,\r\n    CUSTOMER_APP_ORDERS_REQUEST,\r\n    CUSTOMER_APP_ORDERS_SUCCESS,\r\n    CUSTOMER_APP_ORDERS_FAIL,\r\n    CUSTOMER_APP_ORDERS_RESET,\r\n    CUSTOMER_SALES_ORDERS_REQUEST,\r\n    CUSTOMER_SALES_ORDERS_SUCCESS,\r\n    CUSTOMER_SALES_ORDERS_FAIL,\r\n    CUSTOMER_SALES_LIST_REQUEST,\r\n    CUSTOMER_SALES_LIST_SUCCESS,\r\n    CUSTOMER_SALES_LIST_FAIL,\r\n    CUSTOMER_SALES_LIST_RESET\r\n} from '../constants/customerConstants'\r\n\r\n\r\nexport const customerDetailsReducer = (state = {customerInfo : {}}, action) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case CUSTOMER_DETAILS_REQUEST:\r\n            return {\r\n                loading: true,\r\n                customerInfo : {}\r\n            }\r\n        // got the data\r\n        case CUSTOMER_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false, customerInfo: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case CUSTOMER_DETAILS_FAIL:\r\n            return {\r\n                loading: false, error: action.payload\r\n            }\r\n        case CUSTOMER_DETAILS_RESET:\r\n            return {customerInfo : {}}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const customerInvoicesReducer = (state = {loading: false, customerInvoices : []}, action) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case CUSTOMER_INVOICES_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n        // got the data\r\n        case CUSTOMER_INVOICES_SUCCESS:\r\n            return {\r\n                loading: false, customerInvoices: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case CUSTOMER_INVOICES_FAIL:\r\n            return {\r\n                loading: false, error: action.payload\r\n            }\r\n        case CUSTOMER_INVOICES_RESET:\r\n            return {\r\n                loading: false, customerInvoices : []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const customerAppOrdersReducer = (state = {loading: false, customerAppOrders : []}, action) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case CUSTOMER_APP_ORDERS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        // got the data\r\n        case CUSTOMER_APP_ORDERS_SUCCESS:\r\n            return {\r\n                loading: false, customerAppOrders: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case CUSTOMER_APP_ORDERS_FAIL:\r\n            return {\r\n                loading: false, error: action.payload\r\n            }\r\n        case CUSTOMER_APP_ORDERS_RESET:\r\n            return {\r\n                loading: false, customerAppOrders : []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const customerSalesOrdersReducer = (state = {loading: false, customerSalesOrders : []}, action) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case CUSTOMER_SALES_ORDERS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        // got the data\r\n        case CUSTOMER_SALES_ORDERS_SUCCESS:\r\n            return {\r\n                loading: false, customerSalesOrders: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case CUSTOMER_SALES_ORDERS_FAIL:\r\n            return {\r\n                loading: false, error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const customerSalesListReducer = (state = {loading: false, salesList : {}}, action) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case CUSTOMER_SALES_LIST_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        // got the data\r\n        case CUSTOMER_SALES_LIST_SUCCESS:\r\n            return {\r\n                loading: false, salesList: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case CUSTOMER_SALES_LIST_FAIL:\r\n            return {\r\n                loading: false, error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const customerListReducer = (state = {customerList: []},action) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case CUSTOMER_LIST_REQUEST:\r\n            return {\r\n                loading: true,\r\n                customerList: []\r\n            }\r\n        // got the data\r\n        case CUSTOMER_LIST_SUCCESS:\r\n            return {\r\n                loading: false, \r\n                customerList: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case CUSTOMER_LIST_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case CUSTOMER_LIST_RESET:\r\n            return {\r\n                loading: false,\r\n                customerList: []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    NOTE_CREATE_REQUEST,\r\n    NOTE_CREATE_SUCCESS,\r\n    NOTE_CREATE_FAIL,\r\n\r\n    NOTE_FEED_REQUEST,\r\n    NOTE_FEED_SUCCESS,\r\n    NOTE_FEED_FAIL,\r\n    NOTE_FEED_RESET,\r\n    NOTE_FEED_DISABLE_SHOW_MORE,\r\n\r\n    NOTE_DETAILS_REQUEST,\r\n    NOTE_DETAILS_SUCCESS,\r\n    NOTE_DETAILS_FAIL,\r\n    NOTE_DETAILS_RESET,\r\n\r\n    NOTE_CUSTOMER_FEED_REQUEST,\r\n    NOTE_CUSTOMER_FEED_SUCCESS,\r\n    NOTE_CUSTOMER_FEED_FAIL,\r\n    NOTE_CUSTOMER_FEED_RESET\r\n    \r\n\r\n} from '../constants/noteConstants'\r\n\r\nexport const noteCreateReducer = (state = {loading: false, note: {}}, action) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case NOTE_CREATE_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n        // got the data\r\n        case NOTE_CREATE_SUCCESS:\r\n            return {\r\n                loading: false, \r\n                success: true,\r\n                note: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case NOTE_CREATE_FAIL:\r\n            return {\r\n                loading: false, \r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const getNotesReducer  = (state = {loading: false, notes: [], error: false}, action ) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case NOTE_FEED_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n        // got the data\r\n        case NOTE_FEED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false, \r\n                notes: action.payload\r\n            }\r\n        // got the data\r\n        case NOTE_FEED_DISABLE_SHOW_MORE:\r\n            return {\r\n                ...state,\r\n                disableShowMore: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case NOTE_FEED_FAIL:\r\n            return {\r\n                loading: false, \r\n                error: action.payload\r\n            }\r\n        case NOTE_FEED_RESET:\r\n            return {loading: false}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getNotesForCustomerReducer  = (state = {loading: false, notes: []}, action ) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case NOTE_CUSTOMER_FEED_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n        // got the data\r\n        case NOTE_CUSTOMER_FEED_SUCCESS:\r\n            return {\r\n                loading: false, \r\n                notes: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case NOTE_CUSTOMER_FEED_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case NOTE_CUSTOMER_FEED_RESET:\r\n            return {loading: false}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const getNoteDetailsReducer = (state = {loading: false, note: {}}, action) => {\r\n    switch (action.type) {\r\n        case NOTE_DETAILS_REQUEST:\r\n            return {\r\n              loading: true ,\r\n              note: {} \r\n            }\r\n        case NOTE_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                note: action.payload \r\n            }\r\n        case NOTE_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload  \r\n            }\r\n        case NOTE_DETAILS_RESET:\r\n            return {\r\n                loading: false  \r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    INVOICES_LIST_REQUEST,\r\n    INVOICES_LIST_SUCCESS,\r\n    INVOICES_LIST_FAIL,\r\n    INVOICES_LIST_RESET,\r\n\r\n    INVOICES_LIST_DISABLE_SHOW_MORE\r\n} from '../constants/invoiceConstants'\r\n\r\n\r\n\r\nexport const invoiceListReducer = (state = {invoiceList: [], loading: false},action) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case INVOICES_LIST_REQUEST:\r\n            return {\r\n                loading: true,\r\n                invoiceList: []\r\n            }\r\n        // got the data\r\n        case INVOICES_LIST_SUCCESS:\r\n            return {\r\n                loading: false, \r\n                invoiceList: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case INVOICES_LIST_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case INVOICES_LIST_DISABLE_SHOW_MORE:\r\n            return {\r\n                ...state,\r\n                disableShowMore: action.payload\r\n            }\r\n        case INVOICES_LIST_RESET:\r\n            return {\r\n                loading: false,\r\n                invoiceList: []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_FAIL,\r\n    ORDER_FEED_REQUEST,\r\n    ORDER_FEED_SUCCESS,\r\n    ORDER_FEED_FAIL,\r\n    ORDER_FEED_RESET,\r\n    ORDER_FEED_DISABLE_SHOW_MORE,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n    ORDER_DETAILS_RESET,\r\n\r\n    ORDER_CHANGE_STATUS_REQUEST,\r\n    ORDER_CHANGE_STATUS_SUCCESS,\r\n    ORDER_CHANGE_STATUS_FAIL\r\n\r\n} from '../constants/orderConstants'\r\n\r\nexport const orderCreateReducer = (state = {loading: false, order: {}}, action) => {\r\n    switch (action.type) {\r\n        case ORDER_CREATE_REQUEST:\r\n            return{\r\n                ...state,\r\n                loading:true\r\n            }\r\n        case ORDER_CREATE_SUCCESS:\r\n            return{\r\n                loading: false,\r\n                success: true,\r\n                order: action.payload\r\n            }\r\n        case ORDER_CREATE_FAIL:\r\n            return{\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const orderChangeStatus = (state = {loading: false}, action) => {\r\n    switch (action.type) {\r\n        case ORDER_CHANGE_STATUS_REQUEST:\r\n            return{\r\n                loading:true\r\n            }\r\n        case ORDER_CHANGE_STATUS_SUCCESS:\r\n            return{\r\n                loading: false,\r\n                success: true,\r\n            }\r\n        case ORDER_CHANGE_STATUS_FAIL:\r\n            return{\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getOrdersReducer  = (state = {loading: false, orders: [], error: false}, action ) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case ORDER_FEED_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n        // got the data\r\n        case ORDER_FEED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false, \r\n                orders: action.payload\r\n            }\r\n        case ORDER_FEED_DISABLE_SHOW_MORE:\r\n            return {\r\n                ...state,\r\n                disableShowMore: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case ORDER_FEED_FAIL:\r\n            return {\r\n                loading: false, \r\n                error: action.payload\r\n            }\r\n        case ORDER_FEED_RESET:\r\n            return {loading: false}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getOrdersDetailsReducer  = (state = {loading: false, order: {}}, action ) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case ORDER_DETAILS_REQUEST:\r\n            return {\r\n                loading: true,\r\n                order: {}\r\n            }\r\n        // got the data\r\n        case ORDER_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false, \r\n                order: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case ORDER_DETAILS_FAIL:\r\n            return {\r\n                loading: false, \r\n                error: action.payload\r\n            }\r\n        case ORDER_DETAILS_RESET:\r\n            return {loading: false}\r\n        default:\r\n            return state;\r\n    }\r\n}","// CLOSE OR OPEN SIDE NAV\r\nexport const sideNavReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        // currently fetching\r\n        case \"TOGGLE_SIDENAV\":\r\n            return !state\r\n        case \"HIDE_SIDENAV\":\r\n            return false\r\n        case \"SHOW_SIDENAV\":\r\n            return true\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    ENVIRONMENT_VAR_REQUEST,\r\n    ENVIRONMENT_VAR_SUCCESS,\r\n    ENVIRONMENT_VAR_FAIL,\r\n    ENVIRONMENT_VAR_RESET\r\n} from '../constants/environmentVariablesConstants'\r\n\r\n\r\nexport const environmentVariablesReducer = (state = { lists: {}}, action) => {\r\n    switch (action.type) {\r\n        case ENVIRONMENT_VAR_REQUEST:\r\n            return { loading: true }\r\n        case ENVIRONMENT_VAR_SUCCESS:\r\n            return { loading: false, lists: action.payload }\r\n        case ENVIRONMENT_VAR_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        case ENVIRONMENT_VAR_RESET:\r\n            return { }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    ADMIN_USER_CREATE_REQUEST,\r\n    ADMIN_USER_CREATE_SUCCESS,\r\n    ADMIN_USER_CREATE_FAIL,\r\n    ADMIN_USER_CREATE_RESET,\r\n\r\n    ADMIN_USER_LIST_REQUEST,\r\n    ADMIN_USER_LIST_SUCCESS,\r\n    ADMIN_USER_LIST_FAIL\r\n} from '../constants/adminConstants'\r\n\r\n\r\nexport const getUsersForAdminReducer  = (state = {loading: false, users: []}, action ) => {\r\n    switch (action.type) {\r\n        \r\n        // currently fetching\r\n        case ADMIN_USER_LIST_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n        // got the data\r\n        case ADMIN_USER_LIST_SUCCESS:\r\n            return {\r\n                loading: false, \r\n                users: action.payload\r\n            }\r\n        // there was an error getting the data\r\n        case ADMIN_USER_LIST_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const createNewUserReducer  = (state = {loading: false, user: {}}, action ) => {\r\n    switch (action.type) {\r\n        \r\n        // currently fetching\r\n        case ADMIN_USER_CREATE_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n        // got the data\r\n        case ADMIN_USER_CREATE_SUCCESS:\r\n            return {\r\n                loading: false, \r\n                user: action.payload,\r\n                success: true\r\n            }\r\n        // there was an error getting the data\r\n        case ADMIN_USER_CREATE_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case ADMIN_USER_CREATE_RESET:\r\n            return {\r\n                loading: false, \r\n                user: {}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react'\r\n\r\nconst Loader = ({type}) => {\r\n\r\n    switch (type) {\r\n        case 'page-loader':\r\n            return (\r\n                <div className=\"loading-spinner page-loader\">\r\n                    <i className=\"fas fa-spinner\"></i>   \r\n                </div>\r\n            )    \r\n        default:\r\n            return (\r\n                <div className=\"loading-spinner page-loader\">\r\n                    <i className=\"fas fa-spinner\"></i>   \r\n                </div>\r\n            ) \r\n    }\r\n\r\n}\r\n\r\nexport default Loader\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Loader from './Loader'\r\n\r\nconst AutoCompleteSection = ({searchBoxText, resetMainSearchBar, handleClick}) => {\r\n\r\n    const list = useSelector(state => state.customerList)\r\n    const { loading, customerList } = list\r\n\r\n    const [filteredList, setFilteredList] = useState([])\r\n\r\n    const filterlist = () => {\r\n        const regex = new RegExp(searchBoxText,'gi')\r\n\r\n        return customerList.filter(customer => ( \r\n            (customer.CompanyName && customer.CompanyName.match(regex)) || (customer.FirstName && customer.FirstName.match(regex)) ||  \r\n            (customer.LastName && customer.LastName.match(regex)) || (customer.AccountNumber && customer.AccountNumber.match(regex))  // || (customer.AccountNumber.match(regex))\r\n            )).slice(0,10)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(customerList){\r\n            setFilteredList(filterlist())\r\n        }\r\n    }, [searchBoxText,customerList])\r\n\r\n\r\n    return (\r\n        <div className={`autocomplete-section ${searchBoxText.length > 0 ? 'active' : ''}`}>\r\n           {loading ? <Loader/> : ''}\r\n           {filteredList.length > 0 ? (filteredList.map( customer => (\r\n\r\n           <div className=\"autocomplete-result\" key={customer.ListID} onClick={() => {handleClick(customer); resetMainSearchBar()}}>\r\n               <div className=\"autocomplete-left\">\r\n                <p className=\"autocomplete-main-name\">{customer.CompanyName && customer.CompanyName }</p>\r\n                <p className=\"autocomplete-sub-name\">{`${customer.FirstName && customer.FirstName} ${customer.LastName && customer.LastName}` }</p>\r\n               </div>\r\n               <div className=\"autocomplete-right\">\r\n                <p>{customer.City && customer.City}, {customer.State && customer.State}</p>\r\n                <p>{customer.AccountNumber && customer.AccountNumber}</p>\r\n               </div>\r\n           </div>\r\n           ))\r\n                \r\n           ) : (\r\n               <p style={{'textAlign': 'center'}}>No results</p>\r\n           )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AutoCompleteSection\r\n","\r\nimport firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\nimport \"firebase/firestore\"\r\nimport \"firebase/functions\"\r\nimport \"firebase/database\"\r\n\r\n\r\nconst app = firebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n})\r\n\r\nexport const auth = app.auth()\r\nexport const db = app.firestore()\r\nexport const rdb = app.database()\r\nexport const functions = app.functions()\r\nexport const Timestamp = firebase.firestore.Timestamp\r\nexport default app","import {\r\n    CUSTOMER_DETAILS_REQUEST,\r\n    CUSTOMER_DETAILS_SUCCESS,\r\n    CUSTOMER_DETAILS_FAIL,\r\n    CUSTOMER_DETAILS_RESET,\r\n    CUSTOMER_LIST_REQUEST,\r\n    CUSTOMER_LIST_SUCCESS,\r\n    CUSTOMER_LIST_FAIL,\r\n    CUSTOMER_LIST_RESET,\r\n    CUSTOMER_INVOICES_REQUEST,\r\n    CUSTOMER_INVOICES_SUCCESS,\r\n    CUSTOMER_INVOICES_FAIL,\r\n    CUSTOMER_INVOICES_RESET,\r\n    CUSTOMER_APP_ORDERS_REQUEST,\r\n    CUSTOMER_APP_ORDERS_SUCCESS,\r\n    CUSTOMER_APP_ORDERS_FAIL,\r\n    CUSTOMER_SALES_ORDERS_REQUEST,\r\n    CUSTOMER_SALES_ORDERS_SUCCESS,\r\n    CUSTOMER_SALES_ORDERS_FAIL,\r\n    CUSTOMER_SALES_LIST_REQUEST,\r\n    CUSTOMER_SALES_LIST_SUCCESS,\r\n    CUSTOMER_SALES_LIST_FAIL,\r\n    CUSTOMER_SALES_LIST_RESET\r\n    \r\n} from '../constants/customerConstants'\r\n\r\nimport {db, functions, rdb, auth} from '../firebase';\r\n\r\n\r\nexport const getCustomerData = (customerID) => async (dispatch, getState) => {\r\n        const {customerInfo} = getState().customerDetails\r\n        \r\n        // if there is a customer loaded and is the same as the one trying to be loaded just return\r\n        // since the customer is already loaded\r\n        if(Object.keys(customerInfo).length > 0){\r\n            if(customerInfo.ListID === customerID) return\r\n        }\r\n\r\n        // Get the customer sales data\r\n        dispatch(getCustomerSalesList(customerID))\r\n\r\n        dispatch({\r\n            type: CUSTOMER_DETAILS_REQUEST\r\n        })\r\n        db.collection('customers').doc(customerID).get()\r\n        .then( doc => {\r\n            if(doc.exists){\r\n                let customerData = doc.data()\r\n                if(!customerData.PriceLevelRef) {\r\n                    customerData.PriceLevelRef = {\r\n                        FullName: '0%',\r\n                        ListID: ''\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: CUSTOMER_DETAILS_SUCCESS,\r\n                    payload: customerData\r\n                }) \r\n            } else{\r\n                dispatch({\r\n                    type: CUSTOMER_DETAILS_FAIL,\r\n                    payload: `A customer with id: ${customerID} does not exist`\r\n                })\r\n            }\r\n        })\r\n        .catch( err => {\r\n            dispatch({\r\n                type: CUSTOMER_DETAILS_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n\r\n\r\n}\r\n\r\n// Get the Sales List for a Customer \r\nexport const getCustomerSalesList = (customerListID) => async (dispatch) => {\r\n    dispatch({\r\n        type: CUSTOMER_SALES_LIST_REQUEST\r\n    })\r\n\r\n\r\n    // Get the sales \r\n    await rdb.ref(`salesList/${customerListID}`).get().then(snapshot => {\r\n        if (snapshot.exists()) {\r\n            dispatch({\r\n                type: CUSTOMER_SALES_LIST_SUCCESS,\r\n                payload: snapshot.val()\r\n            })\r\n        } else{\r\n            dispatch({\r\n                type: CUSTOMER_SALES_LIST_FAIL,\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\n// Get the customer list\r\nexport const getCustomerList = () => async (dispatch) => {\r\n    dispatch({\r\n        type: CUSTOMER_LIST_REQUEST,\r\n    })\r\n    try {\r\n        const customerList = [\r\n            {\r\n                \"AccountNumber\" : \"3454NY\",\r\n                \"City\" : \"New York\",\r\n                \"CompanyName\" : \"Michelle's Store\",\r\n                \"FirstName\" : \"Michelle\",\r\n                \"LastName\" : \"Hull\",\r\n                \"ListID\" : \"8000000C-1476905929\",\r\n                \"PostalCode\" : \"10007\",\r\n                \"State\" : \"NY\",\r\n                \"Street\" : \"3978 Angus Road\"\r\n            },\r\n            {\r\n                \"AccountNumber\" : \"4232NM\",\r\n                \"City\" : \"Albuquerque\",\r\n                \"CompanyName\" : \"Los Pollos Hermanos\",\r\n                \"FirstName\" : \"Gustavo\",\r\n                \"LastName\" : \"Fring\",\r\n                \"ListID\" : \"8000000D-1476989584\",\r\n                \"PostalCode\" : \"87111\",\r\n                \"State\" : \"NM\",\r\n                \"Street\" : \"308 Negra Arroyo Lane\"\r\n            },\r\n            {\r\n                \"AccountNumber\" : \"6745FL\",\r\n                \"City\" : \"Miami Beach\",\r\n                \"CompanyName\" : \"D Morgan Store\",\r\n                \"FirstName\" : \"D\",\r\n                \"LastName\" : \"Morgan\",\r\n                \"ListID\" : \"8000000E-1477065451\",\r\n                \"PostalCode\" : \"33154\",\r\n                \"State\" : \"FL\",\r\n                \"Street\" : \"2145 Dexter Hunt Road\"\r\n            }\r\n        ]\r\n\r\n        dispatch({\r\n            type: CUSTOMER_LIST_SUCCESS,\r\n            payload: customerList\r\n        })\r\n\r\n    //const getCustomerList = functions.httpsCallable('getCustomerList')\r\n\r\n        // getCustomerList()\r\n        // .then(result => {\r\n        //     dispatch({\r\n        //         type: CUSTOMER_LIST_SUCCESS,\r\n        //         payload: result.data.customerlist\r\n        //     })\r\n        // })\r\n        // .catch(err => {\r\n\r\n        //     dispatch({\r\n        //         type: CUSTOMER_LIST_FAIL,\r\n        //         payload: err.message\r\n        //     })\r\n        // })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: CUSTOMER_LIST_FAIL,\r\n            payload: err\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// clear out Customer Details \r\nexport const clearCustomerDetails = () => async (dispatch) => {\r\n    dispatch({\r\n        type: CUSTOMER_LIST_RESET,\r\n    })\r\n}\r\n\r\n// clear out CustomerList \r\nexport const clearCustomerList = () => async (dispatch) => {\r\n    dispatch({\r\n        type: CUSTOMER_DETAILS_RESET,\r\n    })\r\n}\r\n\r\nexport const getCustomerInvoices = (customerListID) => async (dispatch) => {\r\n    dispatch({\r\n        type: CUSTOMER_INVOICES_REQUEST\r\n    })\r\n    // await to recevie the current user before proceeding\r\n    await getCurrentUser(auth)\r\n        \r\n\r\n    // get the claims from the user\r\n    const {claims} = await auth.currentUser?.getIdTokenResult()\r\n\r\n    // query to be performed\r\n    let query = db.collection('invoices')\r\n\r\n    //if query has state restrictions \r\n    if(claims?.restrictions?.states?.length > 0) {\r\n        query = query.where('ShipAddress.State', 'in', claims.restrictions.states )\r\n    }\r\n\r\n    // filter by the account \r\n    query = query.where(\"CustomerRef.ListID\",\"==\",customerListID)\r\n\r\n    // make query call\r\n    query\r\n    .get()\r\n        .then( snap => {\r\n            let result = []\r\n                snap.forEach( doc => result.push(doc.data()) )\r\n\r\n            dispatch({\r\n                type: CUSTOMER_INVOICES_SUCCESS,\r\n                payload: result\r\n            })\r\n        })\r\n        .catch( err => {\r\n            dispatch({\r\n                type: CUSTOMER_INVOICES_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n}\r\n\r\nexport const getCustomerSalesOrders = (customerListID) => async (dispatch) => {\r\n    dispatch({\r\n        type: CUSTOMER_SALES_ORDERS_REQUEST\r\n    })\r\n    // await to recevie the current user before proceeding\r\n    await getCurrentUser(auth)\r\n        \r\n\r\n    // get the claims from the user\r\n    const {claims} = await auth.currentUser?.getIdTokenResult()\r\n\r\n    // query to be performed\r\n    let query = db.collection('salesorders')\r\n\r\n    //if query has state restrictions \r\n    if(claims?.restrictions?.states?.length > 0) {\r\n        query = query.where('ShipAddress.State', 'in', claims.restrictions.states )\r\n    }\r\n\r\n    // filter by the account \r\n    query = query.where(\"CustomerRef.ListID\",\"==\",customerListID)\r\n\r\n    // make query call\r\n    query\r\n    .get()\r\n        .then( snap => {\r\n            let result = []\r\n                snap.forEach( doc => result.push(doc.data()) )\r\n\r\n            dispatch({\r\n                type: CUSTOMER_SALES_ORDERS_SUCCESS,\r\n                payload: result\r\n            })\r\n        })\r\n        .catch( err => {\r\n            dispatch({\r\n                type: CUSTOMER_SALES_ORDERS_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n}\r\n\r\n\r\nexport const resetCustomerInfo = () => async (dispatch) => {\r\n    dispatch({type: CUSTOMER_INVOICES_RESET})\r\n}\r\n\r\nexport const getCustomerAppOrders = (customerListID) => async (dispatch, getState) => {\r\n    dispatch({\r\n        type: CUSTOMER_APP_ORDERS_REQUEST\r\n    })\r\n\r\n    try {\r\n        // make query for the orders\r\n        db.collection('orders')\r\n        .where(\"CustomerRef.ListID\",\"==\",customerListID)\r\n        .get()\r\n            .then( snap => {\r\n                let result = []\r\n                    snap.forEach( doc => {\r\n                        result.push({...doc.data(), id: doc.id})\r\n                    } )\r\n\r\n                dispatch({\r\n                    type: CUSTOMER_APP_ORDERS_SUCCESS,\r\n                    payload: result\r\n                })\r\n            })\r\n            .catch( err => {\r\n                dispatch({\r\n                    type: CUSTOMER_APP_ORDERS_FAIL,\r\n                    payload: err\r\n                })\r\n            })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: CUSTOMER_APP_ORDERS_FAIL,\r\n            payload: error\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\nfunction getCurrentUser(auth) {\r\n    return new Promise((resolve, reject) => {\r\n       const unsubscribe = auth.onAuthStateChanged(user => {\r\n          unsubscribe();\r\n          resolve(user);\r\n       }, reject);\r\n    });\r\n  }\r\n\r\n","import {\r\n    ENVIRONMENT_VAR_REQUEST,\r\n    ENVIRONMENT_VAR_SUCCESS,\r\n    ENVIRONMENT_VAR_FAIL,\r\n} from '../constants/environmentVariablesConstants'\r\n\r\n\r\nimport {rdb} from '../firebase'\r\n\r\nexport const getEnvironmentVariables = () => async (dispatch) => {\r\n    try{\r\n        // set status to loading \r\n        dispatch({\r\n            type: ENVIRONMENT_VAR_REQUEST,\r\n        })\r\n\r\n        await rdb.ref('/environementlists/').once('value', data => {\r\n            dispatch({\r\n                type: ENVIRONMENT_VAR_SUCCESS,\r\n                payload: data.val()\r\n            })\r\n        }, err => {\r\n            dispatch({\r\n                type: ENVIRONMENT_VAR_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n    } catch(error){\r\n        dispatch({\r\n            type: ENVIRONMENT_VAR_FAIL,\r\n            payload: error\r\n        })\r\n    }\r\n}","import React, { useState, useRef, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport AutoCompleteSection from './AutoCompleteSection';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getCustomerList } from '../actions/customerActions'\r\nimport { getEnvironmentVariables } from '../actions/environmentVariablesActions'\r\n\r\nimport { Link, useLocation} from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch()\r\n    const [searchBoxStatus, setSearchBoxStatus] = useState(false)\r\n    const [searchBoxText, setSearchBoxText] = useState('')\r\n\r\n    const history = useHistory()\r\n    const textInput = useRef(null)\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin;\r\n\r\n    // Run Once when app Load\r\n    useEffect(()=>{\r\n        if(userInfo){\r\n            // get the customer lists \r\n            dispatch(getCustomerList())\r\n            dispatch(getEnvironmentVariables())\r\n\r\n            // get the environment lists\r\n            // item list\r\n            // rep list\r\n            // terms list\r\n            // price level list \r\n            // aging report level list \r\n            \r\n        }\r\n\r\n    },[userInfo])\r\n\r\n\r\n    const sideNav = useSelector(state => state.sideNav)\r\n    const searchClickHandler = () => {\r\n        if(!searchBoxStatus){\r\n            setSearchBoxStatus(true)\r\n            textInput.current.focus()\r\n        } else{\r\n            setSearchBoxStatus(false)\r\n        }\r\n\r\n    }\r\n\r\n    const arrowClickHandler = () => {\r\n\r\n        // go back in history\r\n        history.goBack()\r\n    }\r\n\r\n    const barsClickHandler = () => {\r\n        console.log('clicked bars')\r\n        dispatch({type: \"TOGGLE_SIDENAV\"})\r\n    }\r\n\r\n    const resetSearchBar = () => {\r\n        setSearchBoxText('')\r\n        searchClickHandler()\r\n    }\r\n\r\n    const handleAutoCompleteClick = (customer) => {\r\n        history.push(`/customerpage/${customer.ListID}`)\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <div className=\"left-navbar\" >\r\n                {!searchBoxStatus && (\r\n                    <>\r\n                    {!sideNav && (<div className=\"sidenav-btn\" onClick={barsClickHandler}>\r\n                        <button >\r\n                            <i className=\"fas fa-bars\"></i>\r\n                        </button>\r\n                    </div>)}\r\n                    <div className=\"back-btn\" onClick={arrowClickHandler}>\r\n                        <button>\r\n                            <i className=\"fas fa-arrow-left\"></i>\r\n                        </button>\r\n                    </div>\r\n                    </>)\r\n                }\r\n            </div>\r\n            <div className=\"search\">\r\n                <div className=\"searchbar-container\">\r\n                    <input \r\n                        id=\"main-search\" \r\n                        ref={textInput} \r\n                        type=\"text\" \r\n                        className={`input ${searchBoxStatus && 'active'}`} \r\n                        placeholder=\"Search...\"\r\n                        value={searchBoxText}\r\n                        onChange={(e) => setSearchBoxText(e.target.value)}/>\r\n                    {searchBoxStatus ? <AutoCompleteSection searchBoxText={searchBoxText} resetMainSearchBar={resetSearchBar} handleClick={handleAutoCompleteClick}/> : ''}     \r\n                </div>\r\n                <button className=\"btn\" onClick={searchClickHandler}>\r\n                        {!searchBoxStatus ? (\r\n                            <i className='fas fa-search'></i>\r\n                        ) : (\r\n                            <i className='fas fa-times-circle active'></i>\r\n                        )}\r\n                </button>\r\n                    \r\n                \r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect } from 'react'\r\n\r\nimport { Link, useLocation} from 'react-router-dom'\r\n\r\nconst Footer = () => {\r\n\r\n    const { pathname } = useLocation();\r\n    const active = 'active-footer-btn'\r\n    \r\n    return (\r\n        <div className=\"footer\">\r\n            <ul>\r\n                <li className={pathname === '/' ? 'footer-btn active-footer-btn' : 'footer-btn'} target=\"home-page\">\r\n                    <Link to=\"/\"><i className=\"fas fa-home\" aria-hidden=\"true\"></i><p>Home</p></Link>\r\n                </li>\r\n                <li className={pathname === '/notecreate' ? 'footer-btn active-footer-btn' : 'footer-btn'} target=\"add-note-page\">\r\n                    <Link to=\"/notecreate\"><i className=\"fas fa-pen\" aria-hidden=\"true\"></i><p>Note</p></Link>\r\n                </li>\r\n                <li className={pathname === '/reportspage' ? 'footer-btn active-footer-btn' : 'footer-btn'} target=\"reports-page\">\r\n                    <Link to=\"/reportspage\"><i className=\"fas fa-chart-line\" style={{marginTop: '1px'}} aria-hidden=\"true\"></i><p>Reports</p></Link>\r\n                </li>\r\n                <li className={pathname === '/ordercreate' ? 'footer-btn active-footer-btn' : 'footer-btn'} target=\"add-order-page\">\r\n                    <Link to=\"/ordercreate\"><i className=\"fas fa-file-invoice-dollar\" aria-hidden=\"true\"></i><p>Order</p></Link>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\n\r\nconst Button = ({typeBtn, onClick, text}) => {\r\n\r\n    switch (typeBtn) {\r\n        case 'Submit':\r\n            return (\r\n                    <button type=\"submit\" className=\"submit\"> \r\n                        <i className=\"far fa-paper-plane\"></i> \r\n                        &nbsp;&nbsp;Submit\r\n                    </button> \r\n                    )\r\n        case 'SubmitEscapeForm':\r\n            return (\r\n                    <button type=\"button\" className=\"submit\" onClick={onClick}> \r\n                        <i className=\"far fa-paper-plane\"></i> \r\n                        &nbsp;&nbsp;Submit\r\n                    </button> \r\n                    )\r\n        case 'AddUser':\r\n            return (\r\n                    <button type=\"button\" onClick={onClick} style={{float: 'right'}}> \r\n                        <i className=\"fas fa-plus-square\"></i>\r\n                        &nbsp;&nbsp;Add User\r\n                    </button> \r\n                    )\r\n        case 'Edit':\r\n            return (\r\n                    <button type=\"button\" onClick={onClick}> \r\n                       <i className=\"fas fa-edit\"></i>\r\n                        &nbsp;&nbsp;Edit\r\n                    </button> \r\n                    )\r\n        case 'Login':\r\n            return (\r\n                    <button type=\"submit\" className=\"login\"> \r\n                        <i className=\"far fa-paper-plane\"></i> \r\n                        &nbsp;&nbsp;Login\r\n                    </button> \r\n                    )\r\n        case 'Clear':\r\n            return (\r\n                    <button type=\"button\" className=\"clear\" onClick={onClick}> \r\n                        <i className=\"fas fa-eraser\"></i>\r\n                        &nbsp;&nbsp;Clear\r\n                    </button> \r\n                    )\r\n        case 'Filter':\r\n            return (\r\n                    <button type=\"button\" className=\"clear\" onClick={onClick}> \r\n                        <i className=\"fas fa-filter\"></i>\r\n                        &nbsp;&nbsp;Filter\r\n                    </button> \r\n                    )\r\n        case 'Next':\r\n            return (\r\n                    <button type=\"button\" className=\"clear\" onClick={onClick}> \r\n                        Next&nbsp;&nbsp;\r\n                        <i className=\"fas fa-angle-right\"></i>\r\n                    </button> \r\n                    )\r\n        case 'Load':\r\n            return (\r\n                    <button type=\"button\" className=\"clear\" onClick={onClick} style={{float: 'right'}}> \r\n                        {text}&nbsp;&nbsp;\r\n                        <i className=\"fas fa-angle-right\"></i>\r\n                    </button> \r\n                    )\r\n        case 'Close':\r\n            return (\r\n                    <button type=\"button\" className=\"clear\" onClick={onClick}> \r\n                        Close&nbsp;&nbsp;\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </button> \r\n                    )\r\n        case 'Delete':\r\n            return (\r\n                    <button type=\"button\" className=\"clear\" onClick={onClick}> \r\n                        <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\r\n                        Delete\r\n                    </button> \r\n                    )\r\n        case 'Prev':\r\n            return (\r\n                    <button type=\"button\" className=\"clear\" onClick={onClick}> \r\n                        <i className=\"fas fa-angle-left\"></i>\r\n                        &nbsp;&nbsp;Previous\r\n                    </button> \r\n                    )\r\n        case 'Yes':\r\n            return (\r\n                    <button type=\"button\" className=\"submit\" onClick={onClick}> \r\n                        Yes&nbsp;&nbsp;\r\n                        <i className=\"fas fa-check\"></i>\r\n                    </button> \r\n                    )\r\n        case 'Ok':\r\n            return (\r\n                    <button type=\"button\" onClick={onClick}> \r\n                        Ok&nbsp;&nbsp;\r\n                        <i className=\"fas fa-check\"></i>\r\n                    </button> \r\n                    )\r\n        case 'No':\r\n            return (\r\n                    <button type=\"button\" className=\"clear\" onClick={onClick}> \r\n                        No&nbsp;&nbsp;\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </button> \r\n                    )\r\n                            case 'No':\r\n            return (\r\n                    <button type=\"button\" className=\"clear\" onClick={onClick}> \r\n                        No&nbsp;&nbsp;\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </button> \r\n                    )\r\n                    \r\n        default:\r\n            return (\r\n                <button> \r\n                    <i className=\"far fa-paper-plane\"></i> \r\n                    &nbsp;&nbsp;Click Here\r\n                </button> \r\n                )\r\n    }\r\n}\r\n\r\nexport default Button\r\n","import React, { useEffect } from 'react'\r\nimport Button from '../components/Button'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nconst PageTitle = ({subtitle,title, btns, showCurrentDate, btnFunc}) => {\r\n    const {dayName,monthName,day,year} = getCurrentDate()\r\n\r\n    return (\r\n        <>\r\n        <div className='page-title'>\r\n            <div className='title'>\r\n                <h2>{title}</h2>\r\n                <p>{subtitle}</p>\r\n            </div>\r\n            {btns && (\r\n                <div className='btn-container'>\r\n                    {btns.map(btn => (\r\n                        <Button key={btn} typeBtn={btn} onClick={btnFunc} />\r\n                    ))} \r\n                </div>\r\n            )}\r\n            {showCurrentDate && (\r\n                <div className=\"date-container\">\r\n                    <h2>{dayName}</h2>\r\n                    <p>{monthName} {day}, {year}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst getCurrentDate = () => {\r\n    const obj = {}\r\n\r\n    const date = new Date()\r\n    obj.year = date.getFullYear()\r\n    obj.monthName = date.toLocaleString('default',{month: 'long'})\r\n    obj.dayName = date.toLocaleString('default',{weekday: 'long'})\r\n    obj.day = date.getDate()\r\n\r\n    return obj\r\n}\r\n\r\nPageTitle.propTypes = {\r\n    subtitle : PropTypes.string,\r\n    title : PropTypes.string,\r\n    type : PropTypes.string,\r\n    btns : PropTypes.array,\r\n    showCurrentDate : PropTypes.bool,\r\n}\r\nPageTitle.defaultProps = {\r\n    subtitle : '',\r\n    title : 'Page Title',\r\n    type : 'left',\r\n    btns: [],\r\n    showCurrentDate: false\r\n}\r\n\r\nexport default PageTitle\r\n\r\n// BTN TYPE \r\n\r\n// Edit , Delete, Clear, Filter, Filter, Sort\r\n\r\n","import React, {useState} from 'react'\r\nimport Button from './Button'\r\n\r\n\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n\r\n\r\nconst ModalContainer = ({modalType, msg, acceptMethod=()=>(null), declineMethod =()=>(null)}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const handleDecline = () => {\r\n        declineMethod()\r\n    }\r\n\r\n    const handleAccept = () => {\r\n        acceptMethod()\r\n    }\r\n\r\n    switch (modalType) {\r\n        case 'question':\r\n            return (\r\n                <div className='modal-container'>\r\n                    <div className=\"modal-content\">\r\n                        <p className=\"modal-question-text\">{msg}</p>\r\n                        <br/>\r\n                        <div className=\"modal-footer\">\r\n                            <Button typeBtn=\"No\" onClick={handleDecline}/>\r\n                            <Button typeBtn=\"Yes\" onClick={handleAccept}/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        case 'alert':\r\n            return (\r\n                <div className='modal-container'>\r\n                    <div className=\"modal-content\">\r\n                        \r\n                        <p className=\"modal-question-text\">\r\n                        <i className=\"fas fa-exclamation-circle bigIcon\"></i>\r\n                            <br/><br/>&nbsp;&nbsp;{(msg.split(\"\\n\")).map( (line,i) => {\r\n                            return (<span key={i}>{line}<br/></span>)\r\n                            })}\r\n                        </p>\r\n                        <div className=\"modal-footer\">\r\n                            <Button typeBtn=\"Close\" onClick={handleAccept}/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        case 'warning':\r\n            return (\r\n                <div className='modal-container'>\r\n                    <div className=\"modal-content\">\r\n                        <p className=\"modal-question-text\">{msg}</p>\r\n                        <div className=\"modal-footer\">\r\n                            <Button typeBtn=\"No\"/>\r\n                            <Button typeBtn=\"Yes\"/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        case 'error':\r\n            return (\r\n                <div className='modal-container'>\r\n                    <div className=\"modal-content\">\r\n                        <p className=\"modal-question-text\">{msg}</p>\r\n                        <div className=\"modal-footer\">\r\n                            <Button typeBtn=\"No\"/>\r\n                            <Button typeBtn=\"Yes\"/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='modal-container'>\r\n                    <div className=\"modal-content\">\r\n                        <p className=\"modal-question-text\">{msg}</p>\r\n                        <div className=\"modal-footer\">\r\n                            <Button typeBtn=\"No\"/>\r\n                            <Button typeBtn=\"Yes\"/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n    }\r\n    \r\n}\r\n\r\nexport default ModalContainer\r\n","// Import date methods for date handling \r\nimport { startOfDay ,startOfYesterday,startOfWeek, startOfMonth, startOfYear } from 'date-fns'\r\nimport { endOfDay,endOfYesterday, endOfWeek, endOfMonth, endOfYear} from 'date-fns'\r\nimport { subMonths , subWeeks } from 'date-fns'\r\n\r\n\r\nexport const standardDateFormatFromQb = (date) => {\r\n    const dateArr = date.split(\"-\")\r\n    return `${dateArr[1]}/${dateArr[2]}/${dateArr[0]}`\r\n}\r\n\r\nexport const standardDateFormat = (date) => {\r\n    date = new Date(date)\r\n   return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n}\r\n\r\nexport const formatDateTime  = (date) => {\r\n    let dateString =  `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n    let timeString = date.toLocaleTimeString('en-US', { hour: 'numeric', hour12: true, minute: 'numeric' })\r\n\r\n    return dateString + ' ' +  timeString\r\n}\r\n\r\nexport const dateSelectors = {\r\n    Today : {\r\n        from : startOfDay(new Date()),\r\n        to : endOfDay(new Date())\r\n    },\r\n    Yesterday : {\r\n        from :startOfYesterday(new Date()),\r\n        to : endOfYesterday(new Date())\r\n    },\r\n    ['This Week'] : {\r\n        from : startOfWeek(new Date(), {weekStartsOn: 1}),\r\n        to: endOfWeek(new Date(), {weekStartsOn: 1})\r\n    },\r\n    ['Last Week'] : { \r\n        from : subWeeks(startOfWeek(new Date(), {weekStartsOn: 1}),1),\r\n        to: subWeeks(endOfWeek(new Date(), {weekStartsOn: 1}),1)\r\n    },\r\n    ['This Month'] : {\r\n        from : startOfMonth(new Date()),\r\n        to: endOfMonth(new Date())\r\n    },\r\n    ['Last Month'] : {\r\n        from : subMonths(startOfMonth(new Date()), 1),\r\n        to: subMonths(endOfMonth(new Date()), 1)\r\n    },\r\n    ['This Year'] : {\r\n        from : startOfYear(new Date()),\r\n        to: endOfYear(new Date())\r\n    },\r\n    ['Last Year'] : {\r\n        from : startOfYear(new Date(new Date().setFullYear(new Date().getFullYear() - 1))),\r\n        to: endOfYear(new Date(new Date().setFullYear(new Date().getFullYear() - 1)))\r\n    }\r\n}","export default class TableCSVExporter {\r\n    constructor (table, includeHeaders = true) {\r\n        this.table = table;\r\n        this.rows = Array.from(table.querySelectorAll(\"tr\"));\r\n\r\n        if (!includeHeaders && this.rows[0].querySelectorAll(\"th\").length) {\r\n            this.rows.shift();\r\n        }\r\n    }\r\n\r\n    convertToCSV () {\r\n        const lines = [];\r\n        const numCols = this._findLongestRowLength();\r\n        \r\n        for (const row of this.rows) {\r\n            let line = \"\";\r\n\r\n            for (let i = 0; i < numCols; i++) {\r\n                if (row.children[i] !== undefined) {\r\n                    line += TableCSVExporter.parseCell(row.children[i]);\r\n                }\r\n\r\n                line += (i !== (numCols - 1)) ? \",\" : \"\";\r\n            }\r\n\r\n            lines.push(line);\r\n        }\r\n\r\n        return lines.join(\"\\n\");\r\n    }\r\n\r\n\r\n    _findLongestRowLength () {\r\n        return this.rows.reduce((l, row) => row.childElementCount > l ? row.childElementCount : l, 0);\r\n    }\r\n\r\n    static parseCell (tableCell) {\r\n        let parsedValue = tableCell.textContent;\r\n\r\n\r\n        // Replace all double quotes with two double quotes\r\n        parsedValue = parsedValue.replace(/\"/g, `\"\"`);\r\n\r\n        // If value contains comma, new-line or double-quote, enclose in double quotes\r\n        parsedValue = /[\",\\n]/.test(parsedValue) ? `\"${parsedValue}\"` : parsedValue;\r\n\r\n        return parsedValue;\r\n    }\r\n}\r\n\r\n\r\n","import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport accounting from 'accounting-js'\r\n\r\nimport {  standardDateFormatFromQb, standardDateFormat } from '../utils/DateMethods'\r\n\r\n\r\nimport TableCSVExporter from '../utils/TableCSVExporter'\r\nimport Button from '../components/Button'\r\n\r\nimport { differenceInDays } from 'date-fns'\r\n\r\n\r\nconst TransactionTable = ({data, type, onClick, addBtnClick, editUserClick, deleteUserClick}) => {\r\n    const history = useHistory()\r\n\r\n    // grab the current active customer\r\n    const customerData = useSelector(state => state.customerDetails)\r\n    const { loading, customerInfo } = customerData;\r\n\r\n\r\n    // init headers \r\n    let headers = []\r\n\r\n    // table references \r\n    const customerPageInvoices = useRef(null)\r\n    const customerPageSalesOrders = useRef(null)\r\n    const customerPageAppOrders = useRef(null)\r\n    const customerListTable = useRef(null)\r\n    const iventoryListStatus = useRef(null)\r\n    const salesOrderProducts = useRef(null)\r\n\r\n\r\n    // export to csv method\r\n    const handleExportCsvClick = (htmlTable) => {\r\n\r\n        const exporter = new TableCSVExporter(htmlTable.current);\r\n        const csvOutput = exporter.convertToCSV();\r\n        const csvBlob = new Blob([csvOutput], { type: \"text/csv\" });\r\n        const blobUrl = URL.createObjectURL(csvBlob);\r\n        const anchorElement = document.createElement(\"a\");\r\n\r\n        anchorElement.href = blobUrl;\r\n        anchorElement.download = \"table-export.csv\";\r\n        anchorElement.click();\r\n\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(blobUrl);\r\n        }, 500);\r\n    }\r\n\r\n    switch (type) {\r\n        case 'customer-page-invoices':\r\n            headers= ['#','Date','Total','Balance','Age']\r\n\r\n            console.log(data)\r\n            const invoiceRowClickHandler = invNum =>{\r\n                history.push(`/invoiceview/${invNum}`)\r\n            }\r\n            return (\r\n                <>\r\n                {customerInfo.ListID !== data[0]?.CustomerRef?.ListID ? (\r\n                        <p className=\"feed-result-text\"> Press \"Load Invoices\" </p>\r\n                    ) : (\r\n                <div className=\"transaction-table\">\r\n                    {/* Table Title  */}\r\n                    <div className=\"info-section flex\">\r\n                        <p className=\"section-title\"> {data?.length} Invoices for { customerInfo && customerInfo.CompanyName}</p>\r\n                        <br/>\r\n                        <button onClick={ () => handleExportCsvClick(customerPageInvoices)}> Export <i className=\"fas fa-file-csv\"></i> </button>\r\n                    </div>\r\n\r\n                    <table ref={customerPageInvoices}>\r\n                        <thead>\r\n                            <tr>\r\n                                {headers.map((header,i) => (\r\n                                    <th key={i}>{header}</th>\r\n                                ))}\r\n                            </tr> \r\n                        </thead>\r\n                        <tbody>\r\n                            {data?.length > 0 && \r\n                            data.sort((a,b) => (new Date(b.TxnDate) - new Date(a.TxnDate)))\r\n                            .map((transaction,i) => {\r\n                                const invoiceOverDue = Number.parseInt(transaction.BalanceRemaining) > 0 \r\n                                && determineDueAge(transaction.DueDate) > 0   \r\n                                ? true: false\r\n                                \r\n                                return (\r\n                                <tr key={i} className={invoiceOverDue ? 'problem' : ''} onClick={() => invoiceRowClickHandler(transaction.RefNumber)}>\r\n                                    <td>{transaction.RefNumber}</td>\r\n                                    <td>{standardDateFormatFromQb(transaction.TxnDate)}</td>\r\n                                    <td>{accounting.formatMoney(transaction.Subtotal)}</td>\r\n                                    <td>{accounting.formatMoney(transaction.BalanceRemaining)}</td>\r\n                                    <td className={invoiceOverDue ? 'red' : '' }>{Number.parseInt(transaction.BalanceRemaining) > 0 \r\n                                        ? determineDueAge(transaction.DueDate)\r\n                                        : 0}</td>\r\n                                </tr>\r\n                            )})}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                )}\r\n                </>\r\n            ) ;\r\n        case 'customer-page-salesorders':\r\n                headers= ['#','Date','Terms','Amount','Open']\r\n                const salesOrderClickHandler = soNum =>{\r\n                    history.push(`/salesorderview/${soNum}`)\r\n                }\r\n                return (\r\n                    <>\r\n                    {customerInfo.ListID !== data[0]?.CustomerRef?.ListID ? (\r\n                        <p className=\"feed-result-text\"> Press \"Load Sales-Orders\" </p>\r\n                    ) : (\r\n                        <div className=\"transaction-table\">\r\n                        {/* Table Title  */}\r\n                        <div className=\"info-section flex\">\r\n                            <p className=\"section-title\">Sales Orders for { customerInfo && customerInfo.CompanyName}</p>\r\n                            <br/>\r\n                            <button onClick={ () => handleExportCsvClick(customerPageSalesOrders)}> Export <i className=\"fas fa-file-csv\"></i> </button>\r\n                        </div>\r\n    \r\n                        \r\n                        <table ref={customerPageSalesOrders}>\r\n                            <thead>\r\n                                <tr>\r\n                                    {headers.map((header,i) => (\r\n                                        <th key={i}>{header}</th>\r\n                                    ))}\r\n                                </tr> \r\n                            </thead>\r\n                            <tbody>\r\n                                {data?.length > 0 && \r\n                                data.sort((a,b) => (new Date(b.TxnDate) - new Date(a.TxnDate)))\r\n                                .map((transaction,i) => {\r\n                                    return (\r\n                                    <tr key={i} className={transaction.IsFullyInvoiced === 'true' ? '' : 'warning'} onClick={() => salesOrderClickHandler(transaction.RefNumber)}>\r\n                                        {console.log(transaction.IsFullyInvoiced)}\r\n                                        <td>{transaction.RefNumber}</td>\r\n                                        <td>{standardDateFormatFromQb(transaction.TxnDate)}</td>\r\n                                        <td>{transaction.TermsRef?.FullName}</td>\r\n                                        <td>{accounting.formatMoney(transaction.Subtotal)}</td>\r\n                                        <td>{transaction.IsFullyInvoiced === 'true' ? 'Closed' : 'Pending'}</td>\r\n                                    </tr>\r\n                                )})}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    )}\r\n                    </>\r\n                ) ;\r\n        case 'lists-customers':\r\n        headers= ['Name','City', 'State','Contact','ZIP', 'Acc#']\r\n        \r\n        const customerRowClickHandler = customerListID =>{\r\n            history.push(`/customerpage/${customerListID}`)\r\n        }\r\n        return (\r\n            <div className=\"transaction-table\">\r\n                {data.length > 0 ? (\r\n                    <>\r\n                    {/* Table Title  */}\r\n                    <div className=\"info-section flex\">\r\n                        <p className=\"section-title\">Showing {data.length} Customer(s) </p>\r\n                        <button onClick={ () => handleExportCsvClick(customerListTable)}> Export <i className=\"fas fa-file-csv\"></i> </button>\r\n                    </div>\r\n\r\n                    <table ref={customerListTable}>\r\n                        <thead>\r\n                            <tr>\r\n                                {headers.map((header,i) => (\r\n                                    <th key={i}>{header}</th>\r\n                                ))}\r\n                            </tr> \r\n                        </thead>\r\n                        <tbody>\r\n                            {data.length > 0 && \r\n                            data\r\n                            // .sort( (a,b) => {\r\n                            //     if((a.CompanyName < b.CompanyName)) return -1\r\n                            //     if((a.CompanyName > b.CompanyName)) return 1\r\n                            // })\r\n                            .map((customer,i) => {                  \r\n                                return (\r\n                                <tr className='fade' key={i} onClick={() => customerRowClickHandler(customer.ListID)}>\r\n                                    <td>{customer.CompanyName}</td>\r\n                                    <td>{customer.City}</td>\r\n                                    <td>{customer.State}</td>\r\n                                    <td>{customer.FirstName} {customer.LastName}</td>\r\n                                    <td>{customer.PostalCode}</td>\r\n                                    <td>{customer.AccountNumber}</td>\r\n                                </tr>\r\n                            )})}\r\n                        </tbody>\r\n                    </table>\r\n                    </>\r\n                ) : (\r\n                    <p style={{'textAlign': 'center'}}>No results</p>\r\n                ) }\r\n            </div>\r\n        ) ;\r\n        case 'customer-page-apporders':\r\n            headers = ['Date','Order Id #','Amount', 'Author']\r\n\r\n            const appOrderRowClickHandler = (orderId) =>{\r\n                history.push(`/orderview/${orderId}`)\r\n            }\r\n\r\n            return (\r\n                <>\r\n                {customerInfo.ListID !== data[0]?.CustomerRef?.ListID ? (\r\n                        <p className=\"feed-result-text\"> Press \"Load App-Orders\" </p>\r\n                    ) : (\r\n                <div className=\"transaction-table\">\r\n                    {/* Table Title  */}\r\n                    <div className=\"info-section\">\r\n                            <p className=\"section-title\">App Orders for { customerInfo && customerInfo.CompanyName}</p>\r\n                            <br/>\r\n                            <button onClick={ () => handleExportCsvClick(customerPageAppOrders)}> Export <i className=\"fas fa-file-csv\"></i> </button>\r\n                        </div>\r\n                    <table ref={customerPageAppOrders}>\r\n                        <thead>\r\n                            <tr>\r\n                                {headers.map((header,i) => (\r\n                                    <th key={i}>{header}</th>\r\n                                ))}\r\n                            </tr> \r\n                        </thead>\r\n                        <tbody>\r\n                            {data && data.length > 0 ? (\r\n                            data.sort((a,b) => (new Date(b.TimeStamp) - new Date(a.TimeStamp)))\r\n                            .map((transaction,i) => {\r\n                                \r\n                                return (\r\n                                <tr key={i} onClick={() => appOrderRowClickHandler(transaction.id)}>\r\n                                    <td>{standardDateFormat(transaction.TimeStamp.toDate())}</td>\r\n                                    <td>{transaction.id}</td>\r\n                                    <td>{accounting.formatMoney(transaction.OrderTotals.amount)}</td>\r\n                                    <td>{transaction.AuthorRef.displayName ? transaction.AuthorRef.displayName : 'Anonymous'}</td>\r\n                                </tr>)\r\n\r\n                            })) :  (<></>)}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                )} \r\n                </>)\r\n        case 'admin-users-display':\r\n            headers = ['Role','Name','Email', 'State Restriction', 'Initials', 'Last Login', '']\r\n\r\n            const usersOnRowClick = (orderId) =>{\r\n                // history.push(`/orderview/${orderId}`)\r\n            }\r\n\r\n            return (\r\n                <div className=\"transaction-table users-table\">\r\n                <br/>\r\n                    <h2>User List</h2>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                {headers.map((header,i) => (\r\n                                    <th key={i}>{header}</th>\r\n                                ))}\r\n                            </tr> \r\n                        </thead>\r\n                        <tbody>\r\n                            {data && data.length > 0 ? (\r\n                            data.sort((a,b) => (new Date(b.TimeStamp) - new Date(a.TimeStamp)))\r\n                            .map((user,i) => {\r\n                                \r\n                                return (\r\n                                <tr key={i} onClick={() => usersOnRowClick(user.id)}>\r\n                                    <td>{user.role}</td>\r\n                                    <td>{user.firstname + \" \" + user.lastname}</td>\r\n                                    <td>{user.email}</td>\r\n                                    <td>{user.restrictions?.states.map(state => <span key={state}>{state} </span>)}</td>\r\n                                    <td>{user.firstname?.substring(0,1) + user.lastname?.substring(0,1)}</td>\r\n                                    <td>{user.lastLogin}</td>\r\n                                    <td className='td-btns'> \r\n                                        <Button typeBtn=\"Edit\" onClick={e => editUserClick?.(user)}/> &nbsp;&nbsp; \r\n                                        {/* <Button typeBtn=\"Delete\" onClick={e => deleteUserClick?.(user.id)}/> */}\r\n                                    </td>\r\n                                </tr>)\r\n\r\n                            })) :  (<></>)}\r\n                        </tbody>\r\n                    </table>\r\n                    <br/>\r\n                    <Button typeBtn='AddUser' onClick={addBtnClick}></Button>\r\n                </div>\r\n            )\r\n\r\n        case 'lists-invoices':\r\n        headers= ['#','Name','Terms','Date','Total', 'Age']\r\n        const invoiceRowClickHandlerListPage = invNum =>{\r\n            history.push(`/invoiceview/${invNum}`)\r\n        }\r\n        return (\r\n            <>\r\n            <div className=\"transaction-table\">\r\n                {/* Table Title  */}\r\n                <div className=\"info-section flex\">\r\n                    <p className=\"section-title\"> {data?.length > 1 ? data?.length : ''} Invoices</p>\r\n                    <br/>\r\n                    <button onClick={ () => handleExportCsvClick(customerPageInvoices)}> Export <i className=\"fas fa-file-csv\"></i> </button>\r\n                </div>\r\n\r\n                \r\n                <table ref={customerPageInvoices}>\r\n                    <thead>\r\n                        <tr>\r\n                            {headers.map((header,i) => (\r\n                                <th key={i}>{header}</th>\r\n                            ))}\r\n                        </tr> \r\n                    </thead>\r\n                    <tbody>\r\n                        {data?.length > 0 && \r\n                        data.sort((a,b) => (b.RefNumber - a.RefNumber))\r\n                        .map((transaction,i) => {\r\n                            const invoiceOverDue = Number.parseInt(transaction.BalanceRemaining) > 0  && determineDueAge(transaction.DueDate) > 0 ? true: false\r\n                            \r\n                            return (\r\n                            <tr key={i} className={invoiceOverDue ? 'problem' : ''} onClick={() => invoiceRowClickHandlerListPage(transaction.RefNumber)}>\r\n                                <td>{transaction.RefNumber}</td>\r\n                                <td>{transaction.CustomerRef?.FullName}</td>\r\n                                <td>{transaction.TermsRef?.FullName}</td>\r\n                                <td>{standardDateFormatFromQb(transaction.TxnDate)}</td>\r\n                                <td>{accounting.formatMoney(transaction.Subtotal)}</td>\r\n                                <td className={invoiceOverDue ? 'red' : '' }>{Number.parseInt(transaction.BalanceRemaining) > 0 ? determineDueAge(transaction.DueDate): 0}</td>\r\n                            </tr>\r\n                        )})}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            </>\r\n        ) ;\r\n    \r\n        case 'lists-inventory-status':\r\n                headers= ['Item','Qty on Hand','Qty on Sales Order']\r\n\r\n                return (\r\n                    <>\r\n                    {!data ? <p>No data</p> : (\r\n                        <div className=\"transaction-table\">\r\n                        <div className=\"info-section flex\">\r\n                            <p className=\"section-title\">Inventory Status </p>\r\n                            <br/>\r\n                            <button onClick={ () => handleExportCsvClick(iventoryListStatus)}> Export <i className=\"fas fa-file-csv\"></i> </button>\r\n                        </div>\r\n\r\n                        <table ref={iventoryListStatus}>\r\n                        <thead>\r\n                            <tr>\r\n                            {headers.map((header,i) => (\r\n                                    <th key={i}>{header}</th>\r\n                                ))}\r\n                            </tr>\r\n                            \r\n                        </thead>\r\n                        {data.length < 1 ?  <></> : (\r\n                            <tbody>\r\n                            {data\r\n                            .sort((a,b) => a.Name.localeCompare(b.Name))\r\n                            .map((product, index, arr) => {\r\n                                //separate sections in the order form \r\n                                let isDiffFromPrev = false\r\n                                if(index > 0 && arr[index - 1].FullName.substring(0,4) !== product.FullName.substring(0,4)){\r\n                                    isDiffFromPrev = true\r\n                                }\r\n                                return (\r\n                                    <tr key={product.ListID} \r\n                                    className={\r\n                                        (product.QuantityOnHand < 100 ? product.QuantityOnHand < 5 ? \"problem\" : 'warning' : '') \r\n                                        + (isDiffFromPrev ? \"\" : \"\")}>\r\n                                        <td>{product.SalesDesc}</td>\r\n                                        <td>{product.QuantityOnHand}</td>\r\n                                        <td>{product.QuantityOnSalesOrder}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                            </tbody>\r\n                        )}\r\n\r\n                        </table>\r\n                </div>\r\n                    )}\r\n                    </>\r\n                ) ;\r\n        case 'app-order-producs':\r\n                headers= ['Item','Description','Price', 'Qty']\r\n\r\n                return (\r\n                    <>\r\n                    {!data ? <p>No data</p> : (\r\n                        <div className=\"transaction-table\">\r\n                        <div className=\"info-section flex\">\r\n                            <p className=\"section-title\">Products Summary </p>\r\n                            <br/>\r\n                            <button onClick={ () => handleExportCsvClick(salesOrderProducts)}> Export <i className=\"fas fa-file-csv\"></i> </button>\r\n                        </div>\r\n\r\n                        <table ref={salesOrderProducts} id='order-page-summary-products'>\r\n                        <thead>\r\n                            <tr>\r\n                            {headers.map((header,i) => (\r\n                                    <th key={i}>{header}</th>\r\n                                ))}\r\n                            </tr>\r\n                        </thead>\r\n                        {data.length < 1 ?  <></> : (\r\n                            <tbody>\r\n                                <>\r\n                            {data\r\n                            .sort( (a, b) => a.productCode.localeCompare(b.productCode))\r\n                            .map( (product, index, arr) => {\r\n                                //separate sections in the order form \r\n                                let isDiffFromPrev = false\r\n                                if(index > 0 && arr[index - 1].productCode.substring(0,4) !== product.productCode.substring(0,4)){\r\n                                    isDiffFromPrev = true\r\n                                }\r\n\r\n                                return (\r\n                                    <tr key={`app-order-${product.productCode}`} listid={product.productCode} >\r\n                                        <td className='nowrap'>{product.productCode}</td>\r\n                                        <td>{product.name}</td>\r\n                                        <td>{accounting.formatMoney(product.price)}</td>\r\n                                        <td>{product.qty}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                            <tr>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td style={{fontWeight: 'bold'}}>{accounting.formatMoney(data.reduce( (acc, current) => (current.price * current.qty) + acc, 0))}</td>\r\n                                <td style={{fontWeight: 'bold'}}>{data.reduce( (acc, current) => current.qty + acc, 0)}</td>\r\n                            </tr>\r\n                            </>\r\n                            </tbody>\r\n                        )}\r\n\r\n                        </table>\r\n                </div>\r\n                    )}\r\n                    </>\r\n                ) ;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nconst determineDueAge = (date) => {\r\n    const daysDiff = differenceInDays(new Date(), new Date(date))\r\n    if(daysDiff < 0) return 0\r\n    return daysDiff\r\n}\r\n\r\nexport default TransactionTable\r\n\r\n\r\nconst statesList = [ \"-\", \"AK\",\r\n\"AL\",\r\n\"AR\",\r\n\"AS\",\r\n\"AZ\",\r\n\"CA\",\r\n\"CO\",\r\n\"CT\",\r\n\"DC\",\r\n\"DE\",\r\n\"FL\",\r\n\"GA\",\r\n\"GU\",\r\n\"HI\",\r\n\"IA\",\r\n\"ID\",\r\n\"IL\",\r\n\"IN\",\r\n\"KS\",\r\n\"KY\",\r\n\"LA\",\r\n\"MA\",\r\n\"MD\",\r\n\"ME\",\r\n\"MI\",\r\n\"MN\",\r\n\"MO\",\r\n\"MS\",\r\n\"MT\",\r\n\"NC\",\r\n\"ND\",\r\n\"NE\",\r\n\"NH\",\r\n\"NJ\",\r\n\"NM\",\r\n\"NV\",\r\n\"NY\",\r\n\"OH\",\r\n\"OK\",\r\n\"OR\",\r\n\"PA\",\r\n\"PR\",\r\n\"RI\",\r\n\"SC\",\r\n\"SD\",\r\n\"TN\",\r\n\"TX\",\r\n\"UT\",\r\n\"VA\",\r\n\"VI\",\r\n\"VT\",\r\n\"WA\",\r\n\"WI\",\r\n\"WV\",\r\n\"WY\"]\r\n\r\n\r\n","import React from 'react'\r\n\r\nimport { Bar } from 'react-chartjs-2'\r\nimport \"chartjs-plugin-datalabels\";\r\nimport accounting from 'accounting-js';\r\n\r\n\r\nconst ChartItem = ({type, chartData}) => {\r\n    // Bar.defaults.global.plugins.datalabels.anchor = 'end';\r\n    // Bar.defaults.global.plugins.datalabels.align = 'end';\r\n\r\n    console.log(chartData)\r\n\r\n    switch (type) {\r\n        case 'customer-page-sales-list':\r\n            const data = {\r\n                labels : Object.keys(chartData).filter( (year, index) => index >= Object.keys(chartData).length - 4).map(year => year),\r\n                datasets : [\r\n                    {\r\n                        \r\n                        data: Object.keys(chartData).filter( (year, index) => index >= Object.keys(chartData).length - 4).map(year => chartData[year].totalSales),\r\n                        backgroundColor : Object.keys(chartData).map( (year, index) => getDifferentColors(index)),\r\n                        \r\n                    }\r\n                ]\r\n            }\r\n            const options = {\r\n                //scaleLabel : label => '$' + label.value.toString(),\r\n                legend: {\r\n                    display: false\r\n                },\r\n                maintainAspectRatio: true,\r\n                responsive: true,\r\n                scales: {\r\n                  yAxes: [\r\n                    {\r\n                      ticks: {\r\n                        beginAtZero: true,\r\n                        callback: function(value, index, values) {\r\n                            if(parseInt(value) >= 1000){\r\n                              return '$' + value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                            } else {\r\n                              return '$' + value;\r\n                            }\r\n                          }\r\n                      },\r\n                    },\r\n                  ],\r\n                },\r\n                plugins: {\r\n                    datalabels: {\r\n                        anchor: 'end',\r\n                        align: 'start',\r\n                        offset: '-25',\r\n                        color: 'white',\r\n                        borderWidth: 4,\r\n                        font: {\r\n                            weight: 700,\r\n                        },\r\n                        display: ctx => {\r\n                            return true;\r\n                        },\r\n                        formatter: (ctx, data) => {\r\n                            const index = data.dataIndex\r\n                            const amount = data.dataset.data[index]\r\n                            return accounting.formatMoney(amount);\r\n                        }\r\n                    }\r\n                  }\r\n              }\r\n\r\n              return (\r\n                  <div className=\"chart-container bar\">\r\n                      <div className=\"info-section\" >\r\n                            <p className=\"section-title\">Sales by year</p>\r\n                        </div>\r\n                      <Bar data={data} options={options} />\r\n                  </div>\r\n              )\r\n        case 'home-page-sales-goals':\r\n        const data1 = {\r\n            labels : ['Something'],\r\n            datasets : [\r\n                {\r\n                    data: [50],\r\n                    backgroundColor : getDifferentColors(2), \r\n                }\r\n            ]\r\n        }\r\n        const options1 = {\r\n            //scaleLabel : label => '$' + label.value.toString(),\r\n            legend: {\r\n                display: false\r\n            },\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            scales: {\r\n                yAxes: [\r\n                {\r\n                    ticks: {\r\n                    beginAtZero: true,\r\n                    },\r\n                },\r\n                ],\r\n            },\r\n            plugins: {\r\n                datalabels: {\r\n                    anchor: 'end',\r\n                    align: 'end',\r\n                    color: 'white',\r\n                    borderWidth: 4,\r\n                    font: {\r\n                        weight: 800,\r\n                    },\r\n                    display: ctx => {\r\n                        return true;\r\n                    },\r\n                    formatter: (ctx, data) => {\r\n                        const index = data.dataIndex\r\n                        const amount = data.dataset.data[index]\r\n                        return accounting.formatMoney(amount);\r\n                    }\r\n                }\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className=\"chart-container bar\">\r\n                    <div className=\"info-section\" >\r\n                        <p className=\"section-title\">Sales by year</p>\r\n                    </div>\r\n                    <Bar data={data1} options={options1} />\r\n                </div>\r\n            )\r\n    \r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\n\r\nconst getDifferentColors = (index) => {\r\n    const colors = [\r\n        'rgba(255, 99, 132, 0.7)',\r\n        'rgba(54, 162, 235, 0.7)',\r\n        'rgba(255, 206, 86, 0.7)',\r\n        'rgba(75, 192, 192, 0.7)',\r\n        'rgba(153, 102, 255, 0.7)',\r\n        'rgba(255, 159, 64, 0.7)'\r\n    ]\r\n    return colors[index]\r\n}\r\n\r\n\r\n\r\nexport default ChartItem\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport { useDispatch, useSelector} from 'react-redux'\r\n\r\nimport Button from '../components/Button'\r\nimport PageTitle from '../components/PageTitle'\r\nimport ModalContainer from '../components/ModalContainer';\r\nimport TransactionTable from '../components/TransactionTable'\r\nimport ChartItem from '../components/ChartItem'\r\n\r\n\r\nconst HomePage = ({history}) => {\r\n\r\n    const [showModal,setShowModal] = useState(false)\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin;\r\n\r\n    const environmentVariables = useSelector(state => state.environmentVariables)\r\n    const { lists } = environmentVariables;\r\n    \r\n    const inventoryItems = lists?.itemList?.inventoryItems\r\n    const standardItems = lists?.orderForms?.standard?.products\r\n\r\n    const [inventoryToPass, setIntentoryToPass] = useState([])\r\n\r\n    const filterOutItems = () => {\r\n        if(inventoryItems && standardItems){\r\n            const standardItemsArr =  Object.keys(standardItems).map(o => o )\r\n            setIntentoryToPass(\r\n                Object.keys(inventoryItems)\r\n                .filter(o =>  standardItemsArr.includes(o) )\r\n                .map(o => inventoryItems[o] )\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    const createNote = e => {\r\n        console.log('note created')\r\n        setShowModal(false)\r\n    }\r\n\r\n    if(userInfo ){\r\n        // say hello to client\r\n    } else{\r\n        history.push('/login')\r\n    }\r\n    const handleBtn = () => {\r\n        setShowModal(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        filterOutItems()\r\n    }, [environmentVariables])\r\n    \r\n\r\n    return (\r\n        <div className=\"page-padding extra-large fade\">\r\n         {showModal && <ModalContainer modalType='question' msg='Are you sure you want to submit the note?' acceptMethod={createNote} />}\r\n\r\n        <PageTitle title='Home Page' subtitle='Welcome!' btns={[]} showCurrentDate={true}></PageTitle>\r\n        <br/><br/><br/>\r\n\r\n        <br/><br/><br/>\r\n\r\n        <TransactionTable data={inventoryToPass} type=\"lists-inventory-status\"/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n\r\n\r\n","import React, { useState, useEffect }from 'react'\r\nimport PageTitle from '../components/PageTitle'\r\nimport Button from '../components/Button'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport { login, loginWithPersistance} from '../actions/userActions'\r\nimport { auth } from '../firebase'\r\n\r\nimport ModalContainer  from '../components/ModalContainer'\r\n\r\n\r\nconst LoginPage = ({ history, location}) => {\r\n\r\n    // For the local state of fields \r\n    const [email, setEmail] = useState('test@test.com')\r\n    const [password, setPassword] = useState('test123')\r\n\r\n    // Modal method\r\n    const [showAlert,setShowAlert] = useState(false)\r\n\r\n    // declaring dispatch\r\n    const dispatch = useDispatch()\r\n\r\n    // Get the userInfo from the redux state  \r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {loading, error, userInfo } = userLogin\r\n\r\n    // on error change \r\n    useEffect(() => {\r\n        if(error){\r\n            setShowAlert(true)\r\n        }\r\n    }, [error])\r\n\r\n    // UseEffect functions when elements loads \r\n    // Check if the user is already signed in\r\n    // if logged in redirect the user to home page \r\n    useEffect(() => {  \r\n        // check if user is logged in already in firebase peristance\r\n        auth.onAuthStateChanged( data => dispatch(loginWithPersistance()))\r\n\r\n        if(userInfo) {\r\n            console.log(\"User Logged in \")\r\n            history.push(\"/\")\r\n        }\r\n    },[history,userInfo,dispatch])\r\n\r\n    // submit the state \r\n\r\n    // Handle when the user presses submit \r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(login(email,password))\r\n    }\r\n\r\n    // setTimeout(() => {\r\n    //     setEmail('test@test.com');\r\n    //     setPassword('test')\r\n    // }, 2000);\r\n\r\n    return (\r\n        <div className=\"page-padding small fade\">\r\n        {showAlert && <ModalContainer modalType='alert' msg='Wrong Password / User does not exist' acceptMethod={() => setShowAlert(false)} />}\r\n\r\n        <PageTitle title='Login' subtitle=\"Enter credentials\" btns={[]} showCurrentDate={true}></PageTitle> \r\n        \r\n        <i className=\"fas fa-user-circle big-logo\"></i>\r\n\r\n        <div className='page-container'>\r\n            <form onSubmit={submitHandler}>\r\n                <div className=\"input-section\">\r\n                    <div className='text-input-container'>\r\n                        <label htmlFor='email'>Email Address</label> \r\n                        <input type='email' name='email' value={email}/> \r\n                    </div>\r\n                    <div className='text-input-container'>\r\n                        <label htmlFor='email'>Password</label> \r\n                        <input type='password' name='password' value={password}/> \r\n                    </div>\r\n                </div>\r\n                <Button typeBtn=\"Login\"/> \r\n            </form>\r\n        </div>\r\n\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage\r\n","import {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGIN_RESET,\r\n    USER_LOGOUT,\r\n    USER_LOGOUT_ERROR,\r\n    USER_CREATE_REQUEST,\r\n    USER_CREATE_SUCCESS,\r\n    USER_CREATE_FAIL\r\n} from '../constants/userConstants'\r\n\r\nimport { auth } from '../firebase' \r\n\r\n// Update the login state with persistance\r\nexport const loginWithPersistance = () => async (dispatch) => {\r\n\r\n        if(auth.currentUser){\r\n            // get the custopm claims for the user\r\n            auth.currentUser.getIdTokenResult()\r\n            .then( idTokenResult => {\r\n                \r\n                dispatch({\r\n                    type: USER_LOGIN_SUCCESS,\r\n                    payload: {...auth.currentUser, ...{ claims: idTokenResult.claims }}\r\n                })\r\n                // save user data to localStorage\r\n                localStorage.setItem('userInfo', JSON.stringify(auth.currentUser))\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type:  USER_LOGIN_FAIL,\r\n                    payload : err\r\n                })\r\n            })\r\n\r\n        }\r\n}\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    dispatch({\r\n        type: USER_LOGIN_REQUEST\r\n    })\r\n\r\n    auth.signInWithEmailAndPassword(email, password)\r\n    .then((data) => {\r\n        // get the custopm claims for the user\r\n        auth.currentUser.getIdTokenResult()\r\n        .then( idTokenResult => {\r\n            \r\n            dispatch({\r\n                type:  USER_LOGIN_SUCCESS,\r\n                payload : {...data, ...{ claims: idTokenResult.claims }}\r\n            })\r\n            // save user data to localStorage\r\n            localStorage.setItem('userInfo', JSON.stringify(data))\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type:  USER_LOGIN_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n\r\n        \r\n    })\r\n    .catch((error) => {\r\n        dispatch({\r\n            type:  USER_LOGIN_FAIL,\r\n            payload : error\r\n        })\r\n        // const errorCode = error.code;\r\n        // const errorMessage = error.message;\r\n    });\r\n    \r\n}\r\n\r\n\r\n\r\nexport const logout = () => async (dispatch) => {\r\n\r\n    auth.signOut()\r\n    .then(() => {\r\n        dispatch({\r\n            type:  USER_LOGOUT,\r\n        })\r\n        // remove user from storage\r\n        localStorage.removeItem('userInfo')\r\n    })\r\n    .catch((error) => {\r\n        dispatch({\r\n            type:  USER_LOGOUT_ERROR,\r\n            payload : error\r\n        })\r\n        // const errorCode = error.code;\r\n        // const errorMessage = error.message;\r\n    });\r\n    \r\n}\r\n\r\nexport const createUser = () => async (dispatch) => {\r\n    console.log('create user here')\r\n}","import React, {useState} from 'react'\r\nimport Button from './Button'\r\n\r\n// to delete alll\r\nconst CustomInput = ({title,placeholder,elName,type, options, value, onChange, required, maxLength}) => {\r\n\r\n  const [textarearows, setTextAreaRows] = useState(8)\r\n\r\n  const handleTextArea = (elem) => {\r\n    if (elem.clientHeight < elem.scrollHeight){\r\n      //The element has a vertical scrollbar\r\n      setTextAreaRows(textarearows + 1)\r\n    }\r\n    //The element doesn't have a vertical scrollbar\r\n  }\r\n\r\n  switch (type) {\r\n    case 'text':\r\n      return (<div className='text-input-container'>\r\n                  <div><label htmlFor={elName} required={required && required} >{title}</label> </div>\r\n                  <div className=\"input-box\">\r\n                    <input type=\"text\" name={elName} placeholder={placeholder} value={value} onChange={onChange} required={required && required} maxLength={maxLength && maxLength}/> \r\n                    {value?.length > 1 && <button onClick={onChange} type=\"button\" className=\"input-clear\" tabIndex=\"-1\"></button>}\r\n                    <br/>\r\n                    {value?.length > 1 && <p className='input-size'>{value.length}/{maxLength}</p>}\r\n                  </div>\r\n                  \r\n                </div>)\r\n    \r\n    case 'email':\r\n      return (<div className='text-input-container'>\r\n                  <div><label htmlFor={elName} required={required && required} >{title}</label> </div>\r\n                  <div className=\"input-box\">\r\n                    <input type=\"email\" name={elName} placeholder={placeholder} value={value} onChange={onChange} required={required && required} maxLength={maxLength && maxLength}/> \r\n                    {value.length > 1 && <button onClick={onChange} type=\"button\" className=\"input-clear\" tabIndex=\"-1\"></button>}\r\n                    <br/>\r\n                    {value.length > 1 && <p className='input-size'>{value.length}/{maxLength}</p>}\r\n                  </div>\r\n                </div>) \r\n\r\n    case 'number':\r\n      return (<div className='text-input-container'>\r\n                  <div><label htmlFor={elName} required={required && required}>{title}</label> </div>\r\n                  <div className=\"input-box\">\r\n                    <input type=\"number\" min=\"0\" max=\"100\" name={elName} placeholder={placeholder} value={value} onChange={onChange} required={required && required}/> \r\n                  </div>\r\n                </div>)  \r\n\r\n    case 'text-selected':\r\n      return (<div className='text-input-container selected'>\r\n                <div><label htmlFor={elName} required={required && required}>{title} <i style={{color: '#F9C784'}}className=\"fas fa-check-square\"></i></label></div>\r\n                <div className=\"input-box\">\r\n                  <input disabled type=\"text\" name={elName} placeholder={placeholder} value={value} onChange={onChange} required={required && required} />\r\n                  <button onClick={onChange} type=\"button\" className=\"input-clear\" tabIndex=\"-1\"></button>\r\n                </div>\r\n              </div>) \r\n    case 'select':\r\n      return (<div className='text-input-container select-container'>\r\n                  <label htmlFor={elName}>{title} {required ? <span style={{color: 'red'}}>*</span> : \"\" }</label> \r\n                  <select name={elName} placeholder={placeholder} value={value} onChange={onChange}>\r\n                    {options && options.map( option => <option key={option} value={option}>{option}</option>)}\r\n                    </select>\r\n                </div>)\r\n\r\n    case 'yesno':\r\n      return (<div className='text-input-container select-container'>\r\n                  <label htmlFor={elName}>{title}</label> \r\n                  <select name={elName} placeholder={placeholder} value={value} onChange={onChange}>\r\n                    <option value=\"Yes\">Yes</option>\r\n                    <option value=\"No\">No</option>\r\n                    </select>\r\n                </div>)\r\n    case 'textarea':\r\n      return (<div className='text-input-container'>\r\n                  <label htmlFor={elName} required={required && required} >{title}</label> \r\n                  <textarea name={elName} placeholder={placeholder} required={required && required} maxLength={maxLength && maxLength} rows={textarearows} value={value} onChange={(e) => {handleTextArea(e.target); onChange(e) }}/> \r\n                  <br/>\r\n                    {value.length > 1 && <p className='input-size textarea'>{value.length}/{maxLength}</p>}\r\n                </div>)\r\n    case 'password':\r\n      return ( <div className='text-input-container'>\r\n                    <label htmlFor={elName}>{title || 'Password'}</label> \r\n                    <input type='password' name={elName} placeholder={placeholder} value={value} onChange={onChange} maxLength={maxLength && maxLength}/> \r\n                </div>)\r\n    default:\r\n      return (<div className='text-input-container'>\r\n                  <label htmlFor={elName}>{title}</label> \r\n                  <input type={type} name={elName} placeholder={placeholder}/> \r\n                </div>)\r\n  }\r\n}\r\n\r\nexport default CustomInput\r\n","import React, {useState} from 'react'\r\n\r\nconst RadioSelector = ({name, options, handleChange, selectedValue}) => {  \r\n\r\n    // default state to first option\r\n    const [selected,setSelected] = useState(selectedValue)\r\n    \r\n    return (\r\n            <div className=\"input-radio-container\">\r\n                {options.map( (option, i) => {\r\n                    \r\n                    return (<div className=\"radio-input\" key={i}>\r\n                            <input  type=\"radio\" \r\n                                    id={`custom-ratio-${name}-${i}`} \r\n                                    name={name} \r\n                                    checked={selected === option.value} \r\n                                    onChange={e => {setSelected(option.value); handleChange(option.value)}}\r\n                                    value={option.value}/>\r\n                                \r\n                            <label htmlFor={`custom-ratio-${name}-${i}`}>{option.title}</label> \r\n                </div>)\r\n                })}\r\n            </div>  \r\n    )\r\n}\r\n\r\nexport default RadioSelector\r\n","import {\r\n    NOTE_CREATE_REQUEST,\r\n    NOTE_CREATE_SUCCESS,\r\n    NOTE_CREATE_FAIL,\r\n\r\n    NOTE_FEED_REQUEST,\r\n    NOTE_FEED_SUCCESS,\r\n    NOTE_FEED_ADD_SUCCESS,\r\n    NOTE_FEED_FAIL,\r\n    NOTE_FEED_RESET,\r\n    NOTE_FEED_DISABLE_SHOW_MORE,\r\n\r\n    NOTE_DETAILS_REQUEST,\r\n    NOTE_DETAILS_SUCCESS,\r\n    NOTE_DETAILS_FAIL,\r\n    NOTE_DETAILS_RESET,\r\n\r\n    NOTE_CUSTOMER_FEED_REQUEST,\r\n    NOTE_CUSTOMER_FEED_SUCCESS,\r\n    NOTE_CUSTOMER_FEED_FAIL,\r\n    NOTE_CUSTOMER_FEED_RESET\r\n\r\n} from '../constants/noteConstants'\r\n\r\nimport {db} from '../firebase'\r\nimport {auth} from '../firebase'\r\n\r\nexport const createNote = note => async (dispatch, getState) => {\r\n    try{\r\n        // set status to loading \r\n        dispatch({\r\n            type: NOTE_CREATE_REQUEST,\r\n        })\r\n\r\n        // extract info of the logeed in user \r\n        const {\r\n        userLogin: {\r\n            userInfo\r\n        }\r\n        } = getState();\r\n\r\n        db.collection('notes').add(note)\r\n        .then(doc => {\r\n            dispatch({\r\n                type: NOTE_CREATE_SUCCESS,\r\n                payload: {...note,id: doc.id}\r\n            })\r\n            // reset the note session storage so notes feed resets\r\n            //sessionStorage.setItem(\"noteFeedDates\", '')\r\n        })\r\n        .catch(err =>{\r\n            dispatch({\r\n                type: NOTE_CREATE_FAIL,\r\n                payload: err,\r\n            })\r\n        })\r\n\r\n    } catch(error){\r\n        console.log(error)\r\n        dispatch({\r\n            type: NOTE_CREATE_FAIL,\r\n            payload: error,\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const getNotes = (dates, filterInfo, lastDate) => async (dispatch, getState) => {\r\n\r\n    let isRep = false\r\n\r\n    // get previous notes stattes\r\n    const { notesFeed } = getState()\r\n    const notesFromPrevState = notesFeed.notes\r\n\r\n    // if it comes from showmore do not dispatch to load\r\n    if(!lastDate){\r\n        dispatch({\r\n            type: NOTE_FEED_REQUEST,\r\n        })\r\n    }\r\n\r\n    // await to recevie the current user before proceeding\r\n    await getCurrentUser(auth)\r\n\r\n    // get the claims from the user\r\n    const {claims} = await auth.currentUser?.getIdTokenResult()\r\n\r\n    // query to be performed\r\n    let query = db.collection('notes')\r\n    let query2 = db.collection('notes')\r\n\r\n    //if query has state restrictions \r\n    if(claims?.restrictions?.states?.length > 0) {\r\n        isRep = true\r\n        query = query.where('CustomerRef.State', 'in', claims.restrictions.states )\r\n        query2 = query2.where('NoteClass', '==', \"Personal-Note\" )\r\n    }\r\n\r\n    // add time-frame filters \r\n    query = query.where('TimeStamp', '>=', dates.from)\r\n    query = query.where('TimeStamp', '<=', dates.to)\r\n\r\n    query2 = query2.where('TimeStamp', '>=', dates.from)\r\n    query2 = query2.where('TimeStamp', '<=', dates.to)\r\n\r\n\r\n    // add extra-filters\r\n    if(filterInfo){\r\n        Object.keys(filterInfo).forEach(filterField => {\r\n            if(filterInfo[filterField] !== 'Any'){\r\n                switch (filterField) {\r\n                    case 'author':\r\n                        query = query.where('AuthorRef.displayName', '==',filterInfo[filterField] )\r\n                        query2 = query2.where('AuthorRef.displayName', '==',filterInfo[filterField] )\r\n                        break;\r\n                    case 'noteClass':\r\n                        query = query.where('NoteClass', '==',filterInfo[filterField] )\r\n                        break;\r\n                    case 'typeOfNote':\r\n                        query = query.where('NoteType', '==',filterInfo[filterField] )\r\n                        query2 = query2.where('NoteType', '==',filterInfo[filterField] )\r\n                        break;\r\n                    \r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // add limits\r\n    query = query.limit(50)\r\n    query2 = query2.limit(50)\r\n\r\n    // add sorting\r\n    query = query.orderBy(\"TimeStamp\", \"desc\")\r\n    query2 = query2.orderBy(\"TimeStamp\", \"desc\")\r\n\r\n    // add pagination\r\n    if(lastDate){\r\n        query = query.startAfter(lastDate)\r\n        query2 = query2.startAfter(lastDate)\r\n    }\r\n\r\n\r\n    // request the query \r\n    query.get()\r\n        .then(async snap => {\r\n            let result = []\r\n            snap.forEach(doc => result.push({...doc.data(), id : doc.id }))\r\n\r\n            if(isRep){\r\n                await query2.get().then( snap2 => {\r\n                    snap2.forEach(doc2 => { \r\n                        console.log(doc2.data())\r\n                        result.push({...doc2.data(), id : doc2.id })\r\n                    })\r\n                })\r\n            }\r\n\r\n            // if it is a query to load more, add to current array\r\n            if(lastDate){\r\n                // if result is empty, disable load more \r\n                if(result.length < 1){\r\n                    dispatch({\r\n                        type: NOTE_FEED_DISABLE_SHOW_MORE,\r\n                        payload: true\r\n                    })\r\n                }\r\n                result = [...result, ...notesFromPrevState ]\r\n            }\r\n\r\n            dispatch({\r\n                type: NOTE_FEED_SUCCESS,\r\n                payload: result\r\n            })\r\n    \r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            dispatch({\r\n                type: NOTE_FEED_FAIL,\r\n                payload: err\r\n            })   \r\n        })\r\n\r\n    // query.onSnapshot(snap => {\r\n    //     let result = []\r\n    //         snap.forEach(doc => result.push({...doc.data(), id : doc.id }))\r\n\r\n    //         // if it is a query to load more, add to current array\r\n    //         if(notesLength){\r\n    //             console.log(result)\r\n    //             console.log(notesFromPrevState)\r\n    //             result = [...result, ...notesFromPrevState ]\r\n    //         }\r\n\r\n    //         dispatch({\r\n    //             type: NOTE_FEED_SUCCESS,\r\n    //             payload: result\r\n    //         })\r\n    // })\r\n\r\n}\r\n\r\nexport const getNotesForCustomerPage = () => async (dispatch, getState) => {\r\n    dispatch({\r\n        type: NOTE_CUSTOMER_FEED_REQUEST,\r\n    })\r\n\r\n    // get the customer details\r\n    const {customerDetails: {customerInfo}} = getState();\r\n\r\n    // await to recevie the current user before proceeding\r\n    await getCurrentUser(auth)\r\n\r\n    // get the claims from the user\r\n    const {claims} = await auth.currentUser?.getIdTokenResult()\r\n\r\n    // query to be performed\r\n    let query = db.collection('notes')\r\n\r\n    //if query has state restrictions \r\n    if(claims?.restrictions?.states?.length > 0) {\r\n        query = query.where('CustomerRef.State', 'in', claims.restrictions.states )\r\n    }\r\n\r\n    // add the customer filter\r\n    query = query.where('CustomerRef.ListID', '==', customerInfo.ListID)\r\n\r\n\r\n    \r\n    // make the actual query\r\n    query.onSnapshot(snap=> {\r\n        let result = []\r\n        snap.forEach(doc => result.push({...doc.data(), id : doc.id }))\r\n        dispatch({\r\n            type: NOTE_CUSTOMER_FEED_SUCCESS,\r\n            payload: result\r\n        })\r\n    }, error => {\r\n        dispatch({\r\n            type: NOTE_CUSTOMER_FEED_FAIL,\r\n            payload: error\r\n        })   \r\n    })\r\n}\r\n\r\nexport const getNoteDetails = (noteId) => async (dispatch, getState) => {\r\n    // check if note is already on the notes feed list \r\n    dispatch({\r\n        type: NOTE_DETAILS_REQUEST\r\n    })\r\n\r\n    // extract info of the logeed in user and of the note list \r\n    const {userLogin: {userInfo}} = getState();\r\n    const {notesFeed: {notes}} = getState();\r\n\r\n    if(notes) {\r\n        const foundNote = notes.find(note => note.id === noteId)\r\n\r\n        if(foundNote){\r\n            dispatch({\r\n                type: NOTE_DETAILS_SUCCESS,\r\n                payload: foundNote\r\n            })\r\n            return\r\n    }\r\n    }\r\n\r\n     // make the actual query\r\n     db.collection('notes').doc(noteId).get()\r\n        .then(doc => {\r\n            dispatch({\r\n                type: NOTE_DETAILS_SUCCESS,\r\n                payload: {...doc.data(), id: doc.id}\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: NOTE_DETAILS_FAIL,\r\n                payload:err\r\n            })\r\n        })\r\n\r\n}\r\n\r\nfunction getCurrentUser(auth) {\r\n    return new Promise((resolve, reject) => {\r\n       const unsubscribe = auth.onAuthStateChanged(user => {\r\n          unsubscribe();\r\n          resolve(user);\r\n       }, reject);\r\n    });\r\n  }\r\n\r\n","import React, { useState , useEffect } from 'react'\r\nimport PageTitle from '../components/PageTitle'\r\nimport CustomInput from '../components/CustomInput'\r\nimport Button from '../components/Button'\r\nimport AutoCompleteSection from '../components/AutoCompleteSection'\r\nimport RadioSelector from '../components/RadioSelector'\r\nimport ModalContainer  from '../components/ModalContainer'\r\n\r\nimport { useDispatch, useSelector} from 'react-redux'\r\n\r\nimport {db} from '../firebase'\r\n\r\nimport { createNote } from '../actions/noteActions'\r\n\r\nconst NoteCreatePage = ({ history }) => {\r\n    const dispatch = useDispatch()\r\n    \r\n    // Modal State\r\n    const [showModal,setShowModal] = useState(false)\r\n    const [showAlert,setShowAlert] = useState(false)\r\n    \r\n\r\n    // getting outside resources\r\n    const {customerList} = useSelector(state => state.customerList)\r\n    const {userInfo} = useSelector( state => state.userLogin)\r\n    const environmentVariables = useSelector(state => state.environmentVariables)\r\n    const { lists } = environmentVariables\r\n\r\n\r\n    // ppulating the note type section \r\n    let typeOfNotes = []\r\n\r\n    if(environmentVariables.hasOwnProperty('lists')){\r\n        if(lists.hasOwnProperty('noteTypes')){\r\n            typeOfNotes = Object.keys(lists.noteTypes).map(key => lists.noteTypes[key].displayName)\r\n        } else{\r\n            console.log(\"cannot display note types\")\r\n        }\r\n    }\r\n\r\n    // component level state for the form \r\n    const [selectedCustomerObj, setselectedCustomerObj ] = useState({})\r\n    const [noteClass, setNoteClass] = useState('standard')\r\n    const [accName, setAccName] = useState('')\r\n    const [noteSubject, setNoteSubject] = useState('')\r\n    const [typeOfNote, setTypeOfNote] = useState('Call')\r\n    const [noteText, setNoteText] = useState('')\r\n\r\n\r\n    // Grab the customer from history (client clicked from customer page )\r\n    const setCustomerFromHistory = () => {\r\n        const customerIdFromHistory = history.location.search.split('=')[1]\r\n        const selectedCustomer = customerList.filter(customer => customer.ListID === customerIdFromHistory )[0]\r\n        setselectedCustomerObj(selectedCustomer)\r\n    }\r\n\r\n    // clear everything ( Clicking clear btn or submitting note)\r\n    const clearTextBoxes = () => {\r\n        setselectedCustomerObj({})\r\n        setAccName('')\r\n        setNoteSubject('')\r\n        setTypeOfNote('Call')\r\n        setNoteText('')\r\n    }\r\n\r\n    // set the selected customer object (client cliked on autocomplete result)\r\n    const autoCompleteClick = customer => {\r\n        setselectedCustomerObj(customer)\r\n    }\r\n\r\n    // use history to set customer obj \r\n    useEffect(() => {\r\n        if(history.location.search !== ''){\r\n            setCustomerFromHistory()\r\n        }\r\n    }, [history.location.search])\r\n\r\n\r\n\r\n    // Handle note clas change \r\n    const handleNoteClassChange = e => {\r\n        if(e === 'personal'){\r\n            setTypeOfNote('Personal')\r\n        } else{\r\n            setTypeOfNote('Call')\r\n        }\r\n        setNoteClass(e)\r\n    }\r\n\r\n    //Handle Type of note change\r\n    const handleTypeOfNoteChange = e => {\r\n        if(noteClass === 'personal'){\r\n            setTypeOfNote('Personal')\r\n        } else{\r\n            setTypeOfNote(e)\r\n        }\r\n    }\r\n\r\n    // clicking submit on the form,show modal and check the fields \r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(noteClass === 'standard' && Object.keys(selectedCustomerObj).length < 1){\r\n            setShowAlert(true)\r\n        } else{\r\n            setShowModal(true)\r\n        }\r\n    }\r\n\r\n    // actual submit method \r\n    const submitNote = () => {\r\n        \r\n        const note = {\r\n            CustomerRef: selectedCustomerObj,\r\n            Subject: noteSubject,\r\n            Text: noteText,\r\n            AuthorRef: {\r\n                uid: userInfo.uid,\r\n                displayName: userInfo.displayName,\r\n                email: userInfo.email,\r\n                photoURL: userInfo.photoURL,\r\n            },\r\n            NoteType : typeOfNote,\r\n            NoteClass : noteClass,\r\n            TimeStamp: new Date()\r\n        }\r\n\r\n        // turn off modal\r\n        setShowModal(false)\r\n\r\n        dispatch(createNote(note))\r\n\r\n        history.push('/submitnote')    \r\n    }\r\n\r\n\r\n    return (\r\n        <div id='create-note-page' className=\"page-padding medium page-animated fade\">\r\n            {showModal && <ModalContainer modalType='question' msg='Are you sure you want to submit this note?' acceptMethod={submitNote} declineMethod={()=> setShowModal(false)} />}\r\n            {showAlert && <ModalContainer modalType='alert' msg='Please select an existing customer' acceptMethod={() => setShowAlert(false)} />}\r\n            <PageTitle title=\"Note Page\" subtitle=\"Add a new Note\" btns={['Clear']} btnFunc={clearTextBoxes}/>\r\n            <form action=\"\" onSubmit={submitHandler}>\r\n                <div className=\"input-section\">\r\n                <RadioSelector \r\n                    name=\"standardOrPersonalNote\" \r\n                    selectedValue='standard'\r\n                    options={[{title: 'Standard', value: 'standard'},{title: 'Personal', value : 'Personal-Note'}]} \r\n                    handleChange={e => handleNoteClassChange(e)}\r\n                />\r\n                <br/><br/>\r\n                    {noteClass === 'standard' ? Object.keys(selectedCustomerObj).length === 0\r\n                    ? (\r\n                    <>\r\n                        <CustomInput \r\n                        title=\"Select Customer\" \r\n                        placeholder=\"Enter Name of Account\"\r\n                        elName=\"note-account-name\"\r\n                        type=\"text\"\r\n                        value={accName}\r\n                        required={true}\r\n                        onChange={e => setAccName(e.target.value)}\r\n                        maxLength={60}/>\r\n                        \r\n                        {accName.length > 0 \r\n                        ?  <AutoCompleteSection \r\n                            searchBoxText={accName} \r\n                            resetMainSearchBar={() => setAccName('')} \r\n                            handleClick={customerResult => autoCompleteClick(customerResult)}/> \r\n                        : (<p>&nbsp;&nbsp;<i className=\"fas fa-exclamation-circle\"></i> No Customer Selected</p>)}\r\n                    </>) : (\r\n                        <>\r\n                        <CustomInput \r\n                            title='Selected Customer' \r\n                            elName=\"note-account-name\"\r\n                            type=\"text-selected\"\r\n                            value={selectedCustomerObj.CompanyName}\r\n                            required={true}\r\n                            onChange={() => setselectedCustomerObj({})}/>\r\n                        </>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                    <br/>\r\n                        \r\n                    <CustomInput \r\n                        title=\"Note Subject\" \r\n                        placeholder=\"Enter the subject of the note\"\r\n                        elName=\"note-account-subject\"\r\n                        type=\"text\"\r\n                        required={true}\r\n                        value={noteSubject}\r\n                        onChange={e => setNoteSubject(e.target.value)}\r\n                        maxLength={144}/>\r\n                    <CustomInput \r\n                        title=\"Type of Note\" \r\n                        placeholder=\"\"\r\n                        elName=\"note-account-type\"\r\n                        type=\"select\"\r\n                        options={typeOfNotes}\r\n                        value={typeOfNote}\r\n                        onChange={e => handleTypeOfNoteChange(e.target.value)}/>\r\n                    <CustomInput \r\n                        title=\"Note Text\" \r\n                        placeholder=\"\"\r\n                        elName=\"note-account-type\"\r\n                        type=\"textarea\"\r\n                        required={true}\r\n                        value={noteText}\r\n                        maxLength={900}\r\n                        onChange={e => setNoteText(e.target.value)}/>\r\n                    <Button typeBtn='Submit' />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteCreatePage\r\n","import React from 'react'\r\n\r\nimport { Link, useLocation} from 'react-router-dom'\r\n\r\nimport { formatDateTime} from '../utils/DateMethods'\r\n\r\nconst NoteItem = ({note}) => {\r\n    const {AuthorRef, CustomerRef, NoteClass, NoteType, Subject, Text, TimeStamp, id} = note\r\n\r\n    return (\r\n        <div className=\"note\">\r\n        <Link to={`/noteview/${id}`}>\r\n            <div className=\"note-header\">\r\n                {NoteClass === 'personal' ? (\r\n                    <p>Personal Note <i className=\"fas fa-chevron-right\"></i></p>\r\n                ) : (\r\n                    <p>{CustomerRef.CompanyName} <i className=\"fas fa-chevron-right\"></i></p>\r\n                )}\r\n            </div>\r\n            <div className=\"note-body\">\r\n                <p>{Subject}</p>\r\n                <p>{Text}</p>\r\n            </div>\r\n            <div className=\"note-footer\">\r\n                <p>{formatDateTime(TimeStamp.toDate())}</p>\r\n                <p>{NoteType}</p>\r\n                <p>{AuthorRef.displayName ? AuthorRef.displayName : 'Anonymous'}</p>\r\n            </div>\r\n        </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default NoteItem\r\n","\r\nimport { formatDateTime} from '../utils/DateMethods'\r\n\r\nexport default class FeedCSVExporter {\r\n    constructor (data, headersArr, type ) {\r\n\r\n        // create the header row\r\n        const headerRow = document.createElement('tr')\r\n        headerRow.innerHTML = headersArr.map(header => {\r\n            return `<th>${header}</th>`\r\n        })\r\n\r\n\r\n        // Convert Data to HTML Table\r\n        switch (type) {\r\n            case 'notesfeed':\r\n                this.rows = data.map(note => {\r\n                    const newRow = document.createElement('tr')\r\n                    newRow.innerHTML += `\r\n                        <td>${note.id ? note.id : 'No id'}</td>\r\n                        <td>${note.CustomerRef ? note.CustomerRef.CompanyName : 'Personal Note'}</td>\r\n                        <td>${note.AuthorRef.displayName ? note.AuthorRef.displayName : note.AuthorRef.email}</td>\r\n                        <td>${note.TimeStamp ? formatDateTime(note.TimeStamp.toDate()) : ''}</td>\r\n                        <td>${note.NoteType ? note.NoteType : ''}</td>\r\n                        <td>${note.Subject ? note.Subject : 'No subject'}</td>\r\n                        <td>${note.Text ? note.Text : 'Empty Note'}</td>`\r\n                        return newRow\r\n                })\r\n                break;\r\n            case 'ordersfeed':\r\n                this.rows = data.map(order => {\r\n                    const newRow = document.createElement('tr')\r\n                    newRow.innerHTML += `\r\n                        <td>${order.id ? order.id : 'No id'}</td>\r\n                        <td>${order.NewCustomer ? order.NewCustomerRef.CompanyName : order.CustomerRef.CompanyName}</td>\r\n                        <td>${order.AuthorRef.displayName ? order.AuthorRef.displayName : order.AuthorRef.email}</td>\r\n                        <td>${order.TimeStamp ? formatDateTime(order.TimeStamp.toDate()) : ''}</td>\r\n                        <td>${order.PriceLevel ? order.PriceLevel : ''}</td>\r\n                        <td>${order.Terms ? order.Terms : ''}</td>\r\n                        <td>${order.OrderTotals ? order.OrderTotals.facings : ''}</td>\r\n                        <td>${order.OrderTotals ? order.OrderTotals.qty : ''}</td>\r\n                        <td>${order.OrderTotals ? order.OrderTotals.amount : ''}</td>\r\n                        <td>${order.NewCustomer ? 'New Customer' : ''}</td>\r\n                        <td>${order.OrderInstructions ? order.OrderInstructions : ''}</td>\r\n                        <td>${order.OrderFormType ? order.OrderFormType : ''}</td>`\r\n                        return newRow\r\n                })\r\n                \r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n        // attach the header \r\n        this.rows.unshift(headerRow)\r\n\r\n    }\r\n\r\n    convertToCSV () {\r\n        const lines = [];\r\n        const numCols = this._findLongestRowLength();\r\n\r\n        for (const row of this.rows) {\r\n            let line = \"\";\r\n\r\n            for (let i = 0; i < numCols; i++) {\r\n                if (row.children[i] !== undefined) {\r\n                    line += FeedCSVExporter.parseCell(row.children[i]);\r\n                }\r\n\r\n                line += (i !== (numCols - 1)) ? \",\" : \"\";\r\n            }\r\n\r\n            lines.push(line);\r\n        }\r\n\r\n        return lines.join(\"\\n\");\r\n    }\r\n\r\n    _findLongestRowLength () {\r\n        return this.rows.reduce((l, row) => row.childElementCount > l ? row.childElementCount : l, 0);\r\n    }\r\n\r\n    static parseCell (tableCell) {\r\n        \r\n        let parsedValue = tableCell.textContent;\r\n\r\n        // Replace all double quotes with two double quotes\r\n        parsedValue = parsedValue.replace(/\"/g, `\"\"`);\r\n\r\n        // If value contains comma, new-line or double-quote, enclose in double quotes\r\n        parsedValue = /[\",\\n]/.test(parsedValue) ? `\"${parsedValue}\"` : parsedValue;\r\n\r\n        return parsedValue;\r\n    }\r\n}\r\n\r\n\r\n","import React, { useState , useEffect, useRef} from 'react'\r\nimport PageTitle from '../components/PageTitle'\r\nimport CustomInput from '../components/CustomInput'\r\nimport Button from '../components/Button'\r\nimport AutoCompleteSection from '../components/AutoCompleteSection'\r\nimport RadioSelector from '../components/RadioSelector'\r\nimport ModalContainer  from '../components/ModalContainer'\r\nimport Loader from '../components/Loader'\r\n\r\nimport NoteItem from '../components/NoteItem'\r\n\r\nimport { useDispatch, useSelector} from 'react-redux'\r\n\r\nimport {dateSelectors, standardDateFormat} from '../utils/DateMethods'\r\n\r\nimport FeedCSVExporter from '../utils/FeedCSVExporter'\r\n\r\n\r\nimport { getNotes } from '../actions/noteActions'\r\n\r\nconst NoteFeedPage = React.memo(({ history }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    // Redux states \r\n    const environmentVariables = useSelector(state => state.environmentVariables)\r\n    const { loading, notes, error, disableShowMore } = useSelector(state => state.notesFeed)\r\n    const { lists } = environmentVariables\r\n\r\n    // ui comoponent elevel states \r\n    const [showFilters, setShowFilters] = useState(false)\r\n\r\n    // component level states \r\n    const [typeOfDate, setTypeOfDate] = useState(Object.keys(dateSelectors)[0])\r\n    const [datesToShow, setDatesToShow] = useState(dateSelectors['Today'])\r\n\r\n    // filter fields level states \r\n    const [author, setAuthor] = useState('Any')\r\n    const [noteClass, setNoteClass] = useState('Any')\r\n    const [typeOfNote, setTypeOfNote] = useState('Any')\r\n\r\n    const [filterInfo, setFilterInfo] = useState({})\r\n\r\n    // on load check if there are dates from session storage\r\n    useEffect(() => {\r\n        const data = sessionStorage.getItem(\"noteFeedDates\")\r\n        const dataFromStorage = JSON.parse(data)\r\n        // if there is data in session storage, then use those dates \r\n        if(data){\r\n            setTypeOfDate(dataFromStorage.typeOfDate)\r\n            setDatesToShow({\r\n                from : new Date(dataFromStorage.datesToShow.from),\r\n                to : new Date(dataFromStorage.datesToShow.to)\r\n            })\r\n            setAuthor(dataFromStorage.filters.author)\r\n            setNoteClass(dataFromStorage.filters.noteClass)\r\n            setTypeOfNote(dataFromStorage.filters.typeOfNote)\r\n\r\n            const newFilters = {\r\n                author : dataFromStorage.filters.author,\r\n                noteClass : dataFromStorage.filters.noteClass,\r\n                typeOfNote : dataFromStorage.filters.typeOfNote}\r\n    \r\n            setFilterInfo(newFilters)\r\n        }\r\n        \r\n        // if notes is empty \r\n        if(notes && notes.length < 1){\r\n            // if there is data from the session storage then dispatch notes and use those dates\r\n             if(data){\r\n                dispatch(getNotes(dateSelectors[JSON.parse(data).typeOfDate],filterInfo))\r\n            // there no dates on session storage, use current state of the state element\r\n             } else{\r\n                dispatch(getNotes(dateSelectors[typeOfDate],filterInfo))\r\n             }\r\n        }\r\n\r\n    }, [])\r\n\r\n    // Save the set item on all changes\r\n    useEffect(() => {\r\n        // Saving the state to session storage\r\n        sessionStorage.setItem(\"noteFeedDates\", JSON.stringify({\r\n            typeOfDate : typeOfDate,\r\n            datesToShow: datesToShow,\r\n            filters : {\r\n                author,noteClass, typeOfNote\r\n            }\r\n        }))\r\n    })\r\n\r\n    // execute on the switch data type \r\n    const switchDateHandler = (val) => {\r\n        setTypeOfDate(val)\r\n        setDatesToShow(dateSelectors[val])\r\n        console.log('switchDates handler disaptch notes')\r\n        dispatch(getNotes(dateSelectors[val],filterInfo))\r\n    }\r\n\r\n    const handleExportCsvClick = () => {\r\n        const exporter = new FeedCSVExporter(notes, ['Note Id', 'Customer', 'Author', 'Date', 'Note Type', 'Note Subject', 'Note Text'] ,'notesfeed');\r\n        const csvOutput = exporter.convertToCSV();\r\n        const csvBlob = new Blob([csvOutput], { type: \"text/csv\" });\r\n        const blobUrl = URL.createObjectURL(csvBlob);\r\n        const anchorElement = document.createElement(\"a\");\r\n\r\n        anchorElement.href = blobUrl;\r\n        anchorElement.download = \"note-feed-export.csv\";\r\n        anchorElement.click();\r\n\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(blobUrl);\r\n        }, 500);\r\n    }\r\n\r\n\r\n    const handleApplyFiltersClick = () => {\r\n        const newFilters = {\r\n            author,\r\n            noteClass,\r\n            typeOfNote}\r\n\r\n        setFilterInfo(newFilters)\r\n        setShowFilters(false)\r\n        dispatch(getNotes(datesToShow, {...filterInfo,...newFilters}))\r\n    }\r\n    const handleClearFilter = () => { \r\n        setFilterInfo({})\r\n        setShowFilters(false)\r\n        setAuthor('Any') \r\n        setTypeOfNote('Any')\r\n        setNoteClass('Any')\r\n        dispatch(getNotes(datesToShow, {}))}\r\n\r\n    const handleLoadMore = () => {\r\n        dispatch(getNotes(datesToShow, filterInfo,  notes[notes.length - 1].TimeStamp))\r\n    }\r\n\r\n\r\n    return (\r\n        <div id='feed-note-page' className=\"page page-padding large fade\">\r\n            <PageTitle title=\"Notes Feed\" subtitle=\"Showing the latest Notes\" btns={['Filter']} btnFunc={()=> setShowFilters(!showFilters)}/>\r\n            <div className=\"input-section\">\r\n                {showFilters && (\r\n                <div className=\"filter-setter-container\">\r\n                    <div className=\"info-section\">\r\n                        <p className=\"section-title bold centered\">\r\n                            Filter notes\r\n                        </p>\r\n                        <br/>\r\n                        <div className=\"filter-fields flex\">\r\n                            <CustomInput \r\n                                title=\"Type of Note\" \r\n                                placeholder=\"\"\r\n                                elName=\"note-account-type\"\r\n                                type=\"select\"\r\n                                options={typeOfNotes}\r\n                                value={typeOfNote}\r\n                                onChange={e => setTypeOfNote(e.target.value)}/>\r\n\r\n                                {/* flex divider */}\r\n                                <div style={{width: '5%'}}></div>\r\n                            <CustomInput \r\n                                title=\"Note Class\" \r\n                                placeholder=\"\"\r\n                                elName=\"note-account-class\"\r\n                                type=\"select\"\r\n                                options={noteClasses}\r\n                                value={noteClass}\r\n                                onChange={e => setNoteClass(e.target.value)}/>\r\n\r\n                        </div>\r\n                        <div className=\"filter-fields flex\">\r\n                            <CustomInput \r\n                                title=\"Author\" \r\n                                placeholder=\"\"\r\n                                elName=\"note-account-class\"\r\n                                type=\"select\"\r\n                                options={authorsList}\r\n                                value={author}\r\n                                onChange={e => setAuthor(e.target.value)}/>  \r\n                        </div>\r\n\r\n                        <div className=\"filter-fields flex\">\r\n                        <button style={{margin: 'auto'}} onClick={handleApplyFiltersClick}>Apply Filters</button>\r\n                        <div style={{width: '5%'}}></div>\r\n                        <button style={{margin: 'auto'}} onClick={handleClearFilter}>Clear Filters</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"divider\"></div>\r\n                    \r\n                </div>)}\r\n            <CustomInput \r\n                        title=\"Date Range\" \r\n                        placeholder=\"\"\r\n                        elName=\"note-feed-date-selector\"\r\n                        type=\"select\"\r\n                        options={Object.keys(dateSelectors)}\r\n                        value={typeOfDate}\r\n                        onChange={e => switchDateHandler(e.target.value)}/>\r\n            \r\n            <p className=\"feed-result-text\">\r\n                <span>\r\n                {datesToShow && standardDateFormat(datesToShow.from)} - {datesToShow && standardDateFormat(datesToShow.to)}\r\n                </span>\r\n                {Object.keys(filterInfo).length > 1 && (\r\n                    <>\r\n                    <br/><br/>\r\n                        <span className={filterInfo.typeOfNote !== 'Any' ? 'highlight' : ''} >NoteType: {filterInfo.typeOfNote}</span>\r\n                        <span className={filterInfo.noteClass !== 'Any' ? 'highlight' : ''}>NoteClass: {filterInfo.noteClass}</span> \r\n                        <span className={filterInfo.author !== 'Any' ? 'highlight' : ''} >Author: {filterInfo.author} </span> \r\n                    </>\r\n                )}\r\n            </p>\r\n            </div>\r\n            <div className=\"feed notes-feed\">\r\n                {loading ? (<Loader/>) : (\r\n                    notes && notes.length > 0 ? (\r\n                        <>\r\n\r\n                        <div className=\"info-section flex\">\r\n                            <p className=\"section-title\">{typeOfDate}, {notes?.length} notes </p>\r\n                            <br/>\r\n                            <button onClick={handleExportCsvClick}> Export <i className=\"fas fa-file-csv\"></i> </button>\r\n                        </div>\r\n                        \r\n                        <br/>\r\n                        {notes\r\n                        .sort((a,b) => b.TimeStamp.toDate() - a.TimeStamp.toDate())\r\n                        .map(note => <NoteItem note={note} key={note.id} />)}\r\n\r\n                            <br/>\r\n                            <div className=\"info-section flex\">\r\n                                {disableShowMore ? (\r\n                                    <button className={disableShowMore ? 'disabled' : ''} style={{margin: 'auto'}} onClick={handleLoadMore}>\r\n                                    No more notes\r\n                                </button>\r\n                                ) : (\r\n                                    <button style={{margin: 'auto'}} onClick={handleLoadMore}>\r\n                                    Load more\r\n                                </button>\r\n                                )}\r\n                                \r\n                            </div>\r\n                        \r\n                        </>\r\n                    ) : (\r\n                        <p className=\"feed-result-text\"> <i className=\"fas fa-exclamation-circle\"></i> No notes were found for this time-period</p>\r\n                    )\r\n                )} \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\n// ppulating the note type section \r\nconst typeOfNotes = ['Any','Call','Email','Text', 'Visit','Event', 'Error-Shipping', 'Error', 'Complaint', 'Training']\r\n\r\nconst noteClasses = ['Any','Personal-Note', 'standard']\r\nconst authorsList = ['Any']\r\n\r\nexport default NoteFeedPage\r\n","import React, { useState , useEffect} from 'react'\r\nimport PageTitle from '../components/PageTitle'\r\nimport CustomInput from '../components/CustomInput'\r\nimport Button from '../components/Button'\r\nimport AutoCompleteSection from '../components/AutoCompleteSection'\r\nimport RadioSelector from '../components/RadioSelector'\r\nimport ModalContainer  from '../components/ModalContainer'\r\nimport Loader  from '../components/Loader'\r\n\r\nimport { useDispatch, useSelector} from 'react-redux'\r\n\r\nimport {db, Timestamp} from '../firebase'\r\n\r\nimport {getNoteDetails, getNoteDetailsFromNoteList} from '../actions/noteActions'\r\n\r\n\r\nconst NoteViewPage = ({ match }) => {\r\n    const dispatch = useDispatch()\r\n    const noteId = match.params.id\r\n\r\n    // getting state resources \r\n    const {userInfo} = useSelector( state => state.userLogin)\r\n    const {loading,note} = useSelector(state => state.noteDetails)\r\n\r\n\r\n    // get the note details\r\n    useEffect(()=>{\r\n        dispatch(getNoteDetails(noteId))\r\n    },[noteId])\r\n\r\n\r\n\r\n\r\n    const deleteHandler = () => {\r\n\r\n    }\r\n\r\n    const {CustomerRef, AuthorRef,NoteClass,NoteType,Subject,Text,TimeStamp, id } = note\r\n\r\n    return (\r\n        <div id='view-note-page' className=\"page-padding large fade\">\r\n            <PageTitle title=\"Note Page\" subtitle=\"Showing note\" btns={['Delete']} btnFunc={deleteHandler}/>\r\n            <br/><br/>\r\n\r\n            {loading ? (<Loader/>) : (\r\n                <>\r\n                <div className=\"info-section\" id=\"view-note-data\">\r\n                 <p className=\"section-title\">Note</p>\r\n                 <div className=\"section-content\">\r\n                    <div className=\"info-key-value with-logo\">\r\n                            <i className=\"fas fa-paste\"></i>\r\n                        <div>\r\n                                <p>{Subject}</p>\r\n                                <p>{Text}</p>\r\n                        </div>\r\n                    </div>\r\n                 </div>\r\n             </div>             \r\n             <br/><br/>\r\n                 <div className=\"info-section\">\r\n                 <p className=\"section-title\">Note # {id}</p>\r\n                 <div className=\"section-content\">\r\n                     {NoteClass === 'standard' ? (\r\n                         <>\r\n                         <div className=\"info-key-value with-logo\">\r\n                            <i className=\"fas fa-store\"></i>\r\n                            <div>\r\n                                <p>Company</p>\r\n                                <p>{CustomerRef && CustomerRef.CompanyName }</p>\r\n                            </div>\r\n                         </div>\r\n                         <div className=\"info-key-value\">\r\n                            <div>   \r\n                                <p>Account#</p>\r\n                                <p>{CustomerRef && CustomerRef.ListID}</p>\r\n                            </div>\r\n                        </div>\r\n                        </>\r\n                     ) : (<></>)}\r\n                     \r\n                     <div className=\"info-key-value with-logo\">\r\n                        <i className=\"fas fa-user-edit\"></i>\r\n                     <div>\r\n                             <p>Submitted By</p>\r\n                             <p>{AuthorRef?.displayName ? AuthorRef?.displayName : 'Anonymous'}</p>\r\n                     </div>\r\n                     </div>\r\n                     <div className=\"info-key-value\">\r\n                         <div>\r\n                            <p>Submitted on</p>\r\n                             <p>{TimeStamp && formatDateTime(TimeStamp.toDate())}</p>\r\n                         </div>\r\n                     </div>\r\n                     <div className=\"info-key-value with-logo\">\r\n                        \r\n                     </div>\r\n\r\n                     <div className=\"info-key-value\">\r\n                         <div>\r\n                            <p>Note Type</p>\r\n                             <p>{NoteType}</p>\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n                </>\r\n            )}\r\n\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nconst formatDateTime  = (date) => {\r\n    console.log(date)\r\n    let dateString =  `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n    let timeString = date.toLocaleTimeString('en-US', { hour: 'numeric', hour12: true, minute: 'numeric' })\r\n    return dateString + ' ' +  timeString\r\n}\r\n\r\nexport default NoteViewPage\r\n","import React, {useState} from 'react'\r\nimport Button from './Button'\r\n\r\nconst TabSection = ({children, footerbtns, activeTab, setActiveTab}) => {\r\n\r\n    const active = activeTab ? activeTab : 0\r\n    const setActive = setActiveTab\r\n\r\n    const tabbuttons = children[0].props.children\r\n    const tabpages = children[1].props.children\r\n    const numberOfPages = children[1].props.children.length\r\n\r\n\r\n    return (\r\n        <div className=\"tabsection\">\r\n            <div className=\"tabsection-btns\">\r\n                {tabbuttons.map( (btn, i) => {\r\n\r\n                    if(btn.props.onClick === undefined){\r\n                        return React.cloneElement(btn,{\r\n                            key : i,\r\n                            onClick : () => {setActive(i)},\r\n                            className : active === i ? 'active' : ''\r\n                        })\r\n                    } else{\r\n                        return React.cloneElement(btn,{\r\n                            key : i,\r\n                            onClick : () => {setActive(i); btn.props.onClick()},\r\n                            className : active === i ? 'active' : ''\r\n                        }) \r\n                    }\r\n                    \r\n                })}\r\n            </div>\r\n            <div className=\"tabsection-pages\">\r\n                {tabpages.map( (page,i) => {\r\n                    return React.cloneElement(page,{\r\n                        key : i,\r\n                        className : active === i ? 'tabsection-page fade active' : 'tabsection-page fade',\r\n                    })\r\n                })}\r\n            </div>\r\n\r\n            {footerbtns && (\r\n                <div className=\"tabsection-footer-btns\">\r\n                    {active === 0 ? (\r\n                        <Button typeBtn=\"Next\" onClick={() => setActive(active + 1)}/>\r\n                    ): active === numberOfPages - 1 ? (\r\n                        <Button typeBtn=\"Prev\" onClick={() => setActive(active - 1)}/>\r\n                    ): (\r\n                        <>\r\n                            <Button typeBtn=\"Prev\" onClick={() => {setActive(active - 1)}}/>\r\n                            <Button typeBtn=\"Next\" onClick={() => {setActive(active + 1)}}/>\r\n                        </>\r\n                    ) }\r\n                </div>\r\n                \r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TabSection\r\n","import Reac, {useEffect} from 'react'\r\n\r\nimport Loader from './Loader'\r\n\r\nimport accounting from 'accounting-js'\r\n\r\nconst TableForm = ({form, list, onInput, id, pricingLevel}) => {\r\n    let productsArr = []\r\n\r\n    if(form){\r\n        productsArr = mixFormAndItemsList(form.products, list.inventoryItems)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"tableform\" id={id}>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Item</th>\r\n                        <th>Price</th>\r\n                        <th>Qty</th>\r\n                    </tr>\r\n                </thead>\r\n                {!form ? <></> : (\r\n                    <tbody>\r\n                    {productsArr.sort((a,b) => a.Name.localeCompare(b.Name)).map( (product, index, arr) => {\r\n\r\n                        //separate sections in the order form \r\n                        let isDiffFromPrev = false\r\n                        if(index > 0 && arr[index - 1].FullName.substring(0,4) !== product.FullName.substring(0,4)){\r\n                            isDiffFromPrev = true\r\n                        }\r\n                        \r\n                        return (\r\n                            <tr key={product.ListID} className={isDiffFromPrev ? \"with-spacer\" : \"\"}>\r\n                                <td>{product.SalesDesc}</td>\r\n                                <td>{\r\n                                    accounting.formatMoney(\r\n                                    pricingLevel > 0 ? product.SalesPrice -  (product.SalesPrice * (pricingLevel / 100)) : product.SalesPrice \r\n                                    )}\r\n                                </td>\r\n                                <td>\r\n                                    <input type='tel' onChange={(e) => onInput(\r\n                                        {\r\n                                        productListID: product.ListID,\r\n                                        qty: e.target.value * 1,\r\n                                        price: pricingLevel > 0 ? product.SalesPrice -  (product.SalesPrice * (pricingLevel / 100)) : product.SalesPrice,\r\n                                        name: product.SalesDesc,\r\n                                        productCode: product.FullName\r\n                                         })}/>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                    </tbody>\r\n                )}\r\n            \r\n            </table>\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default TableForm\r\n\r\n\r\nconst convertJsonToArr = (jsonObj) => {\r\n    let result = []\r\n\r\n    for(let item in jsonObj){\r\n        result.push(jsonObj[item])\r\n    }\r\n\r\n    return result\r\n}\r\n\r\n\r\nconst mixFormAndItemsList = (formProductsJson, inventoryItemsJson) => {\r\n    const formProductsArr = convertJsonToArr(formProductsJson)\r\n\r\n    const result = formProductsArr.map(item => inventoryItemsJson[item.ListID] ).sort( (a,b) => {\r\n        return a.Name - b.Name\r\n    })\r\n    \r\n\r\n    return result\r\n}\r\n","import {\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_FAIL,\r\n    ORDER_FEED_REQUEST,\r\n    ORDER_FEED_SUCCESS,\r\n    ORDER_FEED_FAIL,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_FEED_DISABLE_SHOW_MORE,\r\n\r\n    ORDER_CHANGE_STATUS_REQUEST,\r\n    ORDER_CHANGE_STATUS_SUCCESS,\r\n    ORDER_CHANGE_STATUS_FAIL\r\n\r\n\r\n} from '../constants/orderConstants'\r\n\r\nimport {db} from '../firebase';\r\nimport {auth} from '../firebase'\r\n\r\nexport const createOrder = order => async (dispatch, getState) => {\r\n    dispatch({\r\n        type: ORDER_CREATE_REQUEST,\r\n    })\r\n\r\n    try {\r\n        db.collection(\"orders\").add(order)\r\n        .then(doc =>  {\r\n            dispatch({\r\n                type: ORDER_CREATE_SUCCESS,\r\n                payload: {...order,id: doc.id}\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({\r\n                type: ORDER_CREATE_FAIL,\r\n                payload: error\r\n            })\r\n            console.log(error)\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const setOrderStatus = (status,orderID) => async (dispatch, getState) => {\r\n    dispatch({\r\n        type: ORDER_CHANGE_STATUS_REQUEST,\r\n    })\r\n\r\n    // change actual item in db\r\n    db.collection('orders').doc(orderID).update({\r\n        OrderStatus: status\r\n    }).then( () => {\r\n        dispatch({\r\n            type: ORDER_CHANGE_STATUS_SUCCESS,\r\n        })\r\n        // Populate the order page with changed order\r\n        dispatch(getOrderDetails(orderID))\r\n    }).catch(error => {\r\n        dispatch({\r\n            type: ORDER_CHANGE_STATUS_FAIL,\r\n            payload: error\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport const getOrders = (dates, filterInfo, lastDate) => async (dispatch, getState) => {\r\n\r\n    let isRep = false\r\n\r\n    // get prev order state \r\n    const { ordersFeed } = getState()\r\n    const ordersFromPrevState = ordersFeed.orders\r\n\r\n    // if it comes from showmore, do not dispatch load \r\n    if(!lastDate){\r\n        dispatch({\r\n            type: ORDER_FEED_REQUEST,\r\n        })\r\n    }\r\n\r\n    // await to recevie the current user before proceeding\r\n    await getCurrentUser(auth)\r\n\r\n    // get the claims from the user \r\n    const {claims} = await auth.currentUser?.getIdTokenResult()\r\n\r\n    // query to be performed\r\n    let query = db.collection('orders')\r\n    let query2 = db.collection('orders')\r\n\r\n    //if query has state restrictions \r\n    if(claims?.restrictions?.states?.length > 0) {\r\n        isRep = true\r\n        query = query.where('CustomerRef.State', 'in', claims.restrictions.states )\r\n        query2 = query2.where('NewCustomerRef.ShipAddress.State', 'in', claims.restrictions.states )\r\n        // query2 = query2.where('NewCustomer', '==', true )\r\n    }\r\n\r\n    // add time-frame filters \r\n    query = query.where('TimeStamp', '>=', dates.from)\r\n    query = query.where('TimeStamp', '<=', dates.to)\r\n\r\n    query2 = query2.where('TimeStamp', '>=', dates.from)\r\n    query2 = query2.where('TimeStamp', '<=', dates.to)\r\n\r\n    // TODO: add extra filters...\r\n\r\n    // add limits \r\n    query = query.limit(50)\r\n    query2 = query2.limit(50)\r\n\r\n    // add sorting from newest to olders\r\n    query = query.orderBy(\"TimeStamp\", \"desc\")\r\n    query2 = query2.orderBy(\"TimeStamp\", \"desc\")\r\n\r\n    // add pagination if request comes from load more \r\n    if(lastDate){\r\n        query = query.startAfter(lastDate)\r\n        query2 = query2.startAfter(lastDate)\r\n    }\r\n        // request the query \r\n        query.onSnapshot(async snap => {\r\n            let result = []\r\n            snap.forEach(doc => result.push({...doc.data(), id : doc.id }))\r\n\r\n            if(isRep){\r\n                await query2.get().then( snap2 => {\r\n                    snap2.forEach(doc2 => { \r\n                        result.push({...doc2.data(), id : doc2.id })\r\n                    })\r\n                })\r\n            }\r\n\r\n            // if it is a query to load more, add to current array\r\n            if(lastDate){\r\n                // if result is empty, disable load more \r\n                if(result.length < 1){\r\n                    dispatch({\r\n                        type: ORDER_FEED_DISABLE_SHOW_MORE,\r\n                        payload: true\r\n                    })\r\n                }\r\n                result = [...result, ...ordersFromPrevState ]\r\n\r\n            }\r\n\r\n            dispatch({\r\n                type: ORDER_FEED_SUCCESS,\r\n                payload: result\r\n            })\r\n\r\n        }, err => {\r\n            dispatch({\r\n                type: ORDER_FEED_FAIL,\r\n                payload: err\r\n            })   \r\n        })\r\n\r\n    \r\n\r\n\r\n}\r\n\r\nexport const getOrderDetails = (orderId) => async(dispatch,getState) =>{\r\n    // check if order is already on the notes feed list \r\n\r\n    dispatch({\r\n        type: ORDER_DETAILS_REQUEST\r\n    })\r\n\r\n    // extract info of the logeed in user and of the order list \r\n    const {userLogin: {userInfo}} = getState();\r\n    const {ordersFeed: {orders}} = getState();\r\n    const {customerAppOrders: {customerAppOrders}} = getState();\r\n\r\n    const foundOrderInOrderFeed = orders.find(order => order.id === orderId)\r\n    const foundOrderInCustomerPage = customerAppOrders.find(order => order.id === orderId)\r\n\r\n    if(foundOrderInOrderFeed){\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: foundOrderInOrderFeed\r\n        })\r\n    } else if(foundOrderInCustomerPage){\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: foundOrderInCustomerPage\r\n        })\r\n    } else{\r\n        console.log(\"had to get from the database\")\r\n        db.collection('orders').doc(orderId).onSnapshot(doc => {\r\n            dispatch({\r\n                type: ORDER_DETAILS_SUCCESS,\r\n                payload: {...doc.data(), id: doc.id}\r\n            })\r\n        }, err => {\r\n           dispatch({\r\n               type: ORDER_DETAILS_FAIL,\r\n               err:err\r\n           })  \r\n        })\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction getCurrentUser(auth) {\r\n    return new Promise((resolve, reject) => {\r\n       const unsubscribe = auth.onAuthStateChanged(user => {\r\n          unsubscribe();\r\n          resolve(user);\r\n       }, reject);\r\n    });\r\n  }\r\n\r\n\r\n","import React, {useState, useEffect} from 'react'\r\n\r\nimport PageTitle from '../components/PageTitle'\r\nimport TabsSection from '../components/TabSection'\r\nimport RadioSelector from '../components/RadioSelector'\r\nimport CustomInput from '../components/CustomInput'\r\nimport AutoCompleteSection from '../components/AutoCompleteSection'\r\nimport TableForm from '../components/TableForm'\r\nimport Button from '../components/Button'\r\nimport Loader from '../components/Loader'\r\nimport ModalContainer  from '../components/ModalContainer'\r\n\r\nimport accounting from 'accounting-js'\r\n\r\nimport { getCustomerData } from '../actions/customerActions'\r\nimport  {getEnvironmentVariables} from '../actions/environmentVariablesActions'\r\nimport { createOrder} from '../actions/orderActions'\r\n\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport { roundToNearestMinutes } from 'date-fns/esm'\r\n\r\nconst OrderCreatePage = ({history}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    // Modal method\r\n    const [showModal,setShowModal] = useState(false)\r\n    const [showAlert,setShowAlert] = useState(false)\r\n    const [alertMsg, setAlertMsg] = useState('')\r\n\r\n    // Order Form List and Customer List  \r\n    const lists = useSelector(state => state.environmentVariables.lists)\r\n    const { customerList} = useSelector(state => state.customerList)\r\n\r\n    // User Information\r\n    const {userInfo} = useSelector( state => state.userLogin)\r\n\r\n    // Customer Info \r\n    const customerData = useSelector(state => state.customerDetails)\r\n    const { loading: loadingCustomerData, customerInfo } = customerData;\r\n    \r\n    // order forms object to be populated later\r\n    let orderForms, itemList, termsList\r\n\r\n    // if lists has not loaded yet, then set order form to null, else set it to list\r\n    if(!lists){\r\n        orderForms = null\r\n        itemList = null\r\n        termsList = null\r\n    } else{\r\n        orderForms = lists.orderForms\r\n        itemList = lists.itemList\r\n        termsList = Object.keys(lists.termList).map(term => lists.termList[term].Name)\r\n    }\r\n\r\n\r\n    // check if list exists and get the keys of the json doc\r\n    const orderFormTypesOptions = lists &&  Object.keys(orderForms)\r\n\r\n    // state for the tabs\r\n    const [activeTab,setActiveTab] = useState(0)\r\n    \r\n    // state for the radio selector\r\n    const [orderFormType, setOrderFormType] = useState('standard')\r\n    const [selectedCustomerObj, setselectedCustomerObj ] = useState({})\r\n\r\n    // Customer name\r\n    const [customerType, setCustomerType] = useState('currentcustomer')\r\n    const [customerName, setCustomerName] = useState('')\r\n\r\n    // Shipping Information\r\n    const [streetAddress, setStreetAddress] = useState('')\r\n    const [city, setCity] = useState('')\r\n    const [state, setState] = useState('-')\r\n    const [zipcode, setZipCode] = useState('')\r\n\r\n    // Contact Information\r\n    const [firstname, setFirstName] = useState('')\r\n    const [lastname, setLastName] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n    const [email, setEmail] = useState('')\r\n\r\n    // Payment Information (NEW CUSTOMERR)\r\n    const [paymentTerm, setPaymentTerm] = useState('Credit Card')\r\n    const [priceLevel, setPriceLevel] = useState('')\r\n\r\n    // Payment Information (CURRENT CUSTOMERR)\r\n    const [currentPaymentTerm, setCurrentPaymentTerm] = useState(customerInfo.TermsRef ? customerInfo.TermsRef.FullName : '-')\r\n    const [currentPriceLevel, setCurrentPriceLevel] = useState(customerInfo ? customerInfo.PriceLevelRef ? customerInfo.PriceLevelRef.FullName.split('%')[0]: 0 : 0)\r\n\r\n    // Form Calculations\r\n    const [formProducts, setFormProducts] = useState({})\r\n    const [orderTotals, setOrderTotals] = useState({amount: 0, qty: 0, facings: 0})\r\n\r\n    // Order instructions / REP Code\r\n    const [orderInstructions, setOrderInstructions] = useState('')\r\n    const [repCode, setRepCode] = useState('-')\r\n\r\n    const calculateTotals = () => {\r\n        let amount = 0, qty = 0, facings = 0\r\n\r\n        for( let item in formProducts){\r\n            amount += (formProducts[item]['price'] * formProducts[item]['qty'])\r\n            qty += formProducts[item]['qty']\r\n            facings = formProducts[item]['qty'] > 0 ? facings + 1: facings\r\n        }\r\n        setOrderTotals({amount,qty,facings})\r\n    }\r\n\r\n    // Grab the customer from history (client clicked from customer page )\r\n    const setCustomerFromHistory = () => {\r\n        const customerIdFromHistory = history.location.search.split('=')[1]\r\n        const selectedCustomer = customerList.filter(customer => customer.ListID === customerIdFromHistory )[0]\r\n        autoCompleteClick(selectedCustomer)\r\n    }\r\n\r\n    const formFieldsInputHandler = (product) => {\r\n        setFormProducts({...formProducts,[product.productListID] : product})\r\n    }\r\n\r\n    // set the selected customer object (client cliked on autocomplete result)\r\n    const autoCompleteClick = customer => {\r\n        dispatch(getCustomerData(customer.ListID))\r\n        setselectedCustomerObj(customer)\r\n    }\r\n\r\n    // handle the changing of customer types\r\n    const handleCustomerTypeChange = (e) => {\r\n        setCustomerType(e)\r\n        if(e === 'newcustomer'){\r\n            setselectedCustomerObj({})\r\n        }\r\n    }\r\n\r\n    // change the pricing on the itemlist to reflect the new discount\r\n    const handlePriceLevelChange = (newPriceDiscount) => {\r\n        setCurrentPriceLevel(newPriceDiscount)\r\n        setPriceLevel(newPriceDiscount)\r\n        // mix and match the formProduct with the inventory and update form prodcuts with new pricing\r\n        let products = {}\r\n        Object.keys(formProducts).forEach(productID => {\r\n            const salesPriceFromInvetory = itemList.inventoryItems[productID].SalesPrice\r\n            products[productID] = {...formProducts[productID], price: salesPriceFromInvetory - ( salesPriceFromInvetory * (newPriceDiscount/100) ) }\r\n        })\r\n        setFormProducts(products)\r\n    }\r\n\r\n    // Change the payment terms and the price level depending on the customer \r\n    useEffect(() => {\r\n        setCurrentPaymentTerm(customerInfo ? customerInfo.TermsRef && customerInfo.TermsRef.FullName : '-')\r\n        handlePriceLevelChange(customerInfo ? customerInfo.PriceLevelRef ? customerInfo.PriceLevelRef.FullName.split('%')[0]: 0 : 0 )\r\n    }, [customerInfo])\r\n\r\n\r\n    // Call on the calcualte otals methods everytime there is change in the formProducts\r\n    useEffect(() => {\r\n        calculateTotals()\r\n    }, [formProducts])\r\n\r\n\r\n    // use history to set customer obj \r\n    useEffect(() => {\r\n        if(history.location.search !== ''){\r\n            setCustomerFromHistory()\r\n        }\r\n    }, [history.location.search])\r\n\r\n    const clearTextBoxes = () => {\r\n        \r\n    }\r\n\r\n    // check the fields for empty\r\n    const submitHandler = () => {\r\n\r\n        let alertCompoundMsg = '' \r\n\r\n        // Customer is current\r\n            // selectedCustomerObj has keys\r\n            // products kas keys\r\n        if(customerType === 'currentcustomer'){\r\n            if(Object.keys(selectedCustomerObj).length < 1) alertCompoundMsg += 'Missing / Customer not selected \\n'\r\n            if(repCode === '-') alertCompoundMsg += 'Please select a REP Code \\n'\r\n            if(Object.keys(formProducts).filter(productID => formProducts[productID]['qty'] > 0 ).length < 1) alertCompoundMsg += 'Missing: Products, there are no products selected \\n'\r\n        // Customer is new \r\n        } else {\r\n            if(customerName.length < 1) alertCompoundMsg += 'Missing : Customer Name\\n'\r\n            if(streetAddress.length < 1) alertCompoundMsg += 'Missing : Street Address\\n'\r\n            if(city.length < 1) alertCompoundMsg += 'Missing : City\\n'\r\n            if(state === '-') alertCompoundMsg += 'Missing : State\\n'\r\n            if(zipcode.length < 1) alertCompoundMsg += 'Missing : ZipCode\\n'\r\n            if(firstname.length < 1) alertCompoundMsg += 'Missing : Contact First Name\\n'\r\n            if(lastname.length < 1) alertCompoundMsg += 'Missing : Contact Last Name\\n'\r\n            if(phone.length < 1) alertCompoundMsg += 'Missing : Contact Phone\\n'\r\n            if(email.length < 1) alertCompoundMsg += 'Missing : Contact Email\\n'\r\n            if(Object.keys(formProducts).filter(productID => formProducts[productID]['qty'] > 0 ).length < 1) alertCompoundMsg += 'Missing: Products, there are no products selected \\n'\r\n            if(repCode === '-') alertCompoundMsg += 'Please select a REP Code \\n'\r\n            if(alertCompoundMsg.split(\"\\n\").length > 7) alertCompoundMsg += '\\n\\n Please make sure you are trying to submit a new customer, if not, switch to \"Current Customer\" in the Customer tab \\n'\r\n            \r\n        }\r\n        // if there is a problem, show the alert\r\n        if(alertCompoundMsg.length > 0) {\r\n            setAlertMsg(alertCompoundMsg)\r\n            setShowAlert(true)\r\n        // there are no problems, show the question modal\r\n        } else{\r\n            setShowModal(true)\r\n        }\r\n        \r\n    }\r\n\r\n    const submitOrder = () => {\r\n        // convert formProducts to only show qty > 0\r\n        let newProductsForm = {}\r\n\r\n        Object.keys(formProducts).filter(productID => formProducts[productID]['qty'] > 0 ).forEach(productID => {\r\n            newProductsForm[productID] = formProducts[productID]\r\n        })\r\n\r\n        const order = {\r\n            CustomerRef: selectedCustomerObj,\r\n            NewCustomer: customerType === 'currentcustomer' ? false : true,\r\n            NewCustomerRef : customerType === 'currentcustomer' ? {} : {\r\n                ShipAddress: {\r\n                    Addr1: customerName,\r\n                    Addr2: streetAddress,\r\n                    City: city,\r\n                    DefaultShipTo: true,\r\n                    Name: 'Ship to 1',\r\n                    PostalCode: zipcode,\r\n                    State: state\r\n                },\r\n                ContactInfo: {\r\n                    CompanyName: customerName,\r\n                    Email: email,\r\n                    Phone: phone,\r\n                    FirstName: firstname,\r\n                    LastName: lastname\r\n                }\r\n            },\r\n            \r\n            OrderFormType: orderFormType,\r\n            Products: newProductsForm,\r\n            AuthorRef: {\r\n                uid: userInfo.uid,\r\n                displayName: userInfo.displayName,\r\n                email: userInfo.email,\r\n                photoURL: userInfo.photoURL,\r\n            },\r\n            PriceLevel : customerType === 'currentcustomer' ? currentPriceLevel : priceLevel,\r\n            Terms : (customerType === 'currentcustomer' ? currentPaymentTerm : paymentTerm) ? customerType === 'currentcustomer' ? currentPaymentTerm : paymentTerm : '',\r\n            OrderTotals : orderTotals,\r\n            TimeStamp: new Date(),                                                                                                                                                                                                                                                                                                                                                                              \r\n            OrderInstructions: orderInstructions,\r\n            OrderStatus : 'OrderSubmitted',\r\n            RepCode: repCode\r\n        }\r\n        // Hide the modal,  Dispatch the order method, and push history to order submission page\r\n        setShowModal(false)\r\n        dispatch(createOrder(order))\r\n        history.push('/submitorder')  \r\n    }\r\n\r\n    return (\r\n        <div className=\"page-padding large fade\" id=\"order-create-page\">\r\n            {showModal && <ModalContainer modalType='question' msg='Are you sure you want to submit this order?' acceptMethod={submitOrder} declineMethod={()=> setShowModal(false)} />}\r\n            {showAlert && <ModalContainer modalType='alert' msg={alertMsg} acceptMethod={() => setShowAlert(false)} />}\r\n        <PageTitle title=\"Order Page\" subtitle=\"Add a new Order\" btns={['Clear']} btnFunc={clearTextBoxes}/>\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n            <TabsSection footerbtns activeTab={activeTab} setActiveTab={setActiveTab}>\r\n                <div name=\"tab-buttons\">\r\n                    <button type=\"button\">Customer</button>\r\n                    <button type=\"button\">Products</button>\r\n                    <button type=\"button\">Summary</button>\r\n                </div>\r\n                <div name=\"tab-pages\">\r\n                    <div>\r\n                        <div className=\"input-section\">\r\n                            <RadioSelector \r\n                            name=\"NewOrCurrentCustomer\" \r\n                            selectedValue=\"currentcustomer\"\r\n                            options={radioOptions} \r\n                            handleChange={e => handleCustomerTypeChange(e)}/>\r\n                            <br/><br/>\r\n                            {customerType === 'currentcustomer' ? (\r\n                                <>\r\n                                <CustomInput \r\n                                    title={Object.keys(selectedCustomerObj).length === 0 ? 'Select a Customer' : 'Customer Selected'}\r\n                                    placeholder=\"Enter the name of the customer\"\r\n                                    elName=\"customer-name\"\r\n                                    type={Object.keys(selectedCustomerObj).length === 0 ? 'text' : 'text-selected'}\r\n                                    value={Object.keys(selectedCustomerObj).length === 0 ? customerName : selectedCustomerObj.CompanyName}\r\n                                    required={true}\r\n                                    maxLength={60}\r\n                                    onChange={e => { setCustomerName(e.target.value); setselectedCustomerObj({})}}/>\r\n\r\n                                    {customerName.length > 0 \r\n                                        ?  <AutoCompleteSection\r\n                                            searchBoxText={customerName} \r\n                                            resetMainSearchBar={() => setCustomerName('')} \r\n                                            handleClick={customerResult => autoCompleteClick(customerResult)}/> \r\n                                        : ''}\r\n                                    {Object.keys(selectedCustomerObj).length > 0 ? (\r\n                                        <>\r\n                                        {/* Account Terms ajnd Pricing Specs */}\r\n\r\n                                        <div className=\"flex-items-container\" id=\"selected-customer-payment-info\">\r\n                                            <CustomInput \r\n                                                title=\"Terms\" \r\n                                                elName=\"new-customer-terms\"\r\n                                                type=\"select\"\r\n                                                options={termsList}\r\n                                                value={currentPaymentTerm}\r\n                                                required={true}\r\n                                                onChange={e => setCurrentPaymentTerm(e.target.value)}/>\r\n\r\n                                            <CustomInput \r\n                                                title=\"PriceLevel\" \r\n                                                placeholder=\"Discount % Off\"\r\n                                                elName=\"new-customer-price-level\"\r\n                                                type=\"number\"\r\n                                                value={currentPriceLevel}\r\n                                                onChange={e => handlePriceLevelChange(e.target.value)}/>\r\n                                        </div>\r\n\r\n                                        {/* If terms or price-level is changed */}\r\n                                        \r\n                                        {loadingCustomerData ? (<p>Loading...</p>) : (\r\n                                            <>\r\n                                            {customerInfo ? (\r\n                                                <>{\r\n                                                customerInfo.TermsRef && customerInfo.TermsRef.FullName !== currentPaymentTerm ? (\r\n                                                    <p> &nbsp;&nbsp; <i className=\"fas fa-exclamation-circle\"></i> You are changing the payment terms for this order only</p> \r\n                                                ) : (\r\n                                                    <></>\r\n                                                )}\r\n                                                \r\n                                                {\r\n                                                customerInfo.PriceLevelRef && customerInfo.PriceLevelRef.FullName.split('%')[0] !== currentPriceLevel ? (\r\n                                                    <p> &nbsp;&nbsp; <i className=\"fas fa-exclamation-circle\"></i> You are changing the discount rate for this order only</p> \r\n                                                ) : (\r\n                                                    <></>\r\n                                                )}\r\n                                                <br/><br/>\r\n                                                </>  \r\n                                            ) : ('')}\r\n                                            </>\r\n                                        )}\r\n                                        \r\n                                        {/* Account Info Summary */}\r\n                                        <div className=\"info-section\" id=\"order-form-account-information\">\r\n                                            {loadingCustomerData ? (<Loader/>) : (\r\n                                                <>\r\n                                                <p className=\"section-title\">Account Information</p>\r\n                                                <div className=\"section-content flex\">\r\n                                                    <div className=\"info-key-value\">\r\n                                                    <p>Current Balance</p>\r\n                                                    <p>{customerInfo && accounting.formatMoney(customerInfo.Balance)}</p>\r\n                                                    </div>\r\n                                                    <div className=\"info-key-value\">\r\n                                                        <p>Account Created</p>\r\n                                                        <p>{customerInfo && new Date(customerInfo.TimeCreated).toLocaleDateString()}</p>\r\n                                                    </div>\r\n                                                    <div className=\"info-key-value\">\r\n                                                        <div>\r\n                                                            <p>Main Contact</p>\r\n                                                            <p>{ customerInfo && customerInfo.FirstName} {customerInfo && customerInfo.LastName}</p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"info-key-value with-logo\">\r\n                                                        <i className=\"fas fa-phone-square-alt\"></i>\r\n                                                        <div>   \r\n                                                            <p>Main Phone</p>\r\n                                                            <p>{customerInfo && customerInfo.Phone}</p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"info-key-value with-logo\">\r\n                                                        <i className=\"fas fa-envelope-square\"></i>\r\n                                                        <div>\r\n                                                                <p>Main Email</p>\r\n                                                                <p>{customerInfo && customerInfo.Email}</p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"info-key-value with-logo\">\r\n                                                        <i className=\"fas fa-map-marker-alt\"></i>\r\n                                                        <div>\r\n                                                            <p>Shipping Address</p>\r\n                                                            {customerInfo && customerInfo.ShipAddress && \r\n                                                            <p>{customerInfo.ShipAddress.Addr1}<br/>\r\n                                                            {customerInfo.ShipAddress.Addr2}<br/>\r\n                                                            {customerInfo.ShipAddress.City}, {customerInfo.ShipAddress.State} {customerInfo.ShipAddress.PostalCode}\r\n                                                            </p>}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                </>\r\n                                            )}\r\n                                        </div>\r\n                                        <br/><br/>\r\n                                        </>)\r\n                                    : (<p><i className=\"fas fa-exclamation-circle\"></i> No Customer Selected</p> ) }\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                <br/>\r\n                                 <div className=\"info-section\">\r\n                                    <p className=\"section-title bold centered\">\r\n                                        Company Name\r\n                                    </p>\r\n                                </div>\r\n                                <br/><br/>\r\n\r\n                                <CustomInput \r\n                                    title=\"New Customer Name\" \r\n                                    placeholder=\"Enter the name of the customer\"\r\n                                    elName=\"new-customer-name\"\r\n                                    type=\"text\"\r\n                                    value={customerName}\r\n                                    required={true}\r\n                                    maxLength={60}\r\n                                    onChange={e => setCustomerName(e.target.value)}/>\r\n                                    <br/><br/>\r\n\r\n                                <div className=\"info-section\">\r\n                                    <p className=\"section-title bold centered\">\r\n                                        Shipping Information\r\n                                    </p>\r\n                                </div>\r\n                                <br/><br/>\r\n\r\n                                <CustomInput \r\n                                    title=\"Street Address\" \r\n                                    placeholder=\"Enter street address\"\r\n                                    elName=\"new-customer-streetaddress\"\r\n                                    type=\"text\"\r\n                                    value={streetAddress}\r\n                                    required={true}\r\n                                    maxLength={160}\r\n                                    onChange={e => setStreetAddress(e.target.value)}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"City\" \r\n                                    placeholder=\"Enter City\"\r\n                                    elName=\"new-customer-city\"\r\n                                    type=\"text\"\r\n                                    value={city}\r\n                                    required={true}\r\n                                    maxLength={60}\r\n                                    onChange={e => setCity(e.target.value)}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"State\" \r\n                                    placeholder=\"Enter State\"\r\n                                    elName=\"new-customer-state\"\r\n                                    type=\"select\"\r\n                                    value={state}\r\n                                    required={true}\r\n                                    options={statesList}\r\n                                    onChange={e => setState(e.target.value)}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"Zip Code\" \r\n                                    placeholder=\"Enter Zip Code\"\r\n                                    elName=\"new-customer-zip\"\r\n                                    type=\"text\"\r\n                                    value={zipcode}\r\n                                    required={true}\r\n                                    maxLength={5}\r\n                                    onChange={e => setZipCode(e.target.value)}/>\r\n\r\n                                <div className=\"info-section\">\r\n                                    <p className=\"section-title bold centered\">\r\n                                        Contact Information\r\n                                    </p>\r\n                                </div>\r\n                                <br/><br/>\r\n\r\n                                <CustomInput \r\n                                    title=\"First Name\" \r\n                                    placeholder=\"Enter Contact First Name\"\r\n                                    elName=\"new-customer-fname\"\r\n                                    type=\"text\"\r\n                                    value={firstname}\r\n                                    required={true}\r\n                                    maxLength={60}\r\n                                    onChange={e => setFirstName(e.target.value)}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"Last Name\" \r\n                                    placeholder=\"Enter Contact Last Name\"\r\n                                    elName=\"new-customer-lanme\"\r\n                                    type=\"text\"\r\n                                    value={lastname}\r\n                                    required={true}\r\n                                    maxLength={60}\r\n                                    onChange={e => setLastName(e.target.value)}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"Phone #\" \r\n                                    placeholder=\"Enter Contact Phone\"\r\n                                    elName=\"new-customer-phone\"\r\n                                    type=\"text\"\r\n                                    value={phone}\r\n                                    required={true}\r\n                                    maxLength={20}\r\n                                    onChange={e => setPhone(e.target.value)}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"Email Address\" \r\n                                    placeholder=\"Enter Contact Email Address\"\r\n                                    elName=\"new-customer-email\"\r\n                                    type=\"email\"\r\n                                    value={email}\r\n                                    required={true}\r\n                                    maxLength={60}\r\n                                    onChange={e => setEmail(e.target.value)}/>\r\n\r\n                                <div className=\"info-section\">\r\n                                    <p className=\"section-title bold centered\">\r\n                                        Payment Terms\r\n                                    </p>\r\n                                </div>\r\n                                <br/><br/> \r\n\r\n                                <CustomInput \r\n                                    title=\"Terms\" \r\n                                    elName=\"new-customer-terms\"\r\n                                    type=\"select\"\r\n                                    options={termsList}\r\n                                    value={paymentTerm}\r\n                                    required={true}\r\n                                    onChange={e => setPaymentTerm(e.target.value)}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"Price-Level\" \r\n                                    placeholder=\"Discount % Off\"\r\n                                    elName=\"new-customer-price-level\"\r\n                                    type=\"number\"\r\n                                    value={priceLevel}\r\n                                    onChange={e => handlePriceLevelChange(e.target.value)}/>\r\n                                \r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"input-section\">\r\n                        <CustomInput \r\n                            title=\"Type of Order Form\" \r\n                            placeholder=\"\"\r\n                            elName=\"order-form-type\"\r\n                            type=\"select\"\r\n                            options={orderFormTypesOptions}\r\n                            value={orderFormType}\r\n                            onChange={e => setOrderFormType(e.target.value)}/>\r\n                        </div>\r\n                        <TableForm \r\n                            id='orderForm'\r\n                            type='orderForm' \r\n                            form={orderForms && orderForms.standard} \r\n                            list={itemList} \r\n                            onInput={formFieldsInputHandler} \r\n                            pricingLevel={customerType === 'currentcustomer' ? currentPriceLevel : priceLevel}/>\r\n                        <br/> \r\n                        <br/> \r\n                        <div className=\"info-section\" id=\"order-form-totals\">\r\n                            <p className=\"section-title\">Order Totals</p>\r\n                            <div className=\"section-content\">\r\n                                <div className=\"info-key-value \">\r\n                                    <div>\r\n                                            <p>Total Amount</p>\r\n                                            <p>{accounting.formatMoney(orderTotals.amount)}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"info-key-value \">\r\n                                    <div>\r\n                                            <p>Qty</p>\r\n                                            <p>{orderTotals.qty}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"info-key-value \">\r\n                                    <div>\r\n                                            <p>Facings</p>\r\n                                            <p>{orderTotals.facings}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div>\r\n                        <br/>\r\n                        <div className=\"info-section\">\r\n                            <p className=\"section-title bold centered\">\r\n                                Order Summary\r\n                            </p>\r\n                        </div>\r\n                        <br/>\r\n\r\n                        {/* Account Info Summary */}\r\n                        {/* Object.keys(selectedCustomerObj).length > 0 */}\r\n                        {customerType === 'currentcustomer'  ? (\r\n                            <>\r\n                            <div className=\"info-section\" id=\"order-form-account-information-summary\">\r\n                            <p className=\"section-title\">Account Information Summary</p>\r\n                            <div className=\"section-content\">\r\n                                    <div className=\"info-key-value \">\r\n                                        <div>\r\n                                                <p>Company Name</p>\r\n                                                <p>{Object.keys(selectedCustomerObj).length > 0 ? selectedCustomerObj.CompanyName : '-'}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"info-key-value \">\r\n                                        <div>\r\n                                                <p>City, State</p>\r\n                                                <p>{Object.keys(selectedCustomerObj).length > 0 ? <>{selectedCustomerObj.City + \", \"} {selectedCustomerObj.State} </>: '-' }</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"info-key-value \">\r\n                                        <div>\r\n                                                <p>Acc#</p>\r\n                                                <p>{Object.keys(selectedCustomerObj).length > 0 ? selectedCustomerObj.AccountNumber : '-'}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"info-key-value \">\r\n                                        <div>\r\n                                                <p>ListID#</p>\r\n                                                <p>{Object.keys(selectedCustomerObj).length > 0 ? selectedCustomerObj.ListID : '-'}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                            <div className=\"info-section\">\r\n                            <p className=\"section-title\">New Account/Customer Information</p>\r\n                            <div className=\"section-content flex\">\r\n                                    <div className=\"info-key-value \">\r\n                                        <div>\r\n                                                <p>Company Name</p>\r\n                                                <p>{customerName.length > 0 ? customerName : '-'}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"info-key-value \">\r\n                                        <div>\r\n                                                <p>Contact Name</p>\r\n                                                <p>{firstname.length > 0 ? firstname + \" \" + lastname : \"-\" }</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"info-key-value \">\r\n                                        <div>\r\n                                                <p>Contact Information</p>\r\n                                                <p>\r\n                                                {phone.length > 0 ? <>Phone: {phone} <br/> </> : <>-<br/></>}\r\n                                                {email.length > 0 ? <>Email: {email} <br/> </> : <>-</>}\r\n                                                </p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"info-key-value \">\r\n                                        <div>\r\n                                                <p>Shipping Address</p>\r\n                                                <p>\r\n                                                {streetAddress.length > 0 ? streetAddress : \"-\"}<br/>\r\n                                                {city.length > 0 ? <>{city}, {state} {zipcode}</> : <>-</>}\r\n                                                </p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"info-key-value \">\r\n                                        <div>\r\n                                                <p>Pricing and Terms </p>\r\n                                                <p>Pricing: {priceLevel} <br/> Terms: {paymentTerm}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            </>\r\n                        )}\r\n                        <br/><br/>\r\n                        \r\n                        {/* Order Totals Summary */}\r\n                        <div className=\"info-section\" id=\"order-form-totals\">\r\n                            <p className=\"section-title\">Order Totals</p>\r\n                            <div className=\"section-content\">\r\n                                <div className=\"info-key-value \">\r\n                                    <div>\r\n                                            <p>Total Amount</p>\r\n                                            <p>{accounting.formatMoney(orderTotals.amount)}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"info-key-value \">\r\n                                    <div>\r\n                                            <p>Qty</p>\r\n                                            <p>{orderTotals.qty}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"info-key-value \">\r\n                                    <div>\r\n                                            <p>Facings</p>\r\n                                            <p>{orderTotals.facings}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        \r\n\r\n                        <br/><br/>\r\n\r\n                        <div className=\"info-section\">\r\n                            <p className=\"section-title\">\r\n                                Products Summary\r\n                            </p>\r\n                        </div>\r\n\r\n                        <table id=\"order-page-summary-products\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Product</th>\r\n                                    <th>Price</th>\r\n                                    <th>Qty</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            {!Object.keys(formProducts).length > 0  ? (\r\n                            <>\r\n                            </>)\r\n                             : (\r\n                                <tbody>\r\n                                    {Object.keys(formProducts).filter(listID => formProducts[listID].qty > 0 ).map( (listID, index, arr) => {\r\n                                        //separate sections in the order form \r\n                                        let isDiffFromPrev = false\r\n                                        if(index > 0 && formProducts[arr[index - 1]].productCode.substring(0,4) !== formProducts[listID].productCode.substring(0,4)){\r\n                                            isDiffFromPrev = true\r\n                                        }\r\n                                        return (\r\n                                            <tr key={listID} className={isDiffFromPrev ? \"with-spacer-small\" : \"\"}>\r\n                                                <td>{formProducts[listID].name}</td>\r\n                                                <td>{accounting.formatMoney(formProducts[listID].price)}</td>\r\n                                                <td>{formProducts[listID].qty}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            )}\r\n\r\n\r\n                        </table>\r\n                        <br/><br/>\r\n                        <div className=\"input-section\">\r\n                            <CustomInput \r\n                                title=\"Order Instructions\" \r\n                                placeholder=\"Enter notes for this order\"\r\n                                elName='order-instructions'\r\n                                type=\"text\"\r\n                                value={orderInstructions}\r\n                                maxLength={240}\r\n                                onChange={e => setOrderInstructions(e.target.value)}/> \r\n                            <br/><br/> \r\n                                \r\n                            {/* TO BYPASS UNFOCUSABLE ELEMENT ERROR */}\r\n                            <button type='submit' hidden ></button>\r\n                            \r\n                            <Button typeBtn='SubmitEscapeForm' onClick={submitHandler}/>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </TabsSection>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderCreatePage\r\n\r\nconst radioOptions = [\r\n    {title: 'Current Customer', value: 'currentcustomer'},\r\n    {title: 'New Customer', value : 'newcustomer'},\r\n]\r\n\r\n\r\nconst statesList = [ \r\n\"-\", \r\n\"AK\",\r\n\"AL\",\r\n\"AR\",\r\n\"AS\",\r\n\"AZ\",\r\n\"CA\",\r\n\"CO\",\r\n\"CT\",\r\n\"DC\",\r\n\"DE\",\r\n\"FL\",\r\n\"GA\",\r\n\"GU\",\r\n\"HI\",\r\n\"IA\",\r\n\"ID\",\r\n\"IL\",\r\n\"IN\",\r\n\"KS\",\r\n\"KY\",\r\n\"LA\",\r\n\"MA\",\r\n\"MD\",\r\n\"ME\",\r\n\"MI\",\r\n\"MN\",\r\n\"MO\",\r\n\"MS\",\r\n\"MT\",\r\n\"NC\",\r\n\"ND\",\r\n\"NE\",\r\n\"NH\",\r\n\"NJ\",\r\n\"NM\",\r\n\"NV\",\r\n\"NY\",\r\n\"OH\",\r\n\"OK\",\r\n\"OR\",\r\n\"PA\",\r\n\"PR\",\r\n\"RI\",\r\n\"SC\",\r\n\"SD\",\r\n\"TN\",\r\n\"TX\",\r\n\"UT\",\r\n\"VA\",\r\n\"VI\",\r\n\"VT\",\r\n\"WA\",\r\n\"WI\",\r\n\"WV\",\r\n\"WY\"]\r\n","import React, {useRef, useEffect, useState} from 'react'\r\n\r\nimport {auth} from '../firebase'\r\n\r\n\r\nconst ReportsPage = () => {\r\n\r\nconst [isAdmin,setIsAdmin] = useState(false)\r\nconst [isOffice,setIsOffice] = useState(false)\r\n\r\n // wait on the user load\r\n try {\r\n      getCurrentUser(auth).then(user => {\r\n           if(user){\r\n                user.getIdTokenResult().then( token => {\r\n                     token?.claims?.admin ? setIsAdmin(true) : setIsAdmin(false)\r\n                     token?.claims?.office ? setIsOffice(true) : setIsOffice(false)\r\n                })\r\n           }\r\n      })\r\n } catch (error) {\r\n      console.log(error)\r\n }\r\n\r\n    return (\r\n        <div className=\"\">\r\n          {isAdmin || isOffice ? <iframe\r\n            width=\"100%\" \r\n            height=\"1500\"\r\n            src=\"https://datastudio.google.com/embed/reporting/e0a22b84-ced5-46d3-a1ea-69f197ba75be/page/NKw0B\" \r\n            frameBorder=\"0\" \r\n            style={{border: \"0\"}} \r\n            allowFullScreen></iframe> : <></>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReportsPage\r\n\r\nfunction getCurrentUser(auth) {\r\n    return new Promise((resolve, reject) => {\r\n       const unsubscribe = auth.onAuthStateChanged(user => {\r\n          unsubscribe();\r\n          resolve(user);\r\n       }, reject);\r\n    });\r\n  }\r\n","import React from 'react'\r\n\r\nimport accounting from 'accounting-js'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst OrderItem = ({order}) => {\r\n    const {AuthorRef, CustomerRef, OrderTotals, TimeStamp, id, NewCustomerRef, NewCustomer} = order\r\n\r\n    return (\r\n        <div className=\"order\">\r\n            <Link to={`/orderview/${id}`}>\r\n            <div className={order.OrderStatus === 'OrderInQBooks' ? 'order-container highlight': 'order-container'}>\r\n                <div className=\"order-left\">\r\n                    <p>{CustomerRef.CompanyName ? CustomerRef.CompanyName : NewCustomerRef.ContactInfo?.CompanyName }</p>\r\n                    {NewCustomer && <p>New Customer <span style={{color : 'red'}}>*</span></p>}\r\n                    <p>{formatDateTime(TimeStamp.toDate())}</p>\r\n                    <p>{AuthorRef && AuthorRef.displayName ? AuthorRef.displayName : 'Anonymous' }</p>\r\n                </div>\r\n                <div className=\"order-right\">\r\n                    <p>{accounting.formatMoney(OrderTotals.amount)}</p>\r\n                    <p>{OrderTotals.qty } boxes</p>\r\n                    <p>{OrderTotals.facings } skus</p>\r\n                </div>\r\n            </div>\r\n            </Link>\r\n        </div> \r\n    )\r\n}\r\n\r\nconst formatDateTime  = (date) => {\r\n    let dateString =  `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n    let timeString = date.toLocaleTimeString('en-US', { hour: 'numeric', hour12: true, minute: 'numeric' })\r\n\r\n    return dateString + ' ' +  timeString\r\n}\r\n\r\n\r\n\r\nexport default OrderItem\r\n","import React from 'react'\r\nimport accounting from 'accounting-js';\r\n\r\nconst ReportItem = ({type, data}) => {\r\n\r\n    switch (type) {\r\n        case 'customer-page-sales-summary-table':\r\n            return (\r\n                <div className=\"report-item-container\">\r\n                    <div className=\"info-section\" >\r\n                        <p className=\"section-title\">Sales Details</p>\r\n                    </div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Year</th>\r\n                            <th>Avg / Invoice</th>\r\n                            <th>Facings</th>\r\n                            <th>Sales</th>\r\n                            <th>%Change</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {data && Object.keys(data).map(year => {\r\n                            const percentChangeResult = data[year - 1] ? percentChange(data[year - 1].totalSales,data[year].totalSales) : '-'\r\n                            const hasInfinty = percentChangeResult.split(' ')[0] === 'Infinity'\r\n\r\n                            return <tr key={year}>\r\n                                <td>{year}</td>\r\n                                <td>{accounting.formatMoney(data[year].avgPerInvoice)}</td>\r\n                                <td>{data[year].facings}</td>\r\n                                <td>{accounting.formatMoney(data[year].totalSales)}</td>\r\n                                <td >{ hasInfinty ? '-' : percentChangeResult }</td>\r\n                            </tr>\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                    \r\n                </div>\r\n            )\r\n\r\n    }\r\n}\r\n\r\n\r\nconst percentChange = (initial,final) => {\r\n    const result = accounting.toFixed(( (final - initial) / initial) * 100, 0)\r\n    return result + \" %\"\r\n}\r\n\r\nexport default ReportItem\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link, useLocation} from 'react-router-dom'\r\nimport { useDispatch, useSelector} from 'react-redux'\r\n\r\n\r\nimport TabsSection from '../components/TabSection'\r\nimport CustomInput from '../components/CustomInput'\r\n\r\nimport { getCustomerData, getCustomerInvoices, resetCustomerInfo, getCustomerAppOrders, getCustomerSalesOrders, getCustomerSalesList} from '../actions/customerActions'\r\nimport { getNotesForCustomerPage } from '../actions/noteActions'\r\nimport Loader from '../components/Loader'\r\nimport NoteItem from '../components/NoteItem'\r\nimport OrderItem from '../components/OrderItem'\r\nimport TransactionTable from '../components/TransactionTable'\r\nimport Button from '../components/Button'\r\nimport ReportItem from '../components/ReportItem'\r\nimport ChartItem from '../components/ChartItem'\r\n\r\n\r\n\r\nimport accounting from 'accounting-js'\r\n\r\nconst CustomerPage = ({ match , history}) => {\r\n    const dispatch = useDispatch()\r\n    const customerId = match.params.id\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { loading: userLoginLoading, userInfo } = userLogin;\r\n\r\n    const customerData = useSelector(state => state.customerDetails)\r\n    const { loading, customerInfo, error: errorCustomerDetails } = customerData;\r\n\r\n    const customerInvoices = useSelector(state => state.customerInvoices)\r\n    const { loading: customerInvoicesLoading, customerInvoices: customerInvoiceList, error: errorCustomerInvoices } = customerInvoices;\r\n\r\n    const customerAppOrders = useSelector(state => state.customerAppOrders)\r\n    const { loading: customerAppOrdersLoading, customerAppOrders: customerAppOrderList, error: errorAppOrders} = customerAppOrders;\r\n\r\n    const customerSalesOrders = useSelector(state => state.customerSalesOrders)\r\n    const { loading: customerSalesOrdersLoading, customerSalesOrders: customerSalesOrderList, error: errorSalesOrders} = customerSalesOrders;\r\n\r\n    const customerSalesList = useSelector(state => state.customerSalesList)\r\n    const { loading: customerSalesListLoading, salesList: customerSalesListObj, error: errorCustomerSalesList} = customerSalesList;\r\n\r\n    const customerNotes = useSelector(state => state.customerNotes)\r\n    const { loading: customerNotesLoading, notes } = customerNotes;\r\n\r\n\r\n    useEffect(async() => {\r\n        if(!userInfo) {\r\n            history.push('/login')\r\n        } else{\r\n            // check if the customer is different\r\n            // if the custoemr is different, reset data & dispatch for new data\r\n            // otherwise do nothing\r\n\r\n            if(!customerInfo) return \r\n            if(customerId !== customerInfo.ListID){\r\n                dispatch( await getCustomerData(customerId)) \r\n                dispatch( resetCustomerInfo())\r\n            }\r\n\r\n        }\r\n\r\n    }, [dispatch, match,customerId])\r\n\r\n    // Get later from the db \r\n    const transactionTypes = ['Invoices', 'App-Orders']\r\n\r\n    const [transactionType, setTransactionType] = useState(transactionTypes[0])\r\n    const [activeTab,setActiveTab] = useState(0)\r\n\r\n    // checking if there are states saved from sessionstorage\r\n    useEffect(() => {\r\n        const data = sessionStorage.getItem(\"customerPage\")\r\n        if(data){\r\n            setTransactionType(JSON.parse(data).transactionType)\r\n            setActiveTab(JSON.parse(data).activeTab)\r\n        }\r\n    }, [])\r\n\r\n    // Saving the state to session storage\r\n    useEffect(() => {\r\n        sessionStorage.setItem(\"customerPage\", JSON.stringify({\r\n            transactionType : transactionType,\r\n            activeTab : activeTab\r\n        }))\r\n    })\r\n\r\n\r\n    const getNotesForAccountHandler = () => {\r\n        // if there are notes and they are the same as id as customer id then load\r\n        if(notes.length > 1){\r\n            if(notes[0].CustomerRef.ListID !== customerId){\r\n                dispatch(getNotesForCustomerPage())\r\n            }\r\n        }\r\n        // there no notes \r\n        else{\r\n            dispatch(getNotesForCustomerPage())\r\n        }    \r\n    }\r\n\r\n    const transactionLoaderHandler  = () => {\r\n        if(transactionType === 'Invoices'){\r\n            if(customerInvoiceList && customerInvoiceList.length > 0 && customerInvoiceList[0]['CustomerRef']['ListID'] === customerInfo.ListID){\r\n                // alert(`Invoices already loaded for Customer : ${customerInfo.FullName && customerInfo.FullName}`)\r\n            } else{\r\n                dispatch(getCustomerInvoices(customerInfo.ListID))\r\n            } \r\n        }\r\n\r\n        if(transactionType === 'App-Orders'){\r\n            if(customerAppOrderList && customerAppOrderList.length > 0 && customerAppOrderList[0]['CustomerRef']['ListID'] === customerInfo.ListID){\r\n                // alert(`App order List already loaded for Customer : ${customerInfo.FullName && customerInfo.FullName}`)\r\n            } else{\r\n                dispatch(getCustomerAppOrders(customerInfo.ListID))\r\n            } \r\n        }\r\n\r\n        if(transactionType === 'Sales-Orders'){\r\n            if(customerSalesOrderList && customerSalesOrderList.length > 0 && customerSalesOrderList[0]['CustomerRef']['ListID'] === customerInfo.ListID){\r\n                // alert(`App order List already loaded for Customer : ${customerInfo.FullName && customerInfo.FullName}`)\r\n            } else{\r\n                dispatch(getCustomerSalesOrders(customerInfo.ListID))\r\n            } \r\n        }\r\n    }\r\n\r\n    const handletest = () => {\r\n        dispatch(getCustomerSalesList(customerInfo.ListID))\r\n    }\r\n\r\n    return (\r\n        <div className=\"page-padding extra-large page-animated fade\">\r\n                {errorCustomerDetails ? (\r\n                    <div className=\"info-key-value with-logo\">\r\n                    <i className=\"fas fa-exclamation-circle\"></i>\r\n                    <p>Error : {errorCustomerDetails.code}</p>\r\n                </div>\r\n                )\r\n                :(\r\n                    <>\r\n                    {!loading ? (<div className=\"customer-header-section\">\r\n                    <h2 className=\"title\">{customerInfo && customerInfo.FullName}</h2>\r\n\r\n                    <div className=\"customer-sub-section\">\r\n                        <p><i className=\"fas fa-store\"></i></p>\r\n                        <p>{customerInfo && customerInfo.AccountNumber}</p>\r\n                        {<p>{customerInfo && customerInfo.ShipAddress && customerInfo.ShipAddress.City \r\n                            + ', ' + customerInfo.ShipAddress.State}</p>}\r\n                    </div>\r\n\r\n                    <div className=\"customer-sub-actions\">\r\n                        <Link to={`/ordercreate?customerListID=${customerId}`} className=\"customer-add-order\">\r\n                            <p><i className=\"fas fa-file-invoice-dollar\"></i> ADD ORDER</p>\r\n                        </Link>\r\n\r\n                        <Link to={`/notecreate?customerListID=${customerId}`} className=\"customer-add-note\">\r\n                            <p><i className=\"fas fa-pen\"></i> ADD NOTE</p>\r\n                        </Link>\r\n\r\n                        {/* <a className=\"customer-add-desc\">\r\n                            <p><i className=\"fas fa-comment-medical\"></i> ADD DESC.</p> \r\n                        </a> */}\r\n                    </div>\r\n\r\n                    <TabsSection activeTab={activeTab} setActiveTab={setActiveTab}>\r\n                            <div name=\"tab-buttons\">\r\n                                <button>Info</button>\r\n                                <button>Stats</button>\r\n                                <button onClick={getNotesForAccountHandler}>Notes</button>\r\n                                <button>Transactions</button>\r\n                            </div>\r\n\r\n                            <div name=\"tab-pages\">\r\n                                <div>\r\n                                \r\n                                <div className=\"info-section\">\r\n                                    <p className=\"section-title\">Account Status Information</p>\r\n                                    <div className=\"section-content flex\">\r\n                                        <div className=\"info-key-value\">\r\n                                            <p>Current Balance</p>\r\n                                            <p>{customerInfo && accounting.formatMoney(customerInfo.Balance)}</p>\r\n                                        </div>\r\n                                        <div className=\"info-key-value\">\r\n                                            <p>Payment Terms</p>\r\n                                            <p>{ customerInfo && customerInfo.TermsRef && customerInfo.TermsRef?.FullName}</p>\r\n                                        </div>\r\n                                        <div className=\"info-key-value\">\r\n                                            <p>Account Created</p>\r\n                                            <p>{customerInfo && new Date(customerInfo?.TimeCreated).toLocaleDateString()}</p>\r\n                                        </div>\r\n                                        <div className=\"info-key-value\">\r\n                                            <p>Price Level</p>\r\n                                            <p>{customerInfo && customerInfo.PriceLevelRef ? customerInfo.PriceLevelRef?.FullName : 'Standard'}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"divider\"></div>\r\n\r\n                                <div className=\"info-section\">\r\n                                    <p className=\"section-title\">Contact Information</p>\r\n                                    <div className=\"section-content\">\r\n                                        <div className=\"info-key-value with-logo\">\r\n                                            <i className=\"fas fa-user-circle\"></i>\r\n                                            <div>\r\n                                                <p>Main Contact</p>\r\n                                                <p>{ customerInfo && customerInfo.FirstName} {customerInfo && customerInfo.LastName}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"info-key-value with-logo\">\r\n                                            <i className=\"fas fa-phone-square-alt\"></i>\r\n                                            <div>   \r\n                                                <p>Main Phone</p>\r\n                                                <p>{customerInfo && <a href={`tel:${customerInfo.Phone?.replace( /^\\D+/g, '')}`}>{customerInfo.Phone}</a>}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"info-key-value with-logo\">\r\n                                            <i className=\"fas fa-envelope-square\"></i>\r\n                                        <div>\r\n                                                <p>Main Email</p>\r\n                                                <p>{customerInfo && <a href={`mailto:${customerInfo.Email}`}>{customerInfo.Email}</a>}</p>\r\n                                        </div>\r\n                                        </div>\r\n                                        <div className=\"info-key-value with-logo\"> \r\n                                            <i className=\"fas fa-map-marker-alt\"></i>\r\n                                            <div>\r\n                                                <p>Shipping Address</p>\r\n                                                {customerInfo && customerInfo.ShipAddress && \r\n                                                <p>{customerInfo.ShipAddress.Addr1}<br/>\r\n                                                {customerInfo.ShipAddress.Addr2}<br/>\r\n                                                {customerInfo.ShipAddress.City}, {customerInfo.ShipAddress.State} {customerInfo.ShipAddress.PostalCode}\r\n                                                </p>}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <br/>\r\n                                <div className=\"info-section\">\r\n                                    <p className=\"section-title\">Sales Information</p>\r\n                                    <div className=\"section-content flex\">\r\n                                        <div className=\"info-key-value\">\r\n                                            <p>Last Invoice #</p>\r\n                                            <p>{customerSalesListObj?.lastInvoice?.RefNumber}</p>\r\n                                        </div>\r\n                                        <div className=\"info-key-value\">\r\n                                            <p>Last Invoice Date</p>\r\n                                            <p>{ customerSalesListObj?.lastInvoice?.InvDate}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <br/><br/><br/>\r\n                                {customerSalesListObj && customerSalesListObj.yearSales ? <ChartItem type='customer-page-sales-list' chartData={customerSalesListObj.yearSales}/> : <></>}\r\n                                <br/><br/><br/><br/>\r\n                                {customerSalesListObj && customerSalesListObj.yearSales ? <ReportItem type='customer-page-sales-summary-table' data={customerSalesListObj.yearSales}/> : <></>}\r\n                            </div>\r\n                            <div>\r\n                                {customerNotesLoading ? (<Loader/>) : (\r\n                                    <>\r\n                                    {notes ? (\r\n                                        <>\r\n                                       \r\n                                        {notes.length > 0 && notes[0].CustomerRef.ListID !== customerId ? getNotesForAccountHandler(): <></>}\r\n                                            <p className=\"feed-result-text\">{notes.length} Notes Found</p>\r\n                                            <div className=\"feed notes-feed\">\r\n                                                {notes\r\n                                                    .sort((a,b) => b.TimeStamp.toDate() - a.TimeStamp.toDate())\r\n                                                    .map(note => (\r\n                                                    <NoteItem key={note.id} note={note}/>              \r\n                                                ))}\r\n                                            </div>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <p className=\"feed-result-text\">0 Notes Found</p>\r\n                                        </>\r\n                                    )}\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                            <div>\r\n                                <div className='input-section'>\r\n                                <CustomInput \r\n                                    title=\"Type of Transaction to show\" \r\n                                    placeholder=\"\"\r\n                                    elName=\"customer-transaction-type\"\r\n                                    type=\"select\"\r\n                                    options={transactionTypes}\r\n                                    value={transactionType}\r\n                                    onChange={e => setTransactionType(e.target.value)}\r\n                                />\r\n\r\n                                <Button typeBtn=\"Load\" onClick={transactionLoaderHandler} text={`Load ${transactionType}`}/>\r\n                                <div className=\"divider clear\"></div>\r\n\r\n\r\n                                {transactionType === 'Invoices' && (\r\n                                    <>\r\n                                    {customerInvoicesLoading ? <Loader/> \r\n                                    : errorCustomerInvoices ? <p>Error: {errorCustomerInvoices.code}</p> : (\r\n                                        <>\r\n                                        {customerInvoiceList && customerInvoiceList.length > 0 ? (\r\n                                            <TransactionTable data={customerInvoiceList}  type=\"customer-page-invoices\"/>\r\n                                        ) : (\r\n                                            <p className=\"feed-result-text\"> <i className=\"fas fa-exclamation-circle\"></i> No invoices were found</p>\r\n                                        )}\r\n                                        </>\r\n                                    )\r\n                                    }\r\n                                    </>\r\n                                )}\r\n\r\n                                {transactionType === 'App-Orders' && (\r\n                                    <>\r\n                                    {customerAppOrdersLoading ? <Loader/> \r\n                                    : errorAppOrders ? <p>Error: {errorAppOrders.code}</p> : (\r\n                                        <>\r\n                                        {customerAppOrderList && customerAppOrderList.length > 0 ? (\r\n                                            <TransactionTable data={customerAppOrderList}  type=\"customer-page-apporders\"/>\r\n                                        ) : (\r\n                                            <p className=\"feed-result-text\"> <i className=\"fas fa-exclamation-circle\"></i> No app-orders were found</p>\r\n                                        )}\r\n                                        </>\r\n                                    )\r\n                                    }\r\n                                    </>\r\n                                )}\r\n\r\n                                {transactionType === 'Sales-Orders' && (\r\n                                    <>\r\n                                    {customerSalesOrdersLoading ? <Loader/> \r\n                                    : errorSalesOrders ? <p>Error: {errorSalesOrders.code}</p> : (\r\n                                        <>\r\n                                        {customerSalesOrderList && customerSalesOrderList.length > 1 ? (\r\n                                            <TransactionTable data={customerSalesOrderList}  type=\"customer-page-salesorders\"/>\r\n                                        ) : (\r\n                                            <p className=\"feed-result-text\"> <i className=\"fas fa-exclamation-circle\"></i> No sales-orders were found</p>\r\n                                        )}\r\n                                        </>\r\n                                    )\r\n                                    }\r\n                                    </>\r\n                                )}\r\n                            \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </TabsSection>\r\n\r\n                </div>) : (\r\n                    <Loader/>\r\n                )}\r\n                </>\r\n                )}\r\n   \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CustomerPage\r\n","import React, {useState} from 'react'\r\n\r\nconst OptionSelector = ({dataArr, title, state, setState}) => {\r\n    \r\n\r\n    const onChange = e => {\r\n        const clickedOption = e.target.value\r\n        const checkedOption = e.target.checked\r\n\r\n        setState({...state, [clickedOption] : checkedOption})\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className='option-selector'>\r\n            <h3>{title}</h3>\r\n            <div className='option-selector-options-container'>\r\n                {dataArr.map(option => \r\n                <div key={`${option}-checkbox`}>\r\n                    <label htmlFor=\"option\">\r\n                        <input onChange={e => onChange(e)} type=\"checkbox\" name={option} value={option}/> \r\n                        <span>{option}</span>\r\n                    </label>\r\n                </div>)}\r\n                <p className='option-selector-results'>{Object.keys(state).map(option => state[option] ? <span key={`${option}-option-result`}>{option} </span> : <span></span>)}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionSelector\r\n\r\nconst getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max))\r\n","import {\r\n    ADMIN_USER_CREATE_REQUEST,\r\n    ADMIN_USER_CREATE_SUCCESS,\r\n    ADMIN_USER_CREATE_FAIL,\r\n    ADMIN_USER_CREATE_RESET,\r\n\r\n    ADMIN_USER_LIST_REQUEST,\r\n    ADMIN_USER_LIST_SUCCESS,\r\n    ADMIN_USER_LIST_FAIL\r\n} from '../constants/adminConstants'\r\n\r\nimport {db, auth, functions} from '../firebase'\r\n\r\n\r\nexport const getUsersForAdmin = () => async (dispatch) => {\r\n    dispatch({\r\n        type: ADMIN_USER_LIST_REQUEST,\r\n    })\r\n    // await to recevie the current user before proceeding\r\n    await getCurrentUser(auth)\r\n\r\n    // get the claims from the user\r\n    const {claims} = await auth.currentUser?.getIdTokenResult()\r\n\r\n    // check if signed user is an admin,, if not go back\r\n    if(!claims.admin) {\r\n        dispatch({\r\n            type: ADMIN_USER_LIST_FAIL,\r\n            payload: 'Not Authorized'\r\n        })\r\n        return\r\n    }\r\n\r\n    // query to be performed\r\n    let query = db.collection('users')\r\n\r\n\r\n    // request the query \r\n\r\n    query.onSnapshot(snap=>{\r\n        let result = []\r\n            snap.forEach(doc => result.push({...doc.data(), id : doc.id }))\r\n            dispatch({\r\n                type: ADMIN_USER_LIST_SUCCESS,\r\n                payload: result\r\n            })\r\n    }, err => {\r\n        dispatch({\r\n            type: ADMIN_USER_LIST_FAIL,\r\n            payload: err.mesage\r\n        })  \r\n    })\r\n}\r\n\r\nexport const createNewUser = newUser => async (dispatch) => {\r\n    dispatch({\r\n        type: ADMIN_USER_CREATE_REQUEST,\r\n    })\r\n\r\n    // function that creates a new user\r\n    const createUser = functions.httpsCallable('createUser');\r\n\r\n    // await to recevie the current user before proceeding\r\n    await getCurrentUser(auth)\r\n\r\n    // get the claims from the user\r\n    const {claims} = await auth.currentUser?.getIdTokenResult()\r\n\r\n    // check if signed user is an admin,, if not go back\r\n    if(!claims.admin) {\r\n        dispatch({\r\n            type: ADMIN_USER_CREATE_FAIL,\r\n            payload: 'Not Authorized'\r\n        })\r\n        return\r\n    }\r\n\r\n    // Call the actual user\r\n    createUser(newUser)\r\n        .then(resp => {\r\n          //Display success\r\n          dispatch({\r\n            type: ADMIN_USER_CREATE_SUCCESS,\r\n            payload: resp\r\n        })\r\n        })\r\n        .catch(error => {\r\n            dispatch({\r\n                type: ADMIN_USER_CREATE_FAIL,\r\n                payload: error.message\r\n            })\r\n        });\r\n}\r\n\r\n \r\n\r\n\r\n\r\nfunction getCurrentUser(auth) {\r\n    return new Promise((resolve, reject) => {\r\n       const unsubscribe = auth.onAuthStateChanged(user => {\r\n          unsubscribe();\r\n          resolve(user);\r\n       }, reject);\r\n    });\r\n  }\r\n","import React, {useEffect, useState, useRef} from 'react'\r\n\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport Loader from '../components/Loader'\r\n\r\nimport Button from '../components/Button'\r\nimport ModalContainer from '../components/ModalContainer'\r\n\r\nimport PageTitle from '../components/PageTitle'\r\n\r\nimport CustomInput from '../components/CustomInput'\r\nimport TransactionTable from '../components/TransactionTable'\r\n\r\nimport OptionSelector from '../components/OptionSelector';\r\nimport { getUsersForAdmin, createNewUser } from '../actions/adminActions'\r\n\r\nconst AdminPage = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { loading, users, error } = useSelector(state => state.adminUserList)\r\n    const { loading: loadingCreateNewUser, user, error : errorCreateNewUser, success } = useSelector(state => state.adminCreateNewUser)\r\n\r\n    const initialState = {\r\n        showModal : false,\r\n        showAlert : false,\r\n        alertMsg: '',\r\n        newEmail: '',\r\n        firstname: '', \r\n        lastname: '',\r\n        newPassword1: '',\r\n        newPassword2: '',\r\n        role: 'office',\r\n        stateSelected : [],\r\n        addUserActive : false,\r\n        editUserActive : false,\r\n        currentUserEditing: {},\r\n        currentUserEditingForm: {\r\n            firstname : '',\r\n            lastname  : '',\r\n            email: '',\r\n            rep: 'office',\r\n            stateSelected: []\r\n        },\r\n    }\r\n\r\n    // Modal State\r\n    const [showModal,setShowModal] = useState(initialState.showModal)\r\n    const [showAlert,setShowAlert] = useState(initialState.showAlert)\r\n    const [alertMsg, setAlertMsg] = useState(initialState.alertMsg)\r\n\r\n\r\n\r\n    const [newEmail, setNewEmail] = useState(initialState.newEmail)\r\n    const [firstname,setFirstName] = useState(initialState.firstname)\r\n    const [lastname,setLastName] = useState(initialState.lastname)\r\n    const [newPassword1, setNewPassword1] = useState(initialState.newPassword1)\r\n    const [newPassword2, setNewPassword2] = useState(initialState.newPassword2)\r\n    const [role, setRole] = useState(initialState.role)\r\n\r\n\r\n    const [stateSelected, setStatesSelected] = useState(initialState.stateSelected)\r\n\r\n    const [addUserActive, setAddUserActive] = useState(initialState.addUserActive)\r\n    const [editUserActive, setEditUserActive] = useState(initialState.editUserActive)\r\n    const [currentUserEditing, setCurrentUserEditing] = useState(initialState.currentUserEditing)\r\n    const [currentUserEditingForm, setCurrentUserEditingForm] = useState(initialState.currentUserEditingForm)\r\n\r\n    const addUserTableHandler = () => {\r\n        setAddUserActive(!addUserActive)\r\n    }\r\n\r\n\r\n    // handlesubmitForm\r\n    const handleSubmitForm = e => {\r\n\r\n        e.preventDefault()\r\n\r\n        let alertCompoundMsg = ''\r\n\r\n        // check for the passwords matching \r\n        if(newPassword1 !== newPassword2) alertCompoundMsg += '*' + NOPASSWORDMATCH + '\\n'\r\n\r\n        // check for the password being at least 6 characters \r\n        if(newPassword1.length < 6 || newPassword2.length < 6) alertCompoundMsg +='*' + SHORTPASS + '\\n'\r\n\r\n        // check that if rep is selected that at east a state is selected\r\n        if(role === 'rep' && stateSelected.length < 1) alertCompoundMsg += '*' +NOSTATEWITHREPMESSAGE + '\\n'\r\n\r\n        \r\n        // check if there were errors\r\n        if(alertCompoundMsg.length > 1) {\r\n            setAlertMsg(alertCompoundMsg)\r\n            setShowAlert(true)\r\n            return\r\n        }\r\n\r\n        // Everything is good, open the modal\r\n        setShowModal(true)\r\n    } \r\n\r\n    // reset the text fields \r\n    const resetState = () => {\r\n        setNewEmail(initialState.newEmail)\r\n        setFirstName(initialState.firstname)\r\n        setLastName(initialState.lastname)\r\n        setNewPassword1(initialState.newPassword1)\r\n        setNewPassword2(initialState.newPassword2)\r\n        setRole(initialState.role)\r\n        setStatesSelected(initialState.stateSelected)\r\n    }\r\n\r\n\r\n\r\n    // Handle the submission of a new user \r\n    const handleSubmit = e => {\r\n        setShowModal(false)\r\n\r\n        const user = {\r\n            email: newEmail,\r\n            firstname,\r\n            lastname,\r\n            password : newPassword1,\r\n            role,\r\n            restrictions : {\r\n                states : role === 'rep' ? Object.keys(stateSelected).filter(o => stateSelected[o]).map(o => o ) : []\r\n            }\r\n        }\r\n\r\n        dispatch(createNewUser(user))\r\n\r\n    }\r\n\r\n    const handleGoBack = () => {\r\n        resetState()\r\n        dispatch({\r\n            type: 'ADMIN_USER_CREATE_RESET'\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n        dispatch(getUsersForAdmin())\r\n    }, [])\r\n\r\n    const handleUserEditBtn = (e) => {\r\n        return\r\n        setEditUserActive(true)\r\n        setCurrentUserEditing(e)\r\n        setCurrentUserEditingForm({\r\n            firstname : e.firstname\r\n        })\r\n    }\r\n\r\n    const handleUserDeleteBtn = (e) => {\r\n        console.log(e)\r\n    }\r\n\r\n    console.log(currentUserEditing)\r\n\r\n    return (\r\n        <div id=\"admin-page\" className=\"page-padding extra-large fade\">\r\n            {showModal && <ModalContainer modalType='question' msg='Are you sure you want create his new user?' acceptMethod={handleSubmit} declineMethod={()=> setShowModal(false)} />}\r\n            {showAlert && <ModalContainer modalType='alert' msg={alertMsg} acceptMethod={() => setShowAlert(false)} />}\r\n\r\n            <PageTitle title=\"Admin Page\" subtitle=\"Manage users and app features\" btns={[]}/>\r\n            <div className=\"admin-page-container\">\r\n                \r\n                <TransactionTable \r\n                    data={users} \r\n                    type='admin-users-display' \r\n                    addBtnClick={addUserTableHandler} \r\n                    editUserClick={handleUserEditBtn}\r\n                    deleteUserClick={handleUserDeleteBtn}\r\n                    />\r\n\r\n                <div id='admin-edit-create-user'>\r\n                    {addUserActive ? (\r\n                        <form id=\"create-user\" className=\"input-section fade\" onSubmit={handleSubmitForm}>\r\n                            <div className=\"info-section\">\r\n                                <p className=\"section-title\">\r\n                                    Create a new user\r\n                                </p>\r\n                            </div>\r\n                            <br/><br/>\r\n                                <CustomInput \r\n                                    title=\"First Name\" \r\n                                    placeholder=\"Enter User First Name\"\r\n                                    elName=\"new-user-fname\"\r\n                                    type=\"text\"\r\n                                    value={firstname}\r\n                                    required={true}\r\n                                    onChange={e => setFirstName(e.target.value)}\r\n                                    maxLength={40}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"Last Name\" \r\n                                    placeholder=\"Enter User Last Name\"\r\n                                    elName=\"new-user-lanme\"\r\n                                    type=\"text\"\r\n                                    value={lastname}\r\n                                    required={true}\r\n                                    onChange={e => setLastName(e.target.value)}\r\n                                    maxLength={40}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"E-mail\" \r\n                                    placeholder=\"Enter email address for new user\"\r\n                                    elName=\"new-user-email\"\r\n                                    type=\"email\"\r\n                                    value={newEmail}\r\n                                    required={true}\r\n                                    onChange={e => setNewEmail(e.target.value)}\r\n                                    maxLength={60}/>\r\n                                <CustomInput \r\n                                    title=\"Password\" \r\n                                    placeholder=\"Enter password for new user\"\r\n                                    elName=\"new-user-pass-1\"\r\n                                    type=\"password\"\r\n                                    value={newPassword1}\r\n                                    required={true}\r\n                                    onChange={e => setNewPassword1(e.target.value)}/>\r\n                                <CustomInput \r\n                                    title=\"Re-Type Password\" \r\n                                    placeholder=\"Enter password for new user\"\r\n                                    elName=\"new-user-pass-2\"\r\n                                    type=\"password\"\r\n                                    value={newPassword2}\r\n                                    required={true}\r\n                                    onChange={e => setNewPassword2(e.target.value)}/>\r\n\r\n\r\n                                <CustomInput \r\n                                    title=\"Role\" \r\n                                    elName=\"new-user-role\"\r\n                                    type=\"select\"\r\n                                    options={ROLES}\r\n                                    value={role}\r\n                                    required={true}\r\n                                    onChange={e => setRole(e.target.value)}/>\r\n                                \r\n                                {role === 'rep' && (\r\n                                    <div className='fade' id=\"add-user-state-selector\">\r\n                                    <OptionSelector state={stateSelected} setState={setStatesSelected} dataArr={statesList} title='Please select the states to restrict to' />\r\n                                </div>\r\n                                )}\r\n                                    \r\n                                <br/>\r\n                                <Button typeBtn='Submit' />\r\n                                <br/><br/><br/><br/><br/>\r\n                                {loadingCreateNewUser ? <Loader/> : (\r\n                                    <>\r\n                                        {errorCreateNewUser && <p>Error</p>}\r\n                                        {success && (\r\n                                            <div className=\"message-div\">\r\n                                            <i className=\"fas fa-check-circle\"></i>\r\n                                            <p>New user was created successfully</p> \r\n                                            <button style={{float:'right'}} onClick={handleGoBack}>Go Back</button>                                         \r\n                                        </div>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n\r\n                        </form>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n\r\n                     {/* flex divider */}\r\n                     <div style={{width: '5%'}}></div>\r\n                    {editUserActive ? (\r\n                        <form className=\"input-section fade\" onSubmit={handleSubmitForm}>\r\n                            <div className=\"info-section\">\r\n                                <p className=\"section-title\">\r\n                                    Editing User: {currentUserEditing.firstname + ' ' + currentUserEditing.lastname}\r\n                                </p>\r\n                            </div>\r\n                            <br/><br/>\r\n                                <CustomInput \r\n                                    title=\"First Name\" \r\n                                    placeholder=\"Enter User First Name\"\r\n                                    elName=\"new-user-fname\"\r\n                                    type=\"text\"\r\n                                    value={currentUserEditingForm.firstname}\r\n                                    onChange={e => setCurrentUserEditingForm({currentUserEditingForm,...e.target.value})}\r\n                                    maxLength={40}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"Last Name\" \r\n                                    placeholder=\"Enter User Last Name\"\r\n                                    elName=\"new-user-lanme\"\r\n                                    type=\"text\"\r\n                                    value={lastname}\r\n                                    onChange={e => setLastName(e.target.value)}\r\n                                    maxLength={40}/>\r\n\r\n                                <CustomInput \r\n                                    title=\"E-mail\" \r\n                                    placeholder=\"Enter email address for new user\"\r\n                                    elName=\"new-user-email\"\r\n                                    type=\"email\"\r\n                                    value={newEmail}\r\n                                    onChange={e => setNewEmail(e.target.value)}\r\n                                    maxLength={60}/>\r\n                                <CustomInput \r\n                                    title=\"Password\" \r\n                                    placeholder=\"Enter password for new user\"\r\n                                    elName=\"new-user-pass-1\"\r\n                                    type=\"password\"\r\n                                    value={newPassword1}\r\n                                    required={true}\r\n                                    onChange={e => setNewPassword1(e.target.value)}/>\r\n                                <CustomInput \r\n                                    title=\"Re-Type Password\" \r\n                                    placeholder=\"Enter password for new user\"\r\n                                    elName=\"new-user-pass-2\"\r\n                                    type=\"password\"\r\n                                    value={newPassword2}\r\n                                    required={true}\r\n                                    onChange={e => setNewPassword2(e.target.value)}/>\r\n\r\n\r\n                                <CustomInput \r\n                                    title=\"Role\" \r\n                                    elName=\"new-user-role\"\r\n                                    type=\"select\"\r\n                                    options={ROLES}\r\n                                    value={role}\r\n                                    required={true}\r\n                                    onChange={e => setRole(e.target.value)}/>\r\n                                \r\n                                {role === 'rep' && (\r\n                                    <div className='fade' id=\"add-user-state-selector\">\r\n                                    <OptionSelector state={stateSelected} setState={setStatesSelected} dataArr={statesList} title='Please select the states to restrict to' />\r\n                                </div>\r\n                                )}\r\n                                    \r\n                                <br/>\r\n                                <Button typeBtn='Submit' />\r\n                                <br/><br/><br/><br/><br/>\r\n                                {loadingCreateNewUser ? <Loader/> : (\r\n                                    <>\r\n                                        {errorCreateNewUser && <p>Error</p>}\r\n                                        {success && (\r\n                                            <div className=\"message-div\">\r\n                                            <i className=\"fas fa-check-circle\"></i>\r\n                                            <p>New user was created successfully</p> \r\n                                            <button style={{float:'right'}} onClick={handleGoBack}>Go Back</button>                                         \r\n                                        </div>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n\r\n                        </form>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n\r\n                </div>\r\n                \r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminPage\r\n\r\nconst ROLES = ['admin', 'office', 'rep']\r\n\r\nconst NOSTATEWITHREPMESSAGE = `You have selected role to be a rep, you need to select at least one state to restrict by, if this rep will not have any state restrctions then you should select the office role `\r\n\r\nconst NOPASSWORDMATCH = 'The passwords do not match'\r\nconst SHORTPASS = 'The password should be atleast 6 characters'\r\nconst statesList = [ \r\n    \"AK\",\r\n    \"AL\",\r\n    \"AR\",\r\n    \"AS\",\r\n    \"AZ\",\r\n    \"CA\",\r\n    \"CO\",\r\n    \"CT\",\r\n    \"DC\",\r\n    \"DE\",\r\n    \"FL\",\r\n    \"GA\",\r\n    \"GU\",\r\n    \"HI\",\r\n    \"IA\",\r\n    \"ID\",\r\n    \"IL\",\r\n    \"IN\",\r\n    \"KS\",\r\n    \"KY\",\r\n    \"LA\",\r\n    \"MA\",\r\n    \"MD\",\r\n    \"ME\",\r\n    \"MI\",\r\n    \"MN\",\r\n    \"MO\",\r\n    \"MS\",\r\n    \"MT\",\r\n    \"NC\",\r\n    \"ND\",\r\n    \"NE\",\r\n    \"NH\",\r\n    \"NJ\",\r\n    \"NM\",\r\n    \"NV\",\r\n    \"NY\",\r\n    \"OH\",\r\n    \"OK\",\r\n    \"OR\",\r\n    \"PA\",\r\n    \"PR\",\r\n    \"RI\",\r\n    \"SC\",\r\n    \"SD\",\r\n    \"TN\",\r\n    \"TX\",\r\n    \"UT\",\r\n    \"VA\",\r\n    \"VI\",\r\n    \"VT\",\r\n    \"WA\",\r\n    \"WI\",\r\n    \"WV\",\r\n    \"WY\"]\r\n    \r\n\r\n    function getCurrentUser(auth) {\r\n        return new Promise((resolve, reject) => {\r\n           const unsubscribe = auth.onAuthStateChanged(user => {\r\n              unsubscribe();\r\n              resolve(user);\r\n           }, reject);\r\n        });\r\n      }\r\n    \r\n\r\n","import React from 'react'\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport { Link, useLocation} from 'react-router-dom'\r\nimport Loader from '../components/Loader'\r\n\r\n\r\nconst OrderSubmissionPage = () => {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { loading, success, order} = orderCreate\r\n\r\n    return (\r\n        <div className=\"page-padding large page-animated\">\r\n            {loading ? (<Loader/>) : (\r\n                <>\r\n                {success ? (\r\n                    <div className=\"message-div\">\r\n                        <i className=\"fas fa-check-circle\"></i>\r\n                        <p>Your order for {order.CustomerRef.CompanyName} was submitted successfully</p>\r\n                            <Link to={`/orderview/${order.id}`} className=\"link-button\">Go to Order</Link>\r\n                            {order.CustomerRef.ListID && <Link to={`/customerpage/${order.CustomerRef.ListID}`} className=\"link-button\" >Go to Customer</Link>}\r\n                            \r\n                    </div>\r\n                ) : (\r\n                    <div className=\"message-div\">\r\n                        <i className=\"fas fa-times-circle\"></i>\r\n                        <p> There was a problem submitting the order, try again later</p>\r\n                    </div>\r\n                )}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderSubmissionPage\r\n","import React from 'react'\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport { Link, useLocation} from 'react-router-dom'\r\nimport Loader from '../components/Loader'\r\n\r\n\r\nconst NoteSubmissionPage = () => {\r\n\r\n    const noteCreate = useSelector(state => state.noteCreate)\r\n    const { loading, success, note} = noteCreate\r\n\r\n    return (\r\n        <div className=\"page-padding large fade\">\r\n            {loading ? (<Loader/>) : (\r\n                <>\r\n                {success ? (\r\n                    <div className=\"message-div\">\r\n                        <i className=\"fas fa-check-circle\"></i>\r\n                        {note.CustomerRef ? (\r\n                            <>\r\n                            <p>Your note for {note.CustomerRef.CompanyName} was submitted successfully</p>\r\n                            <Link to={`/noteview/${note.id}`} className=\"link-button\">Go to note</Link>\r\n                            <Link to={`/customerpage/${note.CustomerRef.ListID}`} className=\"link-button\" >Go to Customer</Link>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                            <p>Your personal note was submitted successfully</p>\r\n                            <Link to={`/noteview/${note.id}`} className=\"link-button\">Go to Note</Link>\r\n                            </>\r\n                        )}\r\n\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"message-div\">\r\n                        <i className=\"fas fa-times-circle\"></i>\r\n                        <p> There was a problem submitting the note, try again later</p>\r\n                    </div>\r\n                )}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteSubmissionPage\r\n","import React, { useState , useEffect} from 'react'\r\nimport PageTitle from '../components/PageTitle'\r\nimport CustomInput from '../components/CustomInput'\r\nimport Button from '../components/Button'\r\nimport AutoCompleteSection from '../components/AutoCompleteSection'\r\nimport RadioSelector from '../components/RadioSelector'\r\nimport ModalContainer  from '../components/ModalContainer'\r\nimport Loader from '../components/Loader'\r\n\r\nimport OrderItem from '../components/OrderItem'\r\n\r\nimport { useDispatch, useSelector} from 'react-redux'\r\n\r\nimport { dateSelectors, standardDateFormat } from '../utils/DateMethods'\r\n\r\nimport FeedCSVExporter from '../utils/FeedCSVExporter'\r\n\r\nimport {getOrders} from '../actions/orderActions'\r\n\r\nconst OrderFeedPage = ({ history }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {userInfo} = useSelector( state => state.userLogin)\r\n    const environmentVariables = useSelector(state => state.environmentVariables)\r\n    const { loading, orders, error, disableShowMore } = useSelector(state => state.ordersFeed)\r\n    const { lists } = environmentVariables\r\n\r\n    // Component Level States\r\n    const [typeOfDate, setTypeOfDate] = useState(Object.keys(dateSelectors)[0])\r\n    const [datesToShow, setDatesToShow] = useState(dateSelectors['Today'])\r\n\r\n\r\n    // checking if there are states saved from sessionstorage\r\n    useEffect(() => {\r\n        const data = sessionStorage.getItem(\"orderFeedDates\")\r\n        if(data){\r\n            setTypeOfDate(JSON.parse(data).typeOfDate)\r\n            setDatesToShow({\r\n                from : new Date(JSON.parse(data).datesToShow.from),\r\n                to : new Date(JSON.parse(data).datesToShow.to)\r\n            })\r\n        }\r\n\r\n        // if orders is empty \r\n        if(orders && orders.length < 1){\r\n            // if there is data from the session storage then dispatch notes and use those dates\r\n                if(data){\r\n                dispatch(getOrders(dateSelectors[JSON.parse(data).typeOfDate]))\r\n            // there no dates on session storage, use current state of the state element\r\n                } else{\r\n                dispatch(getOrders(dateSelectors[typeOfDate]))\r\n                }\r\n        }\r\n}, [])\r\n\r\n    // Saving the state to session storage\r\n    useEffect(() => {\r\n        sessionStorage.setItem(\"orderFeedDates\", JSON.stringify({\r\n            typeOfDate : typeOfDate,\r\n            datesToShow: datesToShow,\r\n        }))\r\n    })\r\n\r\n    // execute on the switch data type \r\n    const switchDateHandler = (val) => {\r\n        setTypeOfDate(val)\r\n        setDatesToShow(dateSelectors[val])\r\n        dispatch(getOrders(dateSelectors[val]))\r\n    }\r\n\r\n    \r\n    const handleExportCsvClick = () => {\r\n        const exporter = new FeedCSVExporter(orders, csvHeaders ,'ordersfeed');\r\n        const csvOutput = exporter.convertToCSV();\r\n        const csvBlob = new Blob([csvOutput], { type: \"text/csv\" });\r\n        const blobUrl = URL.createObjectURL(csvBlob);\r\n        const anchorElement = document.createElement(\"a\");\r\n\r\n        anchorElement.href = blobUrl;\r\n        anchorElement.download = \"order-feed-export.csv\";\r\n        anchorElement.click();\r\n\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(blobUrl);\r\n        }, 500);\r\n    }\r\n\r\n    const handleLoadMore = () => {\r\n        dispatch(getOrders(datesToShow, {},  orders[orders.length - 1].TimeStamp))\r\n    }\r\n\r\n\r\n    return (\r\n        <div id='feed-order-page' className=\"page-padding large fade\">\r\n            <PageTitle title=\"Orders Feed\" subtitle=\"Showing the latest Orders\"/>\r\n            <div className=\"input-section\">\r\n            <CustomInput \r\n                        title=\"Date Range\" \r\n                        placeholder=\"\"\r\n                        elName=\"note-feed-date-selector\"\r\n                        type=\"select\"\r\n                        options={Object.keys(dateSelectors)}\r\n                        value={typeOfDate}\r\n                        onChange={e => switchDateHandler(e.target.value)}/>\r\n            \r\n            <p className=\"feed-result-text\">\r\n                {standardDateFormat(datesToShow.from)} - {standardDateFormat(datesToShow.to)}\r\n            </p>\r\n            </div>\r\n            <div className=\"feed order-feed\">\r\n                {loading && !error ? (<Loader/>) : (\r\n                    <>\r\n                    {error ? (<p className=\"feed-result-text\"> <i className=\"fas fa-exclamation-circle\"></i> Error: please try again later </p>) : (\r\n                        orders && orders.length > 0 ? (\r\n                            <>\r\n                            <div className=\"feed-result-title flex\">\r\n                                <p className=\"feed-result-text\">Found {orders.length} orders</p>\r\n                                <button onClick={handleExportCsvClick}> Export as CSV  <i className=\"fas fa-file-csv\"></i> </button>\r\n                            </div>\r\n                            <br/>\r\n                            {orders\r\n                            .sort((a,b) => b.TimeStamp.toDate() - a.TimeStamp.toDate())\r\n                            .map(order => <OrderItem order={order} key={order.id} />)}\r\n    \r\n                            <br/>\r\n                            <div className=\"info-sectoion flex\">\r\n                            {disableShowMore ? (\r\n                                        <button className={disableShowMore ? 'disabled' : ''} style={{margin: 'auto'}} onClick={handleLoadMore}>\r\n                                        No more orders\r\n                                    </button>\r\n                                    ) : (\r\n                                        <button style={{margin: 'auto'}} onClick={handleLoadMore}>\r\n                                        Load more\r\n                                    </button>\r\n                                    )}\r\n                            </div>\r\n                            </>\r\n                        ) : (\r\n                            <p className=\"feed-result-text\"> <i className=\"fas fa-exclamation-circle\"></i> No orders were found for this time-period</p>\r\n                        )\r\n                    )}\r\n                    </>\r\n                )} \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst csvHeaders = [\r\n    'Order Id',\r\n    'Customer',\r\n    'Author',\r\n    'Date',\r\n    'PriceLevel',\r\n    'Terms',\r\n    'Facings',\r\n    'Qty',\r\n    'Amount',\r\n    'New Customer?',\r\n    'Order Instructions',\r\n    'Order Form Type',\r\n]\r\n\r\n\r\n\r\nexport default OrderFeedPage\r\n","import React, { useState , useEffect} from 'react'\r\nimport PageTitle from '../components/PageTitle'\r\nimport CustomInput from '../components/CustomInput'\r\nimport Button from '../components/Button'\r\nimport AutoCompleteSection from '../components/AutoCompleteSection'\r\nimport RadioSelector from '../components/RadioSelector'\r\nimport ModalContainer  from '../components/ModalContainer'\r\nimport Loader  from '../components/Loader'\r\n\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport {auth} from '../firebase'\r\n\r\nimport {db, Timestamp} from '../firebase'\r\n\r\nimport {getOrderDetails, setOrderStatus} from '../actions/orderActions'\r\nimport accounting from 'accounting-js'\r\nimport TransactionTable from '../components/TransactionTable'\r\n\r\n\r\nconst OrderViewPage = ({ match }) => {\r\n    const dispatch = useDispatch()\r\n    const orderId = match.params.id\r\n\r\n    // getting state resources \r\n    const { userInfo } = useSelector( state => state.userLogin)\r\n\r\n    const { loading:loadingOrderStatus, success, error } = useSelector( state => state.orderChangeStatus)\r\n    const { loading, order} = useSelector(state => state.orderDetails)\r\n    \r\n    \r\n    // get the order details\r\n    useEffect(()=>{\r\n        dispatch(getOrderDetails(orderId))\r\n    },[orderId])\r\n\r\n    const deleteHandler = () => {\r\n\r\n    }\r\n\r\n    const handleStatusChange = () => {\r\n        // const typesOfOrderStatus = ['OrderSubmitted, OrderInQBooks']\r\n        let val = ''\r\n\r\n        switch(order.OrderStatus){\r\n            case 'OrderSubmitted':\r\n                val = 'OrderInQBooks'\r\n            break;\r\n            case 'OrderInQBooks':\r\n                val = 'OrderSubmitted'\r\n            break;\r\n            default:\r\n                val = 'OrderInQBooks'\r\n            break;\r\n        }\r\n        // if rep is not office, then give warning \r\n        dispatch(setOrderStatus(val, orderId))\r\n\r\n    }\r\n    const { CustomerRef, AuthorRef, TimeStamp ,id , OrderInstructions, OrderTotals, Products, NewCustomerRef, PriceLevel, Terms} = order;\r\n\r\n    return (\r\n        <div id='view-order-page' className=\"page-padding large page-animated fade\">\r\n            <PageTitle title=\"Order Page\" subtitle=\"Showing order\" btns={['Delete']} btnFunc={deleteHandler}/>\r\n            <br/><br/>\r\n            {loading ? (<Loader/>) : Object.keys(order).length > 0 ? (\r\n                <>\r\n                <div className=\"info-section\">\r\n                    <div className=\"flex\">\r\n                    {order.NewCustomer ? <p className=\"section-title\">New Customer <span style={{color: 'red'}}>*</span></p> : <div>&nbsp;</div>}\r\n                 <p className=\"section-title\">App-Order #{ order.id} </p>\r\n                    </div>\r\n                 <div className=\"section-content\">\r\n                    <div className=\"info-key-value with-logo\">\r\n                        <i className=\"fas fa-store\"></i>\r\n                        <div>\r\n                                <p>Account Name</p>\r\n                                <p>{CustomerRef.CompanyName ? CustomerRef.CompanyName : order.NewCustomerRef?.ContactInfo?.CompanyName}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"info-key-value\">\r\n                        <div>\r\n                                <p>Account #</p>\r\n                                <p>{CustomerRef && CustomerRef.AccountNumber ? CustomerRef.AccountNumber : 'no-number'}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"info-key-value with-logo\">\r\n                        <i className=\"fas fa-user-edit\"></i>\r\n                        <div>\r\n                                <p>Submitted by</p>\r\n                                <p>{AuthorRef.displayName ? AuthorRef.displayName : 'Anonymous'}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"info-key-value\">\r\n                        <div>\r\n                                <p>Submitted on</p>\r\n                                <p>{formatDateTime(TimeStamp.toDate())}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"info-key-value with-logo\">\r\n                        <i className=\"fas fa-clipboard-list\"></i>\r\n                        <div>\r\n                                <p>Order Instructions</p>\r\n                                <p>{OrderInstructions}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"info-key-value\">\r\n                        <div >\r\n                                <p>REP</p>\r\n                                <p>{order.RepCode ? order.RepCode : '-'}</p>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                 </div>\r\n                </div>\r\n                <br/><br/>\r\n\r\n                <div className=\"info-section\" id=\"order-form-totals\">\r\n                            <p className=\"section-title\">Order Summary</p>\r\n                            <div className=\"section-content\">\r\n                                <div className=\"info-key-value \">\r\n                                    <div>\r\n                                            <p>Total Amount</p>\r\n                                            <p>{accounting.formatMoney(OrderTotals.amount)}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"info-key-value \">\r\n                                    <div>\r\n                                            <p>Qty</p>\r\n                                            <p>{OrderTotals.qty}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"info-key-value \">\r\n                                    <div>\r\n                                            <p>Facings</p>\r\n                                            <p>{OrderTotals.facings}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                </div>\r\n\r\n                <br/><br/>\r\n\r\n                <TransactionTable type=\"app-order-producs\" data={Object.keys(Products).map(o => Products[o])} />\r\n                <br/>\r\n                <br/>\r\n\r\n                {/* Information for new customer  */}\r\n                {order.NewCustomer && \r\n                    <>\r\n                    <div className=\"info-section\">\r\n                    <p className=\"section-title\">New Account/Customer Information</p>\r\n                    <div className=\"section-content flex\">\r\n                            <div className=\"info-key-value \">\r\n                                <div>\r\n                                        <p>Company Name</p>\r\n                                        <p>{NewCustomerRef.ContactInfo?.CompanyName}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"info-key-value \">\r\n                                <div>\r\n                                        <p>Contact Name</p>\r\n                                        <p>{NewCustomerRef.ContactInfo?.FirstName} {NewCustomerRef.ContactInfo?.LastName}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"info-key-value \">\r\n                                <div>\r\n                                        <p>Contact Information</p>\r\n                                        <p>\r\n                                        {NewCustomerRef.ContactInfo?.Phone ? <>Phone: {NewCustomerRef.ContactInfo?.Phone} <br/> </> : <>-<br/></>}\r\n                                        {NewCustomerRef.ContactInfo?.Email ? <>Email: {NewCustomerRef.ContactInfo?.Email} <br/> </> : <>-<br/></>}\r\n                                        </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"info-key-value \">\r\n                                <div>\r\n                                        <p>Shipping Address</p>\r\n                                        <p>\r\n                                        {NewCustomerRef.ShipAddress?.Addr2}<br/>\r\n                                        {NewCustomerRef.ShipAddress?.City}, {NewCustomerRef.ShipAddress?.State} {NewCustomerRef.ShipAddress?.PostalCode}\r\n                                        </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"info-key-value \">\r\n                                <div>\r\n                                        <p>Pricing and Terms </p>\r\n                                        <p>Special Pricing: {PriceLevel} <br/> Terms: {Terms}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <br/>\r\n                    </>\r\n                }            \r\n\r\n                \r\n                {/* Order status */}\r\n                {error ? (\r\n                    <>\r\n                        <p><i className=\"fas fa-exclamation-circle\"></i> There has been an error</p>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                    { allowedStatusEditUsers.includes(userInfo?.uid) ? (\r\n                        <div className=\"info-section\">\r\n                        <p className=\"section-title\">\r\n                            Status\r\n                        </p>\r\n                        <br/>\r\n                            {order.OrderStatus === 'OrderInQBooks' ? (\r\n                                <p><i className=\"fas fa-check-circle\"></i> Order in Quickbooks</p>\r\n                            ) : (\r\n                                <p><i className=\"fas fa-times-circle\"></i> Order Submitted on the app</p>\r\n                            )}\r\n                            <button onClick={handleStatusChange}>Change status</button>\r\n                            {/* <RadioSelector \r\n                                name=\"orderViewStatus\"\r\n                                selectedValue={order?.OrderStatus}\r\n                                options={\r\n                                    [{title: 'Order Submitted To App', value: 'OrderSubmitted'},\r\n                                    {title: 'Order in QBooks', value : 'OrderInQBooks'}]\r\n                                } \r\n                                handleChange={e => handleStatusChange(e)}\r\n                            /> */}\r\n                        </div>\r\n                    ) : (\r\n                        <>\r\n                        </>\r\n                    )}\r\n                    </>\r\n                ) }\r\n                \r\n                </>\r\n            ) : (<p>There seems to be an isse, try again later</p>)}\r\n\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nconst formatDateTime = (date) => {\r\n    let dateString =  `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n    let timeString = date.toLocaleTimeString('en-US', { hour: 'numeric', hour12: true, minute: 'numeric' })\r\n    return dateString + ' ' +  timeString\r\n}\r\n\r\n\r\nfunction getCurrentUser(auth) {\r\n    return new Promise((resolve, reject) => {\r\n       const unsubscribe = auth.onAuthStateChanged(user => {\r\n          unsubscribe();\r\n          resolve(user);\r\n       }, reject);\r\n    });\r\n  }\r\n\r\nexport default OrderViewPage\r\n\r\n\r\n// Users Only Allowed to edit the status of order\r\nconst allowedStatusEditUsers = [\r\n    'pvVYZPa2v4U9yFt35Gz7nGBFWBE2',\r\n     'O3i2Ifm4wRNPl6M2LHkawfi8ZVY2',\r\n     'qc70o2sDswTwU3ot21V1FGrXQ5o1',\r\n     'VlYEyzPRQFgPDK33uGNZUVaKvYT2',\r\n     'BI3FqdZMRQMDW7kCJbFVYmkyjPT2'\r\n]\r\n\r\n\r\n","import { formatMoney } from 'accounting-js'\r\nimport React from 'react'\r\n\r\nconst InvoicePDF = ({invoice}) => {\r\n\r\n    const MAX_ITEMS_PER_PAGE = 8\r\n    let itemsLength = 0\r\n    let pagesNeeded = 0\r\n    let itemToPrint = 0\r\n\r\n    if(invoice.InvoiceLineRet && invoice.InvoiceLineRet.length) {\r\n        itemsLength = invoice.InvoiceLineRet.length\r\n        pagesNeeded = Math.ceil(itemsLength / MAX_ITEMS_PER_PAGE)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"qb-template-container fade\" key={`pdf-${getRandom()}`}>\r\n        {[...Array(pagesNeeded)].map( (e, page) => {\r\n            return (\r\n            <div className=\"qb-template-pdf\" key={`page-${page + 1}-${getRandom()}`}>\r\n            <div className=\"main-header\">\r\n            <div className=\"company-title\">\r\n                <h4>Plasencia 1865, LLC</h4>\r\n                <p>5100 NW 72nd Ave <br />\r\n                Bay A-1 <br />\r\n                Miami, FL 33166\r\n                </p>\r\n            </div>\r\n            <div className=\"invoice-header\">\r\n                <h2>Invoice</h2>\r\n                <table cellSpacing={0}>\r\n                <tbody>\r\n                    <tr>\r\n                    <th>Date</th>\r\n                    <th>Invoice #</th>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>{invoice.TxnDate && formatDate(invoice.TxnDate)}</td>\r\n                    <td>{invoice.RefNumber && invoice.RefNumber}</td>\r\n                    </tr>\r\n                </tbody></table>\r\n            </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"billtoshipto\">\r\n            <div className=\"bill-to\">\r\n                <div className=\"header\">\r\n                <p>Bill To</p>\r\n                </div>\r\n                <div className=\"text-content\">\r\n                <p>{invoice.BillAddress && invoice.BillAddress.Addr1 && invoice.BillAddress.Addr1}<br />\r\n                    {invoice.BillAddress && invoice.BillAddress.Addr2 && invoice.BillAddress.Addr2}<br />\r\n                    {invoice.BillAddress && invoice.BillAddress.City && invoice.BillAddress.City},\r\n                    {invoice.BillAddress && invoice.BillAddress.State && invoice.BillAddress.State} \r\n                    {invoice.BillAddress && invoice.BillAddress.PostalCode && invoice.BillAddress.PostalCode}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div className=\"ship-to\">\r\n                <div className=\"header\">\r\n                <p>Ship To</p>\r\n                </div>\r\n                <div className=\"text-content\">\r\n                    <p>{invoice.ShipAddress && invoice.ShipAddress.Addr1 && invoice.ShipAddress.Addr1}<br />\r\n                    {invoice.ShipAddress && invoice.ShipAddress.Addr2 && invoice.ShipAddress.Addr2}<br />\r\n                    {invoice.ShipAddress && invoice.ShipAddress.City && invoice.ShipAddress.City},\r\n                    {invoice.ShipAddress && invoice.ShipAddress.State && invoice.ShipAddress.State} \r\n                    {invoice.ShipAddress && invoice.ShipAddress.PostalCode && invoice.ShipAddress.PostalCode}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <br />\r\n            <table className=\"mini-table\" cellSpacing={0}>\r\n            <tbody><tr>\r\n                <td>S.O. No.</td>\r\n                <td>P.O. No.</td>\r\n                <td>Terms</td>\r\n                <td>Due Date</td>\r\n                <td>Rep</td>\r\n                <td>FOB</td>\r\n                </tr>\r\n                <tr>\r\n                <td></td>\r\n                <td>{invoice.PONumber}</td>\r\n                <td>{invoice.TermsRef ? invoice.TermsRef.FullName : ''}</td>\r\n                <td>{invoice.DueDate ? formatDate(invoice.DueDate) : ''}</td>\r\n                <td>{invoice.SalesRepRef ? invoice.SalesRepRef.FullName : ''}</td>\r\n                <td></td>\r\n                </tr>\r\n            </tbody></table>\r\n            <br />\r\n            <table className=\"big-table\" cellSpacing={0}>\r\n            <thead>\r\n                <tr>\r\n                <td>Item</td>\r\n                <td>Description</td>\r\n                <td>MSRP</td>\r\n                <td>Qty</td>\r\n                <td>Backordered</td>\r\n                <td>Rate</td>\r\n                <td>Amount</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {invoice.InvoiceLineRet ? [...Array(MAX_ITEMS_PER_PAGE)].map(( j, item) => {\r\n                    itemToPrint = itemToPrint + 1\r\n                    const arr = invoice.InvoiceLineRet\r\n\r\n                    return(\r\n                        <>\r\n                        { itemToPrint <= arr.length  ? (\r\n                            <tr key={`item-line-${arr[itemToPrint - 1].ItemRef ? arr[itemToPrint - 1].ItemRef.ListID : ''}`}>\r\n                                <td>{arr[itemToPrint - 1].ItemRef && arr[itemToPrint - 1].ItemRef.FullName}</td>\r\n                                <td>{arr[itemToPrint - 1].Desc && arr[itemToPrint - 1].Desc}</td>\r\n                                <td>{''}</td>\r\n                                <td>{arr[itemToPrint - 1].Quantity && arr[itemToPrint - 1].Quantity}</td>\r\n                                <td>{''}</td>\r\n                                <td>{arr[itemToPrint - 1].Rate && arr[itemToPrint - 1].Rate}</td>\r\n                                <td>{arr[itemToPrint - 1].Amount && arr[itemToPrint - 1].Amount}</td>\r\n                            </tr>\r\n                        ) : (<tr key={`item-line-blank-${itemToPrint - 1}-${getRandom()}`}>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                            </tr>)\r\n                        }\r\n                        </>\r\n                    )\r\n                }): <></>}\r\n                \r\n            </tbody>\r\n            </table>\r\n            <div className=\"big-table-footer\"> \r\n            <div className=\"footer-subtotal\" />\r\n            <div className=\"footer-subtotal\"><h2>Subtotal</h2><p>{invoice.Subtotal && formatMoney(invoice.Subtotal)}</p></div>\r\n            <div className=\"footer-subtotal\"><h2>Total</h2><p>{invoice.Subtotal && formatMoney(invoice.Subtotal)}</p></div>\r\n            <div className=\"footer-subtotal\"><h2>Payments/Credits</h2><p>{formatMoney( (invoice.Subtotal * 1 )- (invoice.BalanceRemaining * 1))}</p></div>\r\n            <div className=\"footer-subtotal\"><h2>Balance Due</h2><p>{formatMoney(invoice.BalanceRemaining)}</p></div>\r\n            </div>\r\n            <br />\r\n            <div className=\"main-footer\">\r\n            <table cellSpacing={0}>\r\n                <tbody><tr>\r\n                    <th>Phone #</th>\r\n                    <th>E-mail</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>786-600-3228</td>\r\n                    <td>Hank@plasencia1865.com</td>\r\n                </tr>\r\n                </tbody></table>\r\n            </div>\r\n            <br />\r\n            <div className=\"page-number\">Page {page + 1}</div>\r\n      </div>\r\n            )\r\n        })}\r\n      </div>\r\n)\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default InvoicePDF\r\n\r\n\r\nconst formatDate = (date) => {\r\n    let newDate = new Date(date).toISOString().split(\"T\")[0].split(\"-\")\r\n    return `${newDate[1]}/${newDate[2]}/${newDate[0]}`\r\n}\r\n\r\n\r\nconst getRandom = () =>{\r\n    return Math.floor(1000 + Math.random() * 9000);\r\n}","import React, {useEffect, useRef, useState} from 'react'\r\n\r\nimport InvoicePDF from '../components/InvoicePDF'\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport { Link, useHistory } from 'react-router-dom'\r\n\r\nimport PageTitle from '../components/PageTitle'\r\nimport { jsPDF } from \"jspdf\";\r\n\r\nconst InvoicePage = ({match}) => {\r\n\r\n    const history = useHistory()\r\n\r\n    const invNum = match.params.id\r\n    \r\n    const customerInvoices = useSelector(state => state.customerInvoices)\r\n    const { loading: customerInvoicesLoading, customerInvoices: customerInvoiceList } = customerInvoices;\r\n\r\n    const listInvoices = useSelector(state => state.invoiceList)\r\n    const { loading: allInvoicesLoading, invoiceList: allInvoicesList } = listInvoices;\r\n\r\n    const [invoice, setInvoice] = useState({})\r\n\r\n    const doc = new jsPDF('portrait','px', [825,1065], false, true, 5, 1)\r\n\r\n    const x = useRef(null)\r\n\r\n    // Use effect to check if the invoice request came from the custoemr page \r\n    useEffect(() => {\r\n        // Look for the invoices in the diff lists \r\n        const foundInvFromCustomerList = customerInvoiceList.find(inv => inv.RefNumber === invNum)\r\n        const foundInvFromAllList = allInvoicesList.find(inv => inv.RefNumber === invNum)\r\n        if(foundInvFromCustomerList)setInvoice(foundInvFromCustomerList)\r\n        if(foundInvFromAllList)setInvoice(foundInvFromAllList)\r\n    }, [])\r\n\r\n     \r\n    const clickHandler = () => {\r\n        const invoicesArrHTML = x.current.innerHTML\r\n\r\n        doc.html(invoicesArrHTML, {\r\n            x: 0,\r\n            y: 0\r\n        })\r\n\r\n        setTimeout(  ()=>{\r\n            doc.save(`Inv_${invNum}_from_Plasencia_1865_LLC.pdf`)\r\n        }, 1000)    \r\n    }\r\n\r\n    const handleGoToCustomerClick = () => {\r\n        history.push(`/customerpage/${invoice.CustomerRef.ListID}`)\r\n    }\r\n\r\n    return (\r\n        <div style={{padding: '1rem'}}className=\"page-padding extra-large fade\">\r\n            <PageTitle title='Invoice Page' subtitle={`Showing Invoice # ${invoice.RefNumber}`} btns={[]}></PageTitle>\r\n            <br/><br/>\r\n            <div className=\"flex\" style={{justifyContent : 'space-around'}}>\r\n                <button onClick={clickHandler}>Download Invoice</button>\r\n                <button onClick={handleGoToCustomerClick}>Go to Customer</button>\r\n            </div>\r\n            <br/><br/>\r\n            <div id=\"invoice-preview-container\" ref={x}>\r\n                <InvoicePDF invoice={invoice} />\r\n            </div>\r\n            <br/><br/><br/><br/><br/><br/><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InvoicePage\r\n","import { formatMoney } from 'accounting-js'\r\nimport React from 'react'\r\n\r\nconst SalesOrderPDF = ({salesorder}) => {\r\n\r\n    if(!Array.isArray(salesorder.SalesOrderLineRet)){\r\n        salesorder.SalesOrderLineRet = [salesorder.SalesOrderLineRet]\r\n    }\r\n\r\n\r\n    const MAX_ITEMS_PER_PAGE = 8\r\n    let itemsLength = 0\r\n    let pagesNeeded = 0\r\n    let itemToPrint = 0\r\n\r\n    if(salesorder.SalesOrderLineRet && salesorder.SalesOrderLineRet.length) {\r\n        itemsLength = salesorder.SalesOrderLineRet.length\r\n        pagesNeeded = Math.ceil(itemsLength / MAX_ITEMS_PER_PAGE)\r\n    }\r\n\r\n    console.log(salesorder)\r\n\r\n\r\n    return (\r\n        <div className=\"qb-template-container fade\" key={`pdf-${getRandom()}`}>\r\n        {[...Array(pagesNeeded)].map( (e, page) => {\r\n            return (\r\n            <div className=\"qb-template-pdf\" key={`page-${page + 1}-${getRandom()}`}>\r\n            <div className=\"main-header\">\r\n            <div className=\"company-title\">\r\n                <h4>Plasencia 1865, LLC</h4>\r\n                <p>5100 NW 72nd Ave <br />\r\n                Bay A-1 <br />\r\n                Miami, FL 33166\r\n                </p>\r\n            </div>\r\n            <div className=\"invoice-header\">\r\n                <h2>Sales Order</h2>\r\n                <table cellSpacing={0}>\r\n                <tbody>\r\n                    <tr>\r\n                    <th>Date</th>\r\n                    <th>Sales Order #</th>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>{salesorder.TxnDate && formatDate(salesorder.TxnDate)}</td>\r\n                    <td>{salesorder.RefNumber && salesorder.RefNumber}</td>\r\n                    </tr>\r\n                </tbody></table>\r\n            </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"billtoshipto\">\r\n            <div className=\"bill-to\">\r\n                <div className=\"header\">\r\n                <p>Bill To</p>\r\n                </div>\r\n                <div className=\"text-content\">\r\n                <p>{salesorder.BillAddress?.Addr1}<br />\r\n                    {salesorder.BillAddress?.Addr2}<br />\r\n                    {salesorder.BillAddress?.City},\r\n                    {salesorder.BillAddress?.State} \r\n                    {salesorder.BillAddress?.PostalCode}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div className=\"ship-to\">\r\n                <div className=\"header\">\r\n                <p>Ship To</p>\r\n                </div>\r\n                <div className=\"text-content\">\r\n                    <p>{salesorder.ShipAddress?.Addr1}<br />\r\n                    { salesorder.ShipAddress?.Addr2}<br />\r\n                    { salesorder.ShipAddress?.City},\r\n                    { salesorder.ShipAddress?.State} \r\n                    { salesorder.ShipAddress?.PostalCode}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <br />\r\n            <table className=\"mini-table\" cellSpacing={0}>\r\n            <tbody><tr>\r\n                <td>P.O. No.</td>\r\n                <td>Terms</td>\r\n                <td>Rep</td>\r\n                <td>FOB</td>\r\n                </tr>\r\n                <tr>\r\n                <td>{salesorder.PONumber}</td>\r\n                <td>{salesorder.TermsRef?.FullName}</td>\r\n                <td>{salesorder.SalesRepRef?.FullName}</td>\r\n                <td>{salesorder.FOB}</td>\r\n                </tr>\r\n            </tbody></table>\r\n            <br />\r\n            <table className=\"big-table\" cellSpacing={0}>\r\n            <thead>\r\n                <tr>\r\n                <td>Item</td>\r\n                <td>Description</td>\r\n                <td>Ordered</td>\r\n                <td>Pending</td>\r\n                <td>Rate</td>\r\n                <td>Amount</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {salesorder.SalesOrderLineRet ? [...Array(MAX_ITEMS_PER_PAGE)].map(( j, item) => {\r\n                    itemToPrint = itemToPrint + 1\r\n                    const arr = salesorder.SalesOrderLineRet\r\n\r\n                    return(\r\n                        <>\r\n                        { itemToPrint <= arr.length && arr[itemToPrint - 1]  ? (\r\n                            <tr key={`item-line-${itemToPrint - 1}-${getRandom()}`}>\r\n                                <td>{arr[itemToPrint - 1].ItemRef && arr[itemToPrint - 1].ItemRef.FullName}</td>\r\n                                <td>{arr[itemToPrint - 1].Desc && arr[itemToPrint - 1].Desc}</td>\r\n                                <td>{arr[itemToPrint - 1].Quantity && arr[itemToPrint - 1].Quantity}</td>\r\n                                <td>{arr[itemToPrint - 1].Invoiced &&  arr[itemToPrint - 1].Quantity - arr[itemToPrint - 1].Invoiced}</td>\r\n                                <td>{arr[itemToPrint - 1].Rate && arr[itemToPrint - 1].Rate}</td>\r\n                                <td>{arr[itemToPrint - 1].Quantity && formatMoney( arr[itemToPrint - 1].Quantity * ( arr[itemToPrint - 1].Rate ? arr[itemToPrint - 1].Rate : 0))}</td>\r\n                            </tr>\r\n                        ) : (<tr key={`item-line-blank-${itemToPrint - 1}-${getRandom()}`}>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                            </tr>)\r\n                        }\r\n                        </>\r\n                    )\r\n                }): <></>}\r\n                \r\n            </tbody>\r\n            </table>\r\n            <div className=\"big-table-footer\"> \r\n            <div className=\"footer-subtotal\" />\r\n            <div className=\"footer-subtotal\"><h2>Subtotal</h2><p>{salesorder.Subtotal && formatMoney(salesorder.Subtotal)}</p></div>\r\n            <div className=\"footer-subtotal\"><h2>Total</h2><p>{salesorder.Subtotal && formatMoney(salesorder.Subtotal)}</p></div>\r\n\r\n            </div>\r\n            <br />\r\n            <div className=\"main-footer\">\r\n            <table cellSpacing={0}>\r\n                <tbody><tr>\r\n                    <th>Phone #</th>\r\n                    <th>E-mail</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>786-600-3228</td>\r\n                    <td>Hank@plasencia1865.com</td>\r\n                </tr>\r\n                </tbody></table>\r\n            </div>\r\n            <br />\r\n            <div className=\"page-number\">Page {page + 1}</div>\r\n      </div>\r\n            )\r\n        })}\r\n      </div>\r\n)\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default SalesOrderPDF\r\n\r\n\r\nconst formatDate = (date) => {\r\n    let newDate = new Date(date).toISOString().split(\"T\")[0].split(\"-\")\r\n    return `${newDate[1]}/${newDate[2]}/${newDate[0]}`\r\n}\r\n\r\n\r\nconst getRandom = () =>{\r\n    return Math.floor(1000 + Math.random() * 9000);\r\n}","import React, {useEffect, useRef, useState} from 'react'\r\n\r\nimport InvoicePDF from '../components/InvoicePDF'\r\nimport { useDispatch, useSelector} from 'react-redux'\r\n\r\nimport PageTitle from '../components/PageTitle'\r\nimport { jsPDF } from \"jspdf\";\r\nimport SalesOrderPDF from '../components/SalesOrderPDF';\r\n\r\nconst SalesOrderPage = ({match}) => {\r\n\r\n    const soNum = match.params.id\r\n    \r\n    const customerSalesOrders = useSelector(state => state.customerSalesOrders)\r\n    const { loading: customerSalesOrdersLoading, customerSalesOrders: customerSalesOrdersList } = customerSalesOrders;\r\n\r\n    const [salesOrder, setSalesOrder] = useState({})\r\n\r\n    const doc = new jsPDF('portrait','px', [825,1065], false, true, 5, 1)\r\n\r\n    const x = useRef(null)\r\n\r\n    // Use effect to check if the invoice request came from the custoemr page \r\n    useEffect(() => {\r\n       if(!customerSalesOrdersLoading ) {\r\n           const foundSoFromCustomerList = customerSalesOrdersList.find(so => so.RefNumber === soNum)\r\n           if(foundSoFromCustomerList){\r\n               \r\n                setSalesOrder(foundSoFromCustomerList)\r\n           } else{\r\n               // disaptch to get an invocie from the databse here \r\n           }\r\n       }\r\n    }, [])\r\n\r\n     \r\n    const clickHandler = () => {\r\n        const salesOrderHTML = x.current.innerHTML\r\n\r\n        doc.html(salesOrderHTML, {\r\n            x: 0,\r\n            y: 0\r\n        })\r\n\r\n        setTimeout(  ()=>{\r\n            doc.save(`SalesOrder_${soNum}_from_Plasencia_1865_LLC.pdf`)\r\n        }, 1000)    \r\n    }\r\n\r\n    return (\r\n        <div style={{padding: 0}}className=\"page-padding extra-large fade\">\r\n            <PageTitle title='Sales Order Page' subtitle={`Showing Sales Order # ${salesOrder.RefNumber}`} btns={[]}></PageTitle>\r\n            <br/><br/>\r\n            <button onClick={clickHandler}>Download Sales Order</button>\r\n            <br/><br/>\r\n            <div id=\"invoice-preview-container\" ref={x}>\r\n                <SalesOrderPDF salesorder={salesOrder} />\r\n            </div>\r\n            <br/><br/><br/><br/><br/><br/><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SalesOrderPage\r\n","import React, { useRef,  useState, useEffect } from 'react'\r\nimport { Link, useLocation} from 'react-router-dom'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\n\r\nimport Button from './Button'\r\nimport ModalContainer from './ModalContainer'\r\n\r\nimport { logout } from '../actions/userActions'\r\nimport { clearCustomerDetails, clearCustomerList} from '../actions/customerActions'\r\n\r\nimport {auth} from '../firebase'\r\n\r\nconst SideNav = () => {\r\n    const location = useLocation()\r\n    const dispatch = useDispatch()\r\n    const sideNav = useSelector(state => state.sideNav)\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const closeBtn = useRef(null)\r\n\r\n    const [isAdmin,setIsAdmin] = useState(false)\r\n    const [isOffice,setIsOffice] = useState(false)\r\n\r\n     // wait on the user load\r\n     try {\r\n          getCurrentUser(auth).then(user => {\r\n               if(user){\r\n                    user.getIdTokenResult().then( token => {\r\n                         token?.claims?.admin ? setIsAdmin(true) : setIsAdmin(false)\r\n                         token?.claims?.office ? setIsOffice(true) : setIsOffice(false)\r\n                    })\r\n               }\r\n          })\r\n     } catch (error) {\r\n          console.log(error)\r\n     }\r\n\r\n\r\n\r\n    const handleLogOutClick = () => {\r\n          // logout user\r\n          dispatch(logout())\r\n          // clear customer details state \r\n          dispatch(clearCustomerDetails())\r\n          // clear customerlist\r\n          dispatch(clearCustomerList())\r\n    }\r\n\r\n    const onNavLinkClick = () => {\r\n          closeBtn.current.click()\r\n    }\r\n    \r\n    return (\r\n        <div className={`sidenav ${sideNav ? 'active' : ''}`}>\r\n           <div className=\"sidenav-header\">\r\n               <button type=\"button\" className=\"close-btn\" ref={closeBtn} onClick={() => dispatch({type: \"TOGGLE_SIDENAV\"})}> \r\n                    {userInfo.photoURL ? (\r\n                         <img src={userInfo.photoURL}></img>\r\n                    ) : (\r\n                         <i className=\"fas fa-times\"></i>\r\n                    )}\r\n               </button>\r\n                <i className=\"fas fa-user-circle big-logo\"></i>\r\n                <h3>{userInfo.displayName ? userInfo.displayName : 'User' }</h3>\r\n                <p>{userInfo.email && userInfo.email }</p>\r\n                <br/>\r\n                <p>v2.7</p>\r\n                <button onClick={()=> window.location.reload()} style={{transform: 'scale(0.7)', width: '100%'}}><i className=\"fas fa-redo\"></i> Refresh</button>\r\n           </div>\r\n           <div className=\"sidenav-body-btns\">\r\n               <Link to=\"/\" className={`sidenav-link ${location.pathname === '/home' || location.pathname === '/' && 'active'}`} onClick={onNavLinkClick}>\r\n                    <i className=\"fas fa-home\"></i>\r\n                    <p>Home</p>\r\n                    <i className=\"fas fa-chevron-right\"></i>\r\n               </Link>\r\n               <Link to=\"/notefeed\" className={`sidenav-link ${location.pathname === '/notefeed' && 'active'}` } onClick={onNavLinkClick}>\r\n                    <i className=\"fas fa-clipboard-list\"></i>\r\n                    <p>View Notes</p>\r\n                    <i className=\"fas fa-chevron-right\"></i>\r\n               </Link>\r\n               <Link to=\"/orderfeed\" className={`sidenav-link ${location.pathname === '/orderfeed' && 'active'}` } onClick={onNavLinkClick}>\r\n                    <i className=\"fas fa-grip-vertical\"></i>\r\n                    <p>View Orders</p>\r\n                    <i className=\"fas fa-chevron-right\"></i>\r\n               </Link>\r\n               <Link to=\"/notecreate\" className={`sidenav-link ${location.pathname === '/notecreate' && 'active'}` } onClick={onNavLinkClick}> \r\n                    <i className=\"fas fa-pen\"></i>\r\n                    <p>Add Note</p>\r\n                    <i className=\"fas fa-chevron-right\"></i>\r\n               </Link>\r\n               <Link to=\"/ordercreate\" className={`sidenav-link ${location.pathname === '/ordercreate' && 'active'}`} onClick={onNavLinkClick}>\r\n                    <i className=\"fas fa-file-invoice-dollar\"></i>\r\n                    <p>Add Order</p>\r\n                    <i className=\"fas fa-chevron-right\"></i>\r\n               </Link>\r\n               <Link to=\"/lists\" className={`sidenav-link ${location.pathname === '/lists' && 'active'}` } onClick={onNavLinkClick}>\r\n                    <i className=\"fas fa-list\"></i>\r\n                    <p>Lists</p>\r\n                    <i className=\"fas fa-chevron-right\"></i>\r\n               </Link>\r\n               { (isOffice || isAdmin ) && (\r\n                    <Link to=\"/reportspage\" className={`sidenav-link ${location.pathname === '/reportspage' && 'active'}` } onClick={onNavLinkClick}>\r\n                    <i className=\"fas fa-chart-line\"></i>\r\n                    <p>Reports</p>\r\n                    <i className=\"fas fa-chevron-right\"></i>\r\n               </Link>\r\n               )}\r\n               <Link to=\"/login\" className={`sidenav-link ${location.pathname === '/logout' && 'active'}` } onClick={()=> {handleLogOutClick(); onNavLinkClick()}}>\r\n                    <i className=\"fas fa-sign-out-alt\"></i>\r\n                    <p>Logout</p>\r\n                    <i className=\"fas fa-chevron-right\"></i>\r\n               </Link>\r\n               {isAdmin && (\r\n                    <Link to=\"/admin\" className={`sidenav-link ${location.pathname === '/admin' && 'active'}` } onClick={onNavLinkClick}>\r\n                    <i className=\"fas fa-user-shield\"></i>\r\n                    <p>Admin</p>\r\n                    <i className=\"fas fa-chevron-right\"></i>\r\n               </Link>\r\n               )}\r\n           </div>\r\n           <div className=\"sidenav-footer-btns\">\r\n\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SideNav\r\n\r\n\r\n\r\nfunction getCurrentUser(auth) {\r\n     return new Promise((resolve, reject) => {\r\n        const unsubscribe = auth.onAuthStateChanged(user => {\r\n           unsubscribe();\r\n           resolve(user);\r\n        }, reject);\r\n     });\r\n   }\r\n ","import {\r\n    INVOICES_LIST_REQUEST,\r\n    INVOICES_LIST_SUCCESS,\r\n    INVOICES_LIST_FAIL,\r\n\r\n    INVOICES_LIST_DISABLE_SHOW_MORE,\r\n} from '../constants/invoiceConstants'\r\n\r\nimport {db} from '../firebase'\r\nimport {auth} from '../firebase'\r\n\r\n// Get the invoice list\r\nexport const getInvoiceList = (filterInfo, lastDate) => async (dispatch, getState) => {\r\n\r\n    // get previous notes stattes\r\n    const { invoiceList } = getState()\r\n    const invoiceFromPrevStates = invoiceList.invoiceList\r\n\r\n    // if it comes from showmore do not dispatch to load\r\n    if(!lastDate){\r\n        dispatch({\r\n            type: INVOICES_LIST_REQUEST,\r\n        })\r\n    }\r\n\r\n    // await to recevie the current user before proceeding\r\n    await getCurrentUser(auth)\r\n\r\n    // get the claims from the user\r\n    const {claims} = await auth.currentUser?.getIdTokenResult()\r\n\r\n    // query to be performed\r\n    let query = db.collection('invoices')\r\n\r\n    //if query has state restrictions \r\n    if(claims?.restrictions?.states?.length > 0) {\r\n        query = query.where('ShipAddress.State', 'in', claims.restrictions.states )\r\n    }\r\n\r\n    // add extra-filters\r\n    if(filterInfo){\r\n        Object.keys(filterInfo).forEach(filterField => {\r\n            if(filterInfo[filterField] !== 'Any'){\r\n                switch (filterField) {\r\n                    case 'Invoice #':\r\n                        query = query.where('RefNumber', '==', filterInfo[filterField] )\r\n                        break;\r\n                    case 'Name':\r\n                        query = query.where('CustomerRef.FullName', '==',filterInfo[filterField] )\r\n                        break;\r\n                    case 'State':\r\n                        query = query.where('ShipAddress.State', '==',filterInfo[filterField] )\r\n                        break;\r\n                    case 'Date':\r\n                        /// TODO: Need to convert to the actual \"2018-1-19\" format\r\n                        query = query.where('TxnDate', '==',filterInfo[filterField] )\r\n                        break;\r\n                    case 'Amount':\r\n                        query = query.where('Subtotal', '==',filterInfo[filterField] )\r\n                        break;\r\n                    \r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // add limits\r\n    query = query.limit(30)\r\n\r\n    // add sorting\r\n    query = query.orderBy(\"TxnDate\", \"desc\")\r\n\r\n    // add pagination\r\n    if(lastDate){\r\n        query = query.startAfter(lastDate)\r\n    }\r\n\r\n\r\n    // request the query \r\n    query.get()\r\n        .then(snap => {\r\n            let result = []\r\n            snap.forEach(doc => result.push({...doc.data(), id : doc.id }))\r\n\r\n            //if it is a query to load more, add to current array\r\n            if(lastDate){\r\n                // if result is empty, disable load more \r\n                if(result.length < 1){\r\n                    dispatch({\r\n                        type: INVOICES_LIST_DISABLE_SHOW_MORE,\r\n                        payload: true\r\n                    })\r\n                }\r\n                result = [...result, ...invoiceFromPrevStates ]\r\n\r\n                \r\n            }\r\n\r\n            dispatch({\r\n                type: INVOICES_LIST_SUCCESS,\r\n                payload: result\r\n            })\r\n            \r\n            \r\n\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            dispatch({\r\n                type: INVOICES_LIST_FAIL,\r\n                payload: err\r\n            })   \r\n        })\r\n}\r\n\r\nfunction getCurrentUser(auth) {\r\n    return new Promise((resolve, reject) => {\r\n       const unsubscribe = auth.onAuthStateChanged(user => {\r\n          unsubscribe();\r\n          resolve(user);\r\n       }, reject);\r\n    });\r\n  }\r\n\r\n","import React, { useState , useEffect, useRef} from 'react'\r\nimport PageTitle from '../components/PageTitle'\r\nimport CustomInput from '../components/CustomInput'\r\nimport Loader from '../components/Loader'\r\n\r\nimport { getInvoiceList } from '../actions/invoiceActions'\r\n\r\nimport { useDispatch, useSelector} from 'react-redux'\r\n\r\nimport TransactionTable from '../components/TransactionTable'\r\n\r\n\r\nconst ListPageRenewed = React.memo(({ history }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    // Redux states \r\n    const environmentVariables = useSelector(state => state.environmentVariables)\r\n\r\n    // Customer-List from Redux\r\n    const customerListState = useSelector(state => state.customerList)\r\n    const { loading: loadingCustomerList , customerList} = customerListState\r\n\r\n    // Invoice-List from Redux\r\n    const invoiceListState = useSelector(state => state.invoiceList)\r\n    const { loading: loadingInvoiceList , invoiceList, disableShowMore} = invoiceListState\r\n\r\n    // ui comoponent elevel states \r\n    const [showFilters, setShowFilters] = useState(false)\r\n\r\n    // Filter form list states \r\n    const [typeOfList, setTypeOfList] = useState('Customer-List')\r\n    const [keyword, setKeyword] = useState('')\r\n    const [filterField, setFilterField] = useState('None')\r\n    const [sortField, setSortField] = useState('Name')\r\n    const [filterOptions, setFilterOptions] = useState(customerListFilterOptions)\r\n    const [sortOptions, setSortOptions] = useState(customerListSortOptions)\r\n\r\n    // List Component level state since ucstomer list is filtered, sorted offline\r\n    const [customerListCompState, setCustomerListCompState] = useState(customerList)\r\n    // const [invoiceListCompState, setInvoiceListCompState] = useState(invoiceList)\r\n    // const [salesOrderListCompState, setSalesOrderListCompState] = useState(customerList)\r\n\r\n    const [filterInfo, setFilterInfo] = useState({})\r\n    const [sortInfo, setSortInfo] = useState({})\r\n\r\n    // Once customer list laods, set it to the Component level stae \r\n    useEffect(() => {\r\n        setCustomerListCompState(customerList)\r\n    }, [customerList])\r\n\r\n    // Persist the state of the selected list \r\n    // on load check if there are dates from session storage\r\n    useEffect(() => (sessionStorage.getItem(`listPageStates-TypeOfList`) && setTypeOfList(sessionStorage.getItem(`listPageStates-TypeOfList`))), [])\r\n\r\n    // Save the type of list everytime it changes\r\n    useEffect(() => sessionStorage.setItem(`listPageStates-TypeOfList`, typeOfList) )\r\n\r\n    // Check the type of list selected \r\n    useEffect(()=>{\r\n        switch (typeOfList) {\r\n            case 'Customer-List':\r\n                setFilterOptions(customerListFilterOptions)\r\n                setSortOptions(customerListSortOptions)\r\n                if(filterField === 'Invoice #') setFilterField('None')\r\n                break;\r\n            case 'Invoice-List':\r\n                setFilterOptions(invoiceListFilterOptions)\r\n                setSortOptions(invoiceListSortOptions)\r\n                if(invoiceList?.length < 1) dispatch(getInvoiceList({}))\r\n                break;\r\n            case 'Sales-Order-List':\r\n                // do nothing\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // dispatch to get the invoices,sales orders or custoemr list \r\n    },[typeOfList])\r\n\r\n\r\n    // Check if there are states from session starage for the filters saved when changing the type of list \r\n    useEffect( () => {\r\n        const data = JSON.parse(sessionStorage.getItem(`listPageStates-${typeOfList}`))\r\n        if(data) {\r\n            setFilterField(data[typeOfList].filterField)\r\n            setSortField(data[typeOfList].sortField)\r\n            setKeyword(data[typeOfList].keyword)\r\n            handleApplyFiltersClick(data)\r\n        }\r\n        \r\n    }, [typeOfList])\r\n\r\n    const handleApplyFiltersClick = (datafromStorage) => {\r\n        \r\n        let newFilters = { [filterField] : keyword }\r\n        let newSorts = { [sortField] : sortField }\r\n\r\n        if(datafromStorage && datafromStorage[typeOfList]){\r\n            newFilters = { [datafromStorage[typeOfList]['filterField']] : datafromStorage[typeOfList]['keyword']}\r\n        }\r\n\r\n        switch (typeOfList) {\r\n            case 'Invoice-List':\r\n                setFilterInfo(newFilters)\r\n                setShowFilters(false) //if(invoiceList.length < 1)\r\n                console.log(filterInfo, newFilters)\r\n                if(!datafromStorage[typeOfList]) {\r\n                    dispatch(getInvoiceList({...filterInfo,...newFilters}))\r\n                }\r\n                break;\r\n            case 'Customer-List':\r\n                setShowFilters(false)\r\n                setCustomerListCompState(filterSortCustomerList(datafromStorage))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // Save State to Session Storage \r\n        sessionStorage.setItem(`listPageStates-${typeOfList}`, JSON.stringify({\r\n            [typeOfList] : {\r\n                typeOfList,\r\n                filterField,\r\n                keyword,\r\n                sortField\r\n            }\r\n        }))\r\n\r\n    }\r\n\r\n    // Filter and sorting hapens locally since it was already loaded from before \r\n    const filterSortCustomerList = (dataFromStorage) => {\r\n        const newlist = customerList\r\n\r\n        let newFilterField, newSortField, newKeyword\r\n\r\n\r\n        // differienteitae from mouse click\r\n        if(dataFromStorage && Object.keys(dataFromStorage).length < 2){\r\n            newFilterField = dataFromStorage[typeOfList].filterField\r\n            newSortField = dataFromStorage[typeOfList].sortField\r\n            newKeyword = dataFromStorage[typeOfList].keyword\r\n        } else{\r\n            newFilterField = filterField\r\n            newSortField = sortField\r\n            newKeyword = keyword\r\n        }\r\n\r\n        let modifiedlist = []\r\n\r\n        // Apply Filters\r\n        switch (newFilterField) {\r\n            case 'None': modifiedlist =  customerList ; break\r\n            case 'Name': modifiedlist =  newlist.filter(customer => customer.CompanyName === newKeyword) ; break\r\n            case 'City': modifiedlist =  newlist.filter(customer => customer.City === newKeyword) ; break\r\n            case 'State': modifiedlist =  newlist.filter(customer => customer.State === newKeyword) ; break\r\n            case 'Contact': modifiedlist =  newlist.filter(customer => customer.FirstName === newKeyword || customer.LastName === newKeyword) ; break\r\n            case 'ZIP': modifiedlist =  newlist.filter(customer => customer.PostalCode === newKeyword) ; break\r\n            default: modifiedlist =  customerList ; break\r\n        }\r\n\r\n        //Apply Sorting\r\n        switch (newSortField) {\r\n            case \"Name\": modifiedlist.sort((a,b) => (a.CompanyName.localeCompare(b.CompanyName))) ;break\r\n            case \"Name (Desc)\": modifiedlist.sort((a,b) => (b.CompanyName.localeCompare(a.CompanyName))) ; break\r\n            case \"City\": modifiedlist.sort((a,b) => (a.City.localeCompare(b.City)));break;\r\n            case \"City (Desc)\": modifiedlist.sort((a,b) =>  (b.City.localeCompare(a.City)));break;\r\n            case \"State\": modifiedlist.sort((a,b) => (a.State.localeCompare(b.State)));break;\r\n            case \"State (Desc)\": modifiedlist.sort((a,b) => (b.State.localeCompare(a.State)));break;\r\n            case \"Contact\": modifiedlist.sort((a,b) => (a.FirtstName.localeCompare(b.FirtstName)));break;\r\n            case \"Contact (Desc)\": modifiedlist.sort((a,b) => (b.FirtstName.localeCompare(a.FirtstName)));break;\r\n            case \"ZIP\": modifiedlist.sort((a,b) => (a.PostalCode.localeCompare(b.PostalCode)));break;\r\n            case \"ZIP (Desc)\": modifiedlist.sort((a,b) => (b.PostalCode.localeCompare(a.PostalCode)));break;\r\n        }\r\n\r\n        return modifiedlist\r\n    }\r\n\r\n    const handleClearFilter = () => { \r\n        setFilterInfo({})\r\n        setShowFilters(false)\r\n        \r\n        if(typeOfList === 'Customer-List'){\r\n            setFilterField('None')\r\n            setKeyword('None')\r\n            setSortField('None')\r\n            handleApplyFiltersClick()\r\n        }\r\n        //dispatch(getNotes(datesToShow, {}))\r\n    }\r\n\r\n    const handleLoadMore = () => dispatch(getInvoiceList(filterOptions, invoiceList ? invoiceList[invoiceList.length - 1]?.TxnDate : invoiceList))\r\n    \r\n\r\n\r\n    return (\r\n        <div id='feed-note-page' className=\"page page-padding large fade\">\r\n            <PageTitle title=\"Lists Page\" subtitle={'Showing ' + typeOfList} btns={['Filter']} btnFunc={()=> setShowFilters(!showFilters)}/>\r\n            <div className=\"input-section\">\r\n            <CustomInput \r\n                    title=\"Type of List\" \r\n                    placeholder=\"\"\r\n                    elName=\"list-type\"\r\n                    type=\"select\"\r\n                    options={typesOfLists}\r\n                    value={typeOfList}\r\n                    onChange={e => setTypeOfList(e.target.value) }/>\r\n                {showFilters && (\r\n                <div className=\"filter-setter-container\">\r\n                    <div className=\"info-section\">\r\n                        <p className=\"section-title bold centered\">\r\n                            Filter {typeOfList}\r\n                        </p>\r\n                        <br/>\r\n                        <div className=\"filter-fields flex\">\r\n                            <CustomInput \r\n                                title=\"Filter By\" \r\n                                placeholder=\"\"\r\n                                elName=\"note-account-type\"\r\n                                type=\"select\"\r\n                                options={filterOptions}\r\n                                value={filterField}\r\n                                onChange={e => {setFilterField(e.target.value); setKeyword(\"\")} } />\r\n\r\n                                {/* flex divider */}\r\n                                \r\n                            <>\r\n                            {filterField !== 'None' ? (\r\n                                <>\r\n                                <div style={{width: '5%'}}></div>\r\n                                <CustomInput \r\n                                title={`${filterField} is : `} \r\n                                placeholder=\"Enter a keyword\"\r\n                                elName=\"list-keyword\"\r\n                                type=\"text\"\r\n                                value={keyword}\r\n                                maxLength={60}\r\n                                onChange={e => setKeyword(e.target.value)}/> \r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                </>\r\n                            )}\r\n                            </> \r\n                            \r\n\r\n                        </div>\r\n                        <div className=\"filter-fields flex\">\r\n                        <CustomInput \r\n                                title=\"Sort By\" \r\n                                placeholder=\"\"\r\n                                elName=\"note-account-class\"\r\n                                type=\"select\"\r\n                                options={sortOptions}\r\n                                value={sortField}\r\n                                onChange={e => setSortField(e.target.value)}/>\r\n                        </div>\r\n\r\n                        <div className=\"filter-fields flex\">\r\n                        <button style={{margin: 'auto'}} onClick={handleClearFilter}>Clear Filters</button>\r\n                        <div style={{width: '5%'}}></div>\r\n                        <button style={{margin: 'auto'}} onClick={handleApplyFiltersClick}>Apply Filters</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"divider\"></div>\r\n                    \r\n                </div>)}\r\n                \r\n            </div>\r\n            <div className=\"feed notes-feed\">\r\n                   {typeOfList === 'Customer-List' && (loadingCustomerList ? <Loader/> : <TransactionTable data={customerListCompState} type=\"lists-customers\"/>) }\r\n                   {typeOfList === 'Invoice-List' && (loadingInvoiceList ? <Loader/> : \r\n                   (\r\n                    <>\r\n                        <TransactionTable data={invoiceList} type=\"lists-invoices\"/>\r\n                        <br/>\r\n                        <div className=\"info-section flex\">\r\n                            {disableShowMore ? (\r\n                                <button className={disableShowMore ? 'disabled' : ''} style={{margin: 'auto'}} onClick={handleLoadMore}>\r\n                                No more Invoices\r\n                            </button>\r\n                            ) : (\r\n                                <button style={{margin: 'auto'}} onClick={handleLoadMore}>\r\n                                Load more\r\n                            </button>\r\n                            )}            \r\n                        </div>\r\n                    </>\r\n                   )\r\n                   )\r\n                 }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n    const typesOfLists = ['Customer-List', 'Invoice-List']\r\n    const customerListFilterOptions = ['None','Name','City', 'State','Contact','ZIP']\r\n    const invoiceListFilterOptions = ['None','Invoice #','Name', 'State','Date']\r\n    const salesOrderListFilterOptions = ['Name','City', 'State','Contact','ZIP']\r\n\r\n\r\n    const customerListSortOptions = ['Name', 'Name (Desc)','City', 'City (Desc)', 'State' ,'State (Desc)','Contact', 'Contact (Desc)','ZIP', 'ZIP (Desc)']\r\n    const invoiceListSortOptions = ['Invoice #', \"Invoice # (Desc)\",'Name','Name (Desc)', 'State', 'State (Desc)','Date', 'Date (Desc)']\r\n\r\n\r\n\r\nexport default ListPageRenewed\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\r\nimport {useSelector} from 'react-redux'\r\nimport './index.css';\r\n\r\n// Component imports\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\n\r\n// Page Imports\r\nimport HomePage from './pages/HomePage'\r\nimport LoginPage from './pages/LoginPage';\r\nimport NoteCreatePage from './pages/NoteCreatePage';\r\nimport NoteFeedPage from './pages/NoteFeedPage'\r\nimport NoteViewPage from './pages/NoteViewPage'\r\nimport OrderCreatePage from './pages/OrderCreatePage';\r\nimport ReportsPage from './pages/ReportsPage';\r\nimport CustomerPage from './pages/CustomerPage';\r\nimport AdminPage from './pages/AdminPage'\r\nimport OrderSubmissionPage from './pages/OrderSubmissionPage'\r\nimport NoteSubmissionPage from './pages/NoteSubmissionPage'\r\nimport OrderFeedPage from './pages/OrderFeedPage'\r\nimport OrderViewPage from './pages/OrderViewPage'\r\nimport InvoicePage from './pages/InvoicePage'\r\nimport SalesOrderPage from './pages/SalesOrderPage';\r\nimport SideNav from './components/SideNav';\r\nimport ListsPageRenewed from './pages/ListPageRenewed';\r\n\r\n\r\n\r\nconst App = () => {\r\n  const userState = useSelector(state => state.userLogin)\r\n  const { userInfo } = userState\r\n\r\n  return (\r\n    <div className={`App`}>\r\n    <Router>\r\n        {userInfo ? (\r\n          <>\r\n            <Header/>\r\n            <SideNav/>\r\n          </>\r\n        ) : (<></>)}\r\n        <main>\r\n          <div className='container'>\r\n            <Route path='/login' component={LoginPage} exact/>\r\n            <Route path='/notecreate' component={NoteCreatePage} exact/>\r\n            <Route path='/notefeed' component={NoteFeedPage} exact/>\r\n            <Route path='/noteview/:id' component={NoteViewPage} exact/>\r\n            <Route path='/orderview/:id' component={OrderViewPage} exact/>\r\n            <Route path='/ordercreate' component={OrderCreatePage} exact/>\r\n            <Route path='/orderfeed' component={OrderFeedPage} exact/>\r\n            <Route path='/lists' component={ListsPageRenewed} exact/>\r\n            <Route path='/reportspage' component={ReportsPage} exact/>\r\n            <Route path='/submitorder' component={OrderSubmissionPage} exact/>\r\n            <Route path='/submitnote' component={NoteSubmissionPage} exact/>\r\n            <Route path='/invoiceview/:id' component={InvoicePage} exact/>\r\n            <Route path='/salesorderview/:id' component={SalesOrderPage} exact/>\r\n            <Route path='/customerpage/:id' component={CustomerPage} exact/>\r\n            <Route path='/admin/' component={AdminPage} exact/>\r\n            <Route path='/' component={HomePage} exact/>\r\n          </div>\r\n        </main> \r\n        {userInfo ? (\r\n          <Footer/>\r\n        ) : (<></>)}      \r\n    </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store'\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n"],"sourceRoot":""}